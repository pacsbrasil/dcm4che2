/* ***** BEGIN LICENSE BLOCK *****
* Version: MPL 1.1/GPL 2.0/LGPL 2.1
*
* The contents of this file are subject to the Mozilla Public License Version
* 1.1 (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
*
* The Initial Developer of the Original Code is
* Raster Images
* Portions created by the Initial Developer are Copyright (C) 2009-2010
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
* Babu Hussain A
* Meer Asgar Hussain B
* Prakash J
* Suresh V
*
* Alternatively, the contents of this file may be used under the terms of
* either the GNU General Public License Version 2 or later (the "GPL"), or
* the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
* in which case the provisions of the GPL or the LGPL are applicable instead
* of those above. If you wish to allow use of your version of this file only
* under the terms of either the GPL or the LGPL, and not to allow others to
* use your version of this file under the terms of the MPL, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the GPL or the LGPL. If you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the MPL, the GPL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.delegate.WindowingPanelLoader;
import javax.swing.JLabel;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

/**
 *
 * @author  BabuHussain
 * @version 0.5
 *
 */
public class Thumbnail extends JLabel{

    private BufferedImage image = null;
    private int thumbWidth=96;
    private int thumbHeight=96;
    private int maxWidth=96;
    private int maxHeight=96;
    private double thumbRatio;
    private int x;
    private int y;
     int imageWidth;
     int imageHeight;

    public Thumbnail(BufferedImage image) {
        this.image = image;
        if (image != null) {
            imageWidth = image.getWidth();
            imageHeight = image.getHeight();
            calculateAspectRatioBasedSize();
            //System.out.println(thumbHeight +" , "+thumbWidth);
            //this.image=GenericImageSinglePassIterator.createScaledImage(image, new Dimension(thumbWidth, thumbHeight));
        }
        initComponents();
        
    }
    private void calculateAspectRatioBasedSize()
    {
        thumbRatio=(double)thumbWidth/thumbHeight;          
        double imageRatio=(double)imageWidth/(double)imageHeight;
        if(thumbRatio<imageRatio)        
            thumbHeight=(int)(thumbWidth/imageRatio);       
        else      
            thumbWidth=(int)(thumbHeight*imageRatio);
        
        x=(maxWidth-thumbWidth)/2;
        y=(maxHeight-thumbHeight)/2;
        
    }
    
    /**
     * This override routine used to paint the image box
     * @param gs
     */
    @Override
    public void paintComponent(Graphics gs) {
        Graphics2D g = (Graphics2D) gs;
        g.setRenderingHint( RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        if (image != null) {
            //calculateAspectRatioBasedSize();
            //System.out.println(image.getHeight() +" , "+image.getWidth());
            Image scaledPicture = WindowingPanelLoader.getFasterScaledInstance(image, thumbWidth, thumbHeight, 
                    RenderingHints.VALUE_INTERPOLATION_BICUBIC, true);
            g.drawImage(scaledPicture, x, y, null);
//            g.drawImage(image, x,y, thumbWidth,thumbHeight, null);
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {


        setBackground(new java.awt.Color(0, 0, 0));
        setDoubleBuffered(false);
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(128, 128));
        this.setFont(new java.awt.Font("Times", 0, 10));
        this.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    }// </editor-fold>

}
