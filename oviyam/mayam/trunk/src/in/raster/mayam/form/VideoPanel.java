/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import java.awt.GridLayout;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;

/**
 *
 * @author Devishree
 * @version 2.1
 */
public class VideoPanel extends javax.swing.JPanel {

    Timer timer = null;
    ImageIcon play = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/play.png"));
    ImageIcon pause = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pause.png"));
    ImageIcon mute = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/mute.png"));
    ImageIcon lowLevel = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound1.png"));
    ImageIcon medium = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound2.png"));
    ImageIcon highLevel = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound3.png"));

    /**
     * Creates new form VideoPanel
     */
    public VideoPanel() {
        initComponents();
        videoContainer.setLayout(new GridLayout(1, 1));
        videoTimeController.setMaximum(0);
        volumeController.setMaximum(200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        videoContainer = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        playOrPauseBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        videoTimeController = new javax.swing.JSlider();
        timeDisplayLabel = new javax.swing.JLabel();
        volumeBtn = new javax.swing.JButton();
        volumeController = new javax.swing.JSlider();

        javax.swing.GroupLayout videoContainerLayout = new javax.swing.GroupLayout(videoContainer);
        videoContainer.setLayout(videoContainerLayout);
        videoContainerLayout.setHorizontalGroup(
            videoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 796, Short.MAX_VALUE)
        );
        videoContainerLayout.setVerticalGroup(
            videoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        jToolBar1.setFloatable(false);

        playOrPauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pause.png"))); // NOI18N
        playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText")); // NOI18N
        playOrPauseBtn.setFocusable(false);
        playOrPauseBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playOrPauseBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playOrPauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playOrPauseBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(playOrPauseBtn);

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stop.png"))); // NOI18N
        stopBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.stopButton.toolTipText")); // NOI18N
        stopBtn.setFocusable(false);
        stopBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(stopBtn);

        videoTimeController.setMaximumSize(new java.awt.Dimension(250, 70));
        videoTimeController.setMinimumSize(new java.awt.Dimension(250, 70));
        videoTimeController.setPreferredSize(new java.awt.Dimension(250, 70));
        videoTimeController.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                videoTimeControllerMouseDragged(evt);
            }
        });
        jToolBar1.add(videoTimeController);

        timeDisplayLabel.setFont(ApplicationContext.textFont);
        timeDisplayLabel.setText("jLabel1");
        jToolBar1.add(timeDisplayLabel);

        volumeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound2.png"))); // NOI18N
        volumeBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.volumeButton.toolTipText")); // NOI18N
        volumeBtn.setFocusable(false);
        volumeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        volumeBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        volumeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(volumeBtn);

        volumeController.setMaximumSize(new java.awt.Dimension(200, 70));
        volumeController.setMinimumSize(new java.awt.Dimension(200, 70));
        volumeController.setPreferredSize(new java.awt.Dimension(200, 70));
        volumeController.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                volumeControllerMouseDragged(evt);
            }
        });
        jToolBar1.add(volumeController);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(videoContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(videoContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playOrPauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playOrPauseBtnActionPerformed
        if (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().isPlayable()) {
            if (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().isPlaying()) {
                playOrPauseBtn.setIcon(play);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
                ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().pause();
            } else {
                playOrPauseBtn.setIcon(pause);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
                startTimer();
                ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().play();
            }
        } else {
            ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().playMedia(((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().mrl().replace("file://", ""));
            startTimer();
            playOrPauseBtn.setIcon(pause);
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
        }
    }//GEN-LAST:event_playOrPauseBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().stop();
        stopTimer();
        playOrPauseBtn.setIcon(play);
        playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
    }//GEN-LAST:event_stopBtnActionPerformed

    private void videoTimeControllerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoTimeControllerMouseDragged
        ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().setTime(videoTimeController.getValue() * 1000);
    }//GEN-LAST:event_videoTimeControllerMouseDragged

    private void volumeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeBtnActionPerformed
        if (!volumeBtn.getIcon().equals(mute)) {
            volumeBtn.setIcon(mute);
            ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().mute();
        } else {
            setVolumeIcon();
            ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().mute(false);
        }
    }//GEN-LAST:event_volumeBtnActionPerformed

    private void volumeControllerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeControllerMouseDragged
        ((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().setVolume(volumeController.getValue());
        setVolumeIcon();
    }//GEN-LAST:event_volumeControllerMouseDragged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton playOrPauseBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JLabel timeDisplayLabel;
    private javax.swing.JPanel videoContainer;
    private javax.swing.JSlider videoTimeController;
    private javax.swing.JButton volumeBtn;
    private javax.swing.JSlider volumeController;
    // End of variables declaration//GEN-END:variables

    public void setUniqueIdentifier(String iuid) {
        videoContainer.setName(iuid);
    }

    public void setMediaPlayer(EmbeddedMediaPlayerComponent mediaPlayerComponent) {
        videoContainer.add(mediaPlayerComponent);
    }

    public void startTimer() {
        if (timer == null) {
            timer = new Timer();
            timer.scheduleAtFixedRate(new CineTimer(), 0, 900);
        }
    }

    public void stopTimer() {
        if (timer != null) {
            timer.cancel();
            timer = null;
        }
    }

    public void setVolumeIcon() {
        if (volumeController.getValue() < 75) {
            volumeBtn.setIcon(lowLevel);
        } else if (volumeController.getValue() > 75 && volumeController.getValue() < 150) {
            volumeBtn.setIcon(medium);
        } else {
            volumeBtn.setIcon(highLevel);
        }
    }

    public void updateLocale() {
        stopBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.stopButton.toolTipText"));
        volumeBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.volumeButton.toolTipText"));
        if (playOrPauseBtn.getIcon().equals(play)) {
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
        } else {
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
        }
    }

    private class CineTimer extends TimerTask {

        @Override
        public void run() {
            if (videoTimeController.getMaximum() == 0) {
                videoTimeController.setMaximum((int) (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getLength() / 1000));
                volumeController.setValue(((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getVolume());
            }
            String mins = String.valueOf((int) ((((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getTime() / 1000) / 60));
            String secs = String.valueOf((int) (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getTime() / 1000));
            if (mins.length() == 1) {
                mins = 0 + mins;
            }
            if (secs.length() == 1) {
                secs = 0 + secs;
            }
            timeDisplayLabel.setText(mins + ":" + secs);
            videoTimeController.setValue((int) (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getTime() / 1000));
            if (((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getMediaPlayerState().equals(((EmbeddedMediaPlayerComponent) videoContainer.getComponent(0)).getMediaPlayer().getMediaPlayerState().libvlc_Ended)) {
                playOrPauseBtn.setIcon(play);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
                timer.cancel();
                timer = null;
            }
        }
    }
}
