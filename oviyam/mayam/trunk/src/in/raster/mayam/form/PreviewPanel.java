/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.models.Series;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JLabel;

/**
 *
 * @author Devishree
 * @version 2.0
 */
public class PreviewPanel extends javax.swing.JPanel {

    int totalImages;
    String dest, studyInstanceUid, seriesInstanceUid;
    Calendar todayInfo;
    Thumbnail[] threeThumbnails = null;
    int totalHeight = 0;

    public PreviewPanel(String studyInstanceUid, String seriesInstanceUid, String seriesDescription, int totalImages, Thumbnail[] threeThumbnails, String dest) {
        this.totalImages = totalImages;
        this.studyInstanceUid = studyInstanceUid;
        this.seriesInstanceUid = seriesInstanceUid;
        initComponents();
        if (!seriesDescription.contains("Multiframe") && !seriesDescription.contains("Video")) {
            seriesLabel.setText(seriesDescription + ", Images:" + totalImages);
        } else {
            seriesLabel.setText(seriesDescription);
        }
        this.threeThumbnails = threeThumbnails;
        if (dest == null) {
            todayInfo = Calendar.getInstance();
            this.dest = ApplicationContext.listenerDetails[2] + File.separator + todayInfo.get(Calendar.YEAR) + File.separator + todayInfo.get(Calendar.MONTH) + File.separator + todayInfo.get(Calendar.DATE) + File.separator + studyInstanceUid + File.separator + seriesInstanceUid + File.separator + "Thumbnails" + File.separator;
        } else {
            this.dest = dest;
        }
        setLayout(null);
        createComponents();
        addListenerForThumbnails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JPanel();
        seriesLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        seriesLabel.setFont(ApplicationContext.textFont);
        seriesLabel.setText("Series Info");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seriesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(seriesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel seriesLabel;
    // End of variables declaration//GEN-END:variables

    private void createComponents() {
        seriesLabel.setBounds(0, 0, 220, 20);
        int imgPanelHeight = 76;
        loadThumbnails();
        totalHeight = 23 + imgPanelHeight;
    }

    public void loadThumbnails() {
        imagePanel.removeAll();
        imagePanel.setLayout(null);
        int xPos = 0, yPos = 0;
        for (int i = 0; i < threeThumbnails.length; i++) {
            threeThumbnails[i].setBounds(xPos, yPos, 76, 76);
            if (!seriesLabel.getText().contains("Video")) {
                threeThumbnails[i].readImage(dest + File.separator + threeThumbnails[i].getName());
            } else {
                threeThumbnails[i].setVideoImage();
            }
            imagePanel.add(threeThumbnails[i]);
            xPos += 76;
        }
        imagePanel.setBounds(0, seriesLabel.getHeight() + 5, 220, 76);
    }

    public int getTotalHeight() {
        return totalHeight;
    }

    private void addListenerForThumbnails() {
        for (int i = 0; i < threeThumbnails.length; i++) {
            if (i == 0) {
                addMouseListener(threeThumbnails[i], 0);
            } else if (i == 1) {
                addMouseListener(threeThumbnails[i], totalImages / 2);
            } else {
                addMouseListener(threeThumbnails[i], totalImages - 1);
            }
        }
    }

    private void addMouseListener(Thumbnail thumbnail, final int instanceIdentificationNo) {
        thumbnail.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2 && ApplicationContext.isLocal) {
                    String sopUid = ((JLabel) me.getSource()).getName();
                    createPreviews();
                    String filePath = ApplicationContext.databaseRef.getFileLocation(studyInstanceUid, seriesInstanceUid, sopUid);
                    ApplicationContext.createLayeredCanvas(filePath, studyInstanceUid, instanceIdentificationNo, false);
                    ApplicationContext.displayAllPreviews();
                    ApplicationContext.createVideoPreviews(studyInstanceUid);
                    ApplicationContext.setCorrespondingPreviews();
                    ApplicationContext.setAllSeriesIdentification(studyInstanceUid);
                    ApplicationContext.imgView.getImageToolbar().enableMultiSeriesTools();
                }
            }
        });
    }

    private void createPreviews() {
        ImagePreviewPanel viewerPreview = new ImagePreviewPanel();
        viewerPreview.setPatientInfo(((ImagePreviewPanel) getParent().getParent().getParent().getParent().getParent()).getLabelInfo());
        int position = 0, totalSize = 0;
        ArrayList<Series> allSeriesOfStudy = ApplicationContext.databaseRef.getSeriesList_SepMulti(studyInstanceUid);
        for (int i = 0; i < allSeriesOfStudy.size(); i++) {
            Series curr = allSeriesOfStudy.get(i);
            if (!curr.isVideo()) {
                ViewerPreviewPanel viewerPreviewPanel = null;
                if (curr.getSeriesDesc().contains("Multiframe")) {
                    viewerPreviewPanel = new ViewerPreviewPanel(studyInstanceUid, curr, curr.getInstanceUID() + "," + curr.getSeriesRelatedInstance());
                } else {
                    viewerPreviewPanel = new ViewerPreviewPanel(studyInstanceUid, curr, null);
                }
                viewerPreviewPanel.setVisible(true);
                viewerPreviewPanel.setName(String.valueOf(i));
                int height = viewerPreviewPanel.getTotalHeight();
                totalSize += height + 5;
                viewerPreviewPanel.setBounds(0, position, 230, height);
                viewerPreview.addViewerPanel(position, height, viewerPreviewPanel, totalSize);
                position += (height + 5);
            } else {
                ViewerPreviewPanel viewerPreviewPanel = new ViewerPreviewPanel(studyInstanceUid, curr, curr.getInstanceUID() + "," + curr.getSeriesRelatedInstance());
                viewerPreviewPanel.setSopUid(curr.getInstanceUID());
                viewerPreviewPanel.setVisible(true);
                viewerPreviewPanel.setName(String.valueOf(i));
                int height = viewerPreviewPanel.getTotalHeight();
                totalSize += height + 5;
                viewerPreviewPanel.setBounds(0, position, 230, height);
                viewerPreview.addViewerPanel(position, height, viewerPreviewPanel, totalSize);
                position += (height + 5);
                viewerPreviewPanel.loadVideoImage();
            }
        }
        ApplicationContext.ImageView(viewerPreview.getPatientName(), studyInstanceUid, viewerPreview);
    }

    public void setDest(String dest) {
        this.dest = dest;
    }
}
