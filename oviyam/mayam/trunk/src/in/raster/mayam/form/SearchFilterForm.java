/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.listeners.CursorController;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.*;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author Devishree
 * @version 2.0
 */
public class SearchFilterForm extends javax.swing.JPanel {

    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
    JPopupMenu modalityPopup = new JPopupMenu();
    JCheckBox modalities[] = new JCheckBox[]{new JCheckBox("CT"), new JCheckBox("CR"), new JCheckBox("MR"), new JCheckBox("XA"), new JCheckBox("SC"), new JCheckBox("NM"), new JCheckBox("RF"), new JCheckBox("DX"), new JCheckBox("PX"), new JCheckBox("US"), new JCheckBox("OT"), new JCheckBox("DR"), new JCheckBox("SR"), new JCheckBox("MG"), new JCheckBox("RG")};
    JPanel popupPanel = null;
    boolean isPopupShowing = false;
    int columns = 4;
    String modalitiesChoosen = "";
    String newModalities = "";
    KeyAdapter keyAdapter = null;
    KeyEventDispatcher keyEventDispatcher;

    /**
     * Creates new form SearchFilterForm
     */
    public SearchFilterForm() {
        initComponents();
        designPopup();
        this.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                isPopupShowing = false;
            }
        });
        DocumentFilter documentFilter = new UpperCaseDocumentFilter();
        ((AbstractDocument) modalityTxt.getDocument()).setDocumentFilter(documentFilter);
        searchBtn.addActionListener(CursorController.createListener(ApplicationContext.mainScreenObj, searchBtnListener));
        addDateChooserListeners();
        addKeyEventDispatcher();
        fromDateChooser.getCalendarButton().setPreferredSize(new Dimension(25, 20));
        toDateChooser.getCalendarButton().setPreferredSize(new Dimension(25, 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientIdLabel = new javax.swing.JLabel();
        patientIdTxt = new javax.swing.JTextField();
        patientNameLabel = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        accessionNoLabel = new javax.swing.JLabel();
        accNoTxt = new javax.swing.JTextField();
        studyDescLabel = new javax.swing.JLabel();
        studyDescriptionTxt = new javax.swing.JTextField();
        referringPhysicianLabel = new javax.swing.JLabel();
        referringPhysicianTxt = new javax.swing.JTextField();
        modalityLabel = new javax.swing.JLabel();
        modalityTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        fromDateLabel = new javax.swing.JLabel();
        toDateLabel = new javax.swing.JLabel();
        fromDateChooser = new com.toedter.calendar.JDateChooser();

        patientIdLabel.setFont(ApplicationContext.textFont);
        patientIdLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.patientIdLabel.text")); // NOI18N
        patientIdLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        patientIdTxt.setFont(ApplicationContext.textFont);
        patientIdTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        patientNameLabel.setFont(ApplicationContext.textFont);
        patientNameLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.patientNameLabel.text")); // NOI18N
        patientNameLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        patientNameTxt.setFont(ApplicationContext.textFont);
        patientNameTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        accessionNoLabel.setFont(ApplicationContext.textFont);
        accessionNoLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.accessionLabel.text")); // NOI18N
        accessionNoLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        accNoTxt.setFont(ApplicationContext.textFont);
        accNoTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        studyDescLabel.setFont(ApplicationContext.textFont);
        studyDescLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.studyDescriptionLabel.text")); // NOI18N
        studyDescLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        studyDescriptionTxt.setFont(ApplicationContext.textFont);
        studyDescriptionTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        referringPhysicianLabel.setFont(ApplicationContext.textFont);
        referringPhysicianLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.referringPhysicianLabel.text")); // NOI18N
        referringPhysicianLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        referringPhysicianTxt.setFont(ApplicationContext.textFont);
        referringPhysicianTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        modalityLabel.setFont(ApplicationContext.textFont);
        modalityLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.modalityLabel.text")); // NOI18N
        modalityLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        modalityTxt.setFont(ApplicationContext.textFont);
        modalityTxt.setPreferredSize(new java.awt.Dimension(150, 28));

        jButton1.setText("....");
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setPreferredSize(new java.awt.Dimension(28, 28));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        searchBtn.setText(ApplicationContext.currentBundle.getString("MainScreen.searchButton.text")); // NOI18N
        searchBtn.setFocusPainted(false);

        resetBtn.setText(ApplicationContext.currentBundle.getString("MainScreen.resetButton.text")); // NOI18N
        resetBtn.setFocusPainted(false);
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        toDateChooser.setDateFormatString("dd/MM/yyyy");
        toDateChooser.setFont(ApplicationContext.textFont);
        toDateChooser.setMaskFormatVisible(true);
        toDateChooser.setPreferredSize(new java.awt.Dimension(150, 28));

        fromDateLabel.setFont(ApplicationContext.textFont);
        fromDateLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.fromDateLabel.text")); // NOI18N
        fromDateLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        toDateLabel.setFont(ApplicationContext.textFont);
        toDateLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.toDateLabel.text")); // NOI18N
        toDateLabel.setPreferredSize(new java.awt.Dimension(150, 20));

        fromDateChooser.setDateFormatString("dd/MM/yyyy");
        fromDateChooser.setFont(ApplicationContext.textFont);
        fromDateChooser.setMaskFormatVisible(true);
        fromDateChooser.setPreferredSize(new java.awt.Dimension(150, 28));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(fromDateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientIdTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientIdLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(referringPhysicianTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addComponent(accessionNoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(accNoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(referringPhysicianLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studyDescLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(modalityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(studyDescriptionTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modalityTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accessionNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studyDescLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studyDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(referringPhysicianLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modalityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(referringPhysicianTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(modalityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(resetBtn))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (ApplicationContext.activeTheme.equalsIgnoreCase("nimrod")) {
            if (isPopupShowing) {
                isPopupShowing = false;
                modalityPopup.setVisible(false);
            } else {
                showPopup();
            }
        } else {
            showPopup();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        reset();
    }//GEN-LAST:event_resetBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accNoTxt;
    private javax.swing.JLabel accessionNoLabel;
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JLabel fromDateLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel modalityLabel;
    private javax.swing.JTextField modalityTxt;
    private javax.swing.JLabel patientIdLabel;
    private javax.swing.JTextField patientIdTxt;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JLabel referringPhysicianLabel;
    private javax.swing.JTextField referringPhysicianTxt;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel studyDescLabel;
    private javax.swing.JTextField studyDescriptionTxt;
    private com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JLabel toDateLabel;
    // End of variables declaration//GEN-END:variables

    private void designPopup() {
        modalitiesChoosen = modalityTxt.getText();
        newModalities = "";
        final String[] modalityArr = modalitiesChoosen.split(","); //To set the check boxes selected when clicking the button next time                
        int rows;
        ArrayList<String> activeModalities = ApplicationContext.databaseRef.getActiveModalities();
        for (int i = 0; i < modalityArr.length; i++) {
            if (!activeModalities.contains(modalityArr[i]) && !modalityArr[i].equals("")) {
                newModalities += "," + modalityArr[i];
            }
        }
        modalities = new JCheckBox[activeModalities.size()];
        if (activeModalities.size() % columns == 0) {
            rows = activeModalities.size() / columns;
        } else {
            rows = (activeModalities.size() / columns) + 1;
        }
        popupPanel = new JPanel(new GridLayout(rows, columns));
        for (int i = 0; i < activeModalities.size(); i++) {
            JCheckBox chk = new JCheckBox(activeModalities.get(i));
            popupPanel.add(chk);
            modalities[i] = chk;
            chk.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    String modString = "";
                    for (JCheckBox chk : modalities) {
                        if (chk.isSelected()) {
                            modString += "," + chk.getActionCommand();
                        }
                    }

                    if (!newModalities.equals("")) {
                        modString += newModalities;
                    }

                    if (modString.startsWith(",")) {
                        modString = modString.substring(1);
                    }

                    modalityTxt.setText(modString);
                }
            });
            modalityPopup.removeAll();
            modalityPopup.add(popupPanel);
        }
        for (int j = 0; j < modalityArr.length; j++) {
            for (int k = 0; k < modalities.length; k++) {
                if (modalities[k].getText().equals(modalityArr[j])) {
                    modalities[k].setSelected(true);
                }
            }
        }
    }

    private String setSearchDate() {
        String studyDate;
        if (fromDateChooser.getDate() != null && toDateChooser.getDate() != null) {
            Date from = (Date) fromDateChooser.getDate();
            Date to = (Date) toDateChooser.getDate();
            studyDate = (dateFormat.format(from) + "-" + dateFormat.format(to));
        } else if (fromDateChooser.getDate() != null) {
            studyDate = dateFormat.format((Date) fromDateChooser.getDate());
        } else if (toDateChooser.getDate() != null) {
            studyDate = dateFormat.format((Date) toDateChooser.getDate());
        } else {
            studyDate = "";
        }
        return studyDate;
    }

    private void showPopup() {
        isPopupShowing = true;
        modalities = null;
        popupPanel.removeAll();
        popupPanel.revalidate();
        popupPanel.repaint();
        designPopup();
        modalityPopup.show(jButton1, jButton1.getWidth(), jButton1.getHeight() - 20);
    }

    public void addKeyEventDispatcher() {
        keyEventDispatcher = new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
                if (e.getID() == KeyEvent.KEY_PRESSED && ApplicationContext.mainScreenObj.isFocused()) {
                    keyEventProcessor(e);
                }
                boolean discardEvent = false;
                return discardEvent;
            }
        };
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(CursorController.createListener(ApplicationContext.mainScreenObj, keyEventDispatcher));
    }

    private void keyEventProcessor(KeyEvent e) {
        if (!ApplicationContext.isLocal && this.equals(ApplicationContext.mainScreenObj.getCurrentSearchFilterForm()) && !ApplicationContext.mainScreenObj.settingsForm.isVisible()) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                search();
            } else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                reset();
            }
        }
    }

    public void search() {
        ApplicationContext.mainScreenObj.removeAllPreviewsOfImagePreviewPanel();
        ApplicationContext.communicationDelegate.setQueryParameters(patientNameTxt.getText(), patientIdTxt.getText(), accNoTxt.getText(), "", modalityTxt.getText().replace(",", "\\"), setSearchDate(), studyDescriptionTxt.getText(), referringPhysicianTxt.getText());
        ApplicationContext.communicationDelegate.doQuery("Search");
    }

    public void reset() {
        patientIdTxt.setText("");
        patientNameTxt.setText("");
        accNoTxt.setText("");
        studyDescriptionTxt.setText("");
        modalityTxt.setText("");
        modalitiesChoosen = "";
        newModalities = "";
        referringPhysicianTxt.setText("");
        for (int i = 0; i < modalities.length; i++) {
            if (modalities[i].isSelected()) {
                modalities[i].doClick();
            }
        }
        fromDateChooser.setDate(null);
        toDateChooser.setDate(null);
    }
    ActionListener searchBtnListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            search();
        }
    };

    class UpperCaseDocumentFilter extends DocumentFilter {

        @Override
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attr) throws BadLocationException {
            fb.insertString(offset, text.toUpperCase(), attr);
        }

        @Override
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            fb.replace(offset, length, text.toUpperCase(), attrs);
        }
    }

    public void applyLocaleChange() {
        patientIdLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.patientIdLabel.text"));
        patientNameLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.patientNameLabel.text"));
        accessionNoLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.accessionLabel.text"));
        studyDescLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.studyDescriptionLabel.text"));
        referringPhysicianLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.referringPhysicianLabel.text"));
        modalityLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.modalityLabel.text"));
        searchBtn.setText(ApplicationContext.currentBundle.getString("MainScreen.searchButton.text"));
        resetBtn.setText(ApplicationContext.currentBundle.getString("MainScreen.resetButton.text"));
        fromDateLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.fromDateLabel.text"));
        toDateLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.toDateLabel.text"));
    }

    private void addDateChooserListeners() {
        FocusManager focusManager = new FocusManager();
        fromDateChooser.getTextBox().addPropertyChangeListener(focusManager);
        toDateChooser.getTextBox().addPropertyChangeListener(focusManager);
    }

    public class FocusManager implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            fromDateChooser.getTextBox().setForeground(fromDateLabel.getForeground());
            toDateChooser.getTextBox().setForeground(toDateLabel.getForeground());
        }
    }
}
