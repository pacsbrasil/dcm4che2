/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.form.dialogs.QueryButtonSettings;
import in.raster.mayam.models.ButtonsModel;
import in.raster.mayam.models.PresetModel;
import in.raster.mayam.models.ServerModel;
import in.raster.mayam.models.combo.CountryComboModel;
import in.raster.mayam.models.combo.LanguageComboModel;
import in.raster.mayam.models.combo.ModalityComboModel;
import in.raster.mayam.models.combo.ThemeComboModel;
import in.raster.mayam.models.table.ButtonTableModel;
import in.raster.mayam.models.table.PresetTableModel;
import in.raster.mayam.models.table.ServerTableModel;
import in.raster.mayam.models.table.editor.ServerTableCellEditor;
import in.raster.mayam.models.table.renderer.CellRenderer;
import in.raster.mayam.models.table.renderer.CheckBoxRenderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.dcm4che.util.DcmURL;

/**
 *
 * @author Devishree
 * @version 2.0
 */
public class SettingsForm extends javax.swing.JFrame {

    ServerTableModel serverTableModel;
    QueryButtonSettings buttonSettings;
    JPopupMenu popup = new JPopupMenu();
    JLabel moveLabel = new JLabel(" ");
    String buttonToMove = null;
    int columns = 5;
    String[] activeLanguageAndCountry;
    LanguageComboModel languageComboModel = null;

    /**
     * Creates new form SettingsForm
     */
    public SettingsForm() {
        activeLanguageAndCountry = ApplicationContext.databaseRef.getActiveLanguage();
        initComponents();
        jTabbedPane1.setFont(ApplicationContext.labelFont);
        popup.add(moveLabel);
        moveLabel.setOpaque(true);
        moveLabel.setBackground(Color.BLACK);
        moveLabel.setForeground(Color.ORANGE);
        moveLabel.setFont(ApplicationContext.labelFont);
        setServerListTableModel();
        setButtonListTableModel(ApplicationContext.databaseRef.getAllQueryButtons());
        loadThemeCombo();
        loadModalitiesCombo();
        loadModalitiesConfig();
        addKeyListener();
        setRenderer();
        setServerListTableRenderer();
        addButtonListTableListener();
        addServerListTableKeyListener();
        setRetrieveTypeCombo();
    }

    public void setSelectedTab() {
        jTabbedPane1.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        retrieveTypeGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        serverPanel = new javax.swing.JPanel();
        listenerPanel = new javax.swing.JPanel();
        listenerAetLabel = new javax.swing.JLabel();
        listenerAetTxt = new javax.swing.JTextField();
        listenerPortLabel = new javax.swing.JLabel();
        listenerPortTxt = new javax.swing.JTextField();
        saveListenerBtn = new javax.swing.JButton();
        serversPanel = new javax.swing.JPanel();
        addServerBtn = new javax.swing.JButton();
        deleteServerBtn = new javax.swing.JButton();
        verifyServerBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        serverListTable = new javax.swing.JTable();
        queryParametersPanel = new javax.swing.JPanel();
        modalityPanel = new javax.swing.JPanel();
        queryButtonsPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        buttonListTable = new javax.swing.JTable();
        preferencesPanel = new javax.swing.JPanel();
        languagePanel = new javax.swing.JPanel();
        countryLabel = new javax.swing.JLabel();
        countryCombo = new javax.swing.JComboBox();
        languageLabel = new javax.swing.JLabel();
        languageCombo = new javax.swing.JComboBox();
        localeIdLabel = new javax.swing.JLabel();
        localeTextField = new javax.swing.JTextField();
        updateLanguageButton = new javax.swing.JButton();
        themesPanel = new javax.swing.JPanel();
        themeCombo = new javax.swing.JComboBox();
        saveThemeBtn = new javax.swing.JButton();
        selectThemeLabel = new javax.swing.JLabel();
        presetsPanel = new javax.swing.JPanel();
        addPreset = new javax.swing.JButton();
        deletePreset = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        presetListTable = new javax.swing.JTable();
        presetModalityLabel = new javax.swing.JLabel();
        modalityCombo = new javax.swing.JComboBox();
        miscellaneousPanel = new javax.swing.JPanel();
        loopbackChk = new javax.swing.JCheckBox();
        retrieveTypeLabel = new javax.swing.JLabel();
        cMoveRadioBtn = new javax.swing.JRadioButton();
        cGetRadioBtn = new javax.swing.JRadioButton();
        wadoRadioBtn = new javax.swing.JRadioButton();
        dynamicJNLPRetrieveTypeChk = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(ApplicationContext.currentBundle.getString("MainScreen.settingsMenuItem.text")); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/in/raster/mayam/form/images/fav_mayam.png")));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        listenerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.listener.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        listenerAetLabel.setFont(ApplicationContext.labelFont);
        listenerAetLabel.setText(ApplicationContext.currentBundle.getString("Preferences.listener.aeTitleLabel.text")); // NOI18N

        listenerAetTxt.setFont(ApplicationContext.textFont);
        listenerAetTxt.setText(ApplicationContext.listenerDetails[0]);

        listenerPortLabel.setFont(ApplicationContext.labelFont);
        listenerPortLabel.setText(ApplicationContext.currentBundle.getString("Preferences.listener.portLabel.text")); // NOI18N

        listenerPortTxt.setFont(ApplicationContext.textFont);
        listenerPortTxt.setText(ApplicationContext.listenerDetails[1]);

        saveListenerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.listener.saveButton.text")); // NOI18N
        saveListenerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveListenerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listenerPanelLayout = new javax.swing.GroupLayout(listenerPanel);
        listenerPanel.setLayout(listenerPanelLayout);
        listenerPanelLayout.setHorizontalGroup(
            listenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listenerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listenerAetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listenerAetTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listenerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(listenerPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveListenerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        listenerPanelLayout.setVerticalGroup(
            listenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listenerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listenerAetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listenerAetTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listenerPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listenerPortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveListenerBtn))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        serversPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.serversPanel.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        addServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.addButton.text")); // NOI18N
        addServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addServerBtnActionPerformed(evt);
            }
        });

        deleteServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.deleteButton.text")); // NOI18N
        deleteServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteServerBtnActionPerformed(evt);
            }
        });

        verifyServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.verifyButton.text")); // NOI18N
        verifyServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyServerBtnActionPerformed(evt);
            }
        });

        serverListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        serverListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverListTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(serverListTable);

        javax.swing.GroupLayout serversPanelLayout = new javax.swing.GroupLayout(serversPanel);
        serversPanel.setLayout(serversPanelLayout);
        serversPanelLayout.setHorizontalGroup(
            serversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serversPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(serversPanelLayout.createSequentialGroup()
                        .addComponent(addServerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteServerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(verifyServerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        serversPanelLayout.setVerticalGroup(
            serversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serversPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addServerBtn)
                    .addComponent(deleteServerBtn)
                    .addComponent(verifyServerBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listenerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(serversPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listenerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serversPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(ApplicationContext.currentBundle.getString("Preferences.servers.text"), serverPanel); // NOI18N

        modalityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.modalities.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        javax.swing.GroupLayout modalityPanelLayout = new javax.swing.GroupLayout(modalityPanel);
        modalityPanel.setLayout(modalityPanelLayout);
        modalityPanelLayout.setHorizontalGroup(
            modalityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 673, Short.MAX_VALUE)
        );
        modalityPanelLayout.setVerticalGroup(
            modalityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 76, Short.MAX_VALUE)
        );

        queryButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.queryParameters.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        addButton.setText(ApplicationContext.currentBundle.getString("Preferences.queryParameters.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText(ApplicationContext.currentBundle.getString("Preferences.queryParameters.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(buttonListTable);

        javax.swing.GroupLayout queryButtonsPanelLayout = new javax.swing.GroupLayout(queryButtonsPanel);
        queryButtonsPanel.setLayout(queryButtonsPanelLayout);
        queryButtonsPanelLayout.setHorizontalGroup(
            queryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(queryButtonsPanelLayout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        queryButtonsPanelLayout.setVerticalGroup(
            queryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout queryParametersPanelLayout = new javax.swing.GroupLayout(queryParametersPanel);
        queryParametersPanel.setLayout(queryParametersPanelLayout);
        queryParametersPanelLayout.setHorizontalGroup(
            queryParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modalityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        queryParametersPanelLayout.setVerticalGroup(
            queryParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modalityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(queryButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(ApplicationContext.currentBundle.getString("Preferences.queryPanel.text"), queryParametersPanel); // NOI18N

        languagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.language.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        countryLabel.setFont(ApplicationContext.labelFont);
        countryLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.countryLabel.text")); // NOI18N

        countryCombo.setFont(ApplicationContext.textFont);
        countryCombo.setModel(new CountryComboModel(ApplicationContext.databaseRef.getCountryList()));
        countryCombo.setSelectedItem(activeLanguageAndCountry[1]);
        countryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboActionPerformed(evt);
            }
        });

        languageLabel.setFont(ApplicationContext.labelFont);
        languageLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.languageLabel.text")); // NOI18N

        languageCombo.setFont(ApplicationContext.textFont);
        languageCombo.setModel(new LanguageComboModel(ApplicationContext.databaseRef.getLanguagesOfCountry((String) countryCombo.getSelectedItem())));
        languageCombo.setSelectedItem(activeLanguageAndCountry[3]);
        languageCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                languageComboItemStateChanged(evt);
            }
        });

        localeIdLabel.setFont(ApplicationContext.labelFont);
        localeIdLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.localidLabel.text")); // NOI18N

        localeTextField.setEditable(false);
        localeTextField.setFont(ApplicationContext.textFont);
        localeTextField.setText(activeLanguageAndCountry[4]);

        updateLanguageButton.setText(ApplicationContext.currentBundle.getString("Preferences.language.okButton.text")); // NOI18N
        updateLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLanguageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout languagePanelLayout = new javax.swing.GroupLayout(languagePanel);
        languagePanel.setLayout(languagePanelLayout);
        languagePanelLayout.setHorizontalGroup(
            languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(localeIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(languageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateLanguageButton)
                    .addComponent(countryCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(localeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(languageCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        languagePanelLayout.setVerticalGroup(
            languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(countryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(languageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(localeIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(updateLanguageButton)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        themesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, ApplicationContext.currentBundle.getString("Preferences.themes.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Lucida Grande",Font.BOLD,15))); // NOI18N

        themeCombo.setFont(ApplicationContext.textFont);
        themeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        saveThemeBtn.setText(ApplicationContext.currentBundle.getString("Preferences.themes.saveButton.text")); // NOI18N
        saveThemeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveThemeBtnActionPerformed(evt);
            }
        });

        selectThemeLabel.setFont(ApplicationContext.labelFont);
        selectThemeLabel.setText(ApplicationContext.currentBundle.getString("Preferences.themes.selectThemeLabel.text")); // NOI18N

        javax.swing.GroupLayout themesPanelLayout = new javax.swing.GroupLayout(themesPanel);
        themesPanel.setLayout(themesPanelLayout);
        themesPanelLayout.setHorizontalGroup(
            themesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(themesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectThemeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(themesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(themeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveThemeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        themesPanelLayout.setVerticalGroup(
            themesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(themesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(themesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(themeCombo)
                    .addComponent(selectThemeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(saveThemeBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout preferencesPanelLayout = new javax.swing.GroupLayout(preferencesPanel);
        preferencesPanel.setLayout(preferencesPanelLayout);
        preferencesPanelLayout.setHorizontalGroup(
            preferencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(languagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(themesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        preferencesPanelLayout.setVerticalGroup(
            preferencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preferencesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preferencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(themesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(languagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(ApplicationContext.currentBundle.getString("Preferences.preferences.text"), preferencesPanel); // NOI18N

        addPreset.setText(ApplicationContext.currentBundle.getString("Preferences.presets.addButton.text")); // NOI18N
        addPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPresetActionPerformed(evt);
            }
        });

        deletePreset.setText(ApplicationContext.currentBundle.getString("Preferences.presets.deleteButton.text")); // NOI18N
        deletePreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePresetActionPerformed(evt);
            }
        });

        presetListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(presetListTable);

        presetModalityLabel.setFont(ApplicationContext.labelFont);
        presetModalityLabel.setText(ApplicationContext.currentBundle.getString("Preferences.presets.modalityLabel.text")); // NOI18N

        modalityCombo.setFont(ApplicationContext.textFont);
        modalityCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        modalityCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modalityComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout presetsPanelLayout = new javax.swing.GroupLayout(presetsPanel);
        presetsPanel.setLayout(presetsPanelLayout);
        presetsPanelLayout.setHorizontalGroup(
            presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(presetsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(presetsPanelLayout.createSequentialGroup()
                        .addComponent(addPreset, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deletePreset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(presetModalityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modalityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE))
                .addContainerGap())
        );
        presetsPanelLayout.setVerticalGroup(
            presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(presetsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPreset)
                    .addComponent(deletePreset)
                    .addComponent(modalityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presetModalityLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(ApplicationContext.currentBundle.getString("Preferences.presets.text"), presetsPanel); // NOI18N

        loopbackChk.setFont(ApplicationContext.labelFont);
        loopbackChk.setSelected(ApplicationContext.databaseRef.getLoopbackStatus());
        loopbackChk.setText(ApplicationContext.currentBundle.getString("Preferences.miscellaneous.loopbackChk.text")); // NOI18N
        loopbackChk.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loopbackChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopbackChkActionPerformed(evt);
            }
        });

        retrieveTypeLabel.setFont(ApplicationContext.labelFont);
        retrieveTypeLabel.setText(ApplicationContext.currentBundle.getString("Preferences.miscellaneous.reteriveTypeLabel.text")); // NOI18N

        retrieveTypeGroup.add(cMoveRadioBtn);
        cMoveRadioBtn.setFont(ApplicationContext.textFont);
        cMoveRadioBtn.setText("C-MOVE");

        retrieveTypeGroup.add(cGetRadioBtn);
        cGetRadioBtn.setFont(ApplicationContext.textFont);
        cGetRadioBtn.setText("C-GET");

        retrieveTypeGroup.add(wadoRadioBtn);
        wadoRadioBtn.setFont(ApplicationContext.textFont);
        wadoRadioBtn.setText("WADO");

        dynamicJNLPRetrieveTypeChk.setFont(ApplicationContext.labelFont);
        dynamicJNLPRetrieveTypeChk.setText(ApplicationContext.currentBundle.getString("Prferences.miscellaneous.overrideRetrieveTypeChk")); // NOI18N

        javax.swing.GroupLayout miscellaneousPanelLayout = new javax.swing.GroupLayout(miscellaneousPanel);
        miscellaneousPanel.setLayout(miscellaneousPanelLayout);
        miscellaneousPanelLayout.setHorizontalGroup(
            miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loopbackChk)
                    .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(retrieveTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cMoveRadioBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cGetRadioBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wadoRadioBtn))
                    .addComponent(dynamicJNLPRetrieveTypeChk, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        miscellaneousPanelLayout.setVerticalGroup(
            miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(loopbackChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retrieveTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cMoveRadioBtn)
                    .addComponent(cGetRadioBtn)
                    .addComponent(wadoRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dynamicJNLPRetrieveTypeChk)
                .addContainerGap(376, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(ApplicationContext.currentBundle.getString("Preferences.miscellaneous.text"), miscellaneousPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loopbackChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopbackChkActionPerformed
        ApplicationContext.databaseRef.updateLoopBack(loopbackChk.isSelected());
    }//GEN-LAST:event_loopbackChkActionPerformed

    private void modalityComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modalityComboActionPerformed
        setPresetTableModel();
    }//GEN-LAST:event_modalityComboActionPerformed

    private void deletePresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePresetActionPerformed
        deletePreset();
    }//GEN-LAST:event_deletePresetActionPerformed

    private void addPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPresetActionPerformed
        PresetModel presetModel = new PresetModel((String) modalityCombo.getSelectedItem(), "PRESET NAME", "0", "0");
        if (presetModel.getModality() != null) {
            ApplicationContext.databaseRef.insertPreset(presetModel, presetModel.getModality());
            setPresetTableModel();
        } else {
            JOptionPane.showMessageDialog(this, "Please configure a modality", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addPresetActionPerformed

    private void saveThemeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveThemeBtnActionPerformed
        String selection = (String) themeCombo.getSelectedItem();
        if (!selection.equals(System.getProperty("os.name"))) {
            ApplicationContext.databaseRef.updateTheme(selection);
        } else {
            ApplicationContext.databaseRef.updateTheme("System");
        }
        ApplicationContext.activeTheme = selection;
        ApplicationContext.mainScreenObj.setTheme();
    }//GEN-LAST:event_saveThemeBtnActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteButton();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        buttonSettings = new QueryButtonSettings(this, true);
        buttonSettings.setTitle("Add Button");
        buttonSettings.setLocationRelativeTo(this);
        buttonSettings.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void verifyServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyServerBtnActionPerformed
        if (serverListTable.getSelectedRow() != -1) {
            DcmURL url = ApplicationContext.communicationDelegate.constructURL((String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 1), (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 2), Integer.parseInt((String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 3)));
            boolean result = ApplicationContext.communicationDelegate.verifyServer(url);
            if (result) {
                JOptionPane.showMessageDialog(rootPane, "Echo dicom://" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 1) + "@" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 2) + ":" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 3) + " successfully!", "Echo Result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Echo dicom://" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 1) + "@" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 2) + ":" + (String) serverListTable.getValueAt(serverListTable.getSelectedRow(), 3) + " not successfully!", "Echo Result", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a server to verify!", "Cannot Verify Server", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_verifyServerBtnActionPerformed

    private void deleteServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteServerBtnActionPerformed
        deleteServer();
    }//GEN-LAST:event_deleteServerBtnActionPerformed

    private void addServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addServerBtnActionPerformed
        ServerModel serverModel = new ServerModel("Description", "AETITLE", "localhost", 104, "C-MOVE", "wado", 8080, "http", "");
        if (!ApplicationContext.databaseRef.checkRecordExists("servers", "logicalname", "Description")) {
            ApplicationContext.databaseRef.insertServer(serverModel);
            setServerListTableModel();
        } else {
            JOptionPane.showMessageDialog(this, "Server '" + serverModel.getDescription() + "' " + " already exist", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addServerBtnActionPerformed

    private void saveListenerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveListenerBtnActionPerformed
        ApplicationContext.databaseRef.updateListener(listenerAetTxt.getText(), listenerPortTxt.getText());
        ApplicationContext.listenerDetails = ApplicationContext.databaseRef.getListenerDetails();
        JOptionPane.showMessageDialog(this, "Lisetner Details updated", "Modify Listener", JOptionPane.INFORMATION_MESSAGE);
        ApplicationContext.mainScreenObj.stopReceiver();
        ApplicationContext.mainScreenObj.startListening();
    }//GEN-LAST:event_saveListenerBtnActionPerformed

    private void updateLanguageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateLanguageButtonActionPerformed
        ApplicationContext.databaseRef.updateDefaultLocale(localeTextField.getText());
        String[] appLocale = ApplicationContext.databaseRef.getActiveLanguage();
        ApplicationContext.currentLocale = new Locale(appLocale[2], appLocale[0]);
        ApplicationContext.currentBundle = ResourceBundle.getBundle("in/raster/mayam/form/i18n/Bundle", ApplicationContext.currentLocale);
        ApplicationContext.mainScreenObj.applyLocaleChange();
    }//GEN-LAST:event_updateLanguageButtonActionPerformed

    private void countryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboActionPerformed
        setLanguageInfo();
    }//GEN-LAST:event_countryComboActionPerformed

    private void languageComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_languageComboItemStateChanged
        setLocaleInfo();
    }//GEN-LAST:event_languageComboItemStateChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        modalityPanel.removeAll();
        loadModalitiesConfig();
    }//GEN-LAST:event_formComponentResized

    private void serverListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverListTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && serverListTable.getSelectedColumn() < 4) {
            int row = 0, col = 0;
            if (serverListTable.isEditing()) {
                row = serverListTable.getEditingRow();
                col = serverListTable.getEditingColumn();
                serverListTable.getCellEditor().stopCellEditing();
            } else {
                row = serverListTable.getSelectedRow();
                col = serverListTable.getSelectedColumn();
            }
            serverListTable.editCellAt(row, col);
            serverListTable.changeSelection(row, col, false, false);
            serverListTable.invalidate();
        }
    }//GEN-LAST:event_serverListTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addPreset;
    private javax.swing.JButton addServerBtn;
    private javax.swing.JTable buttonListTable;
    private javax.swing.JRadioButton cGetRadioBtn;
    private javax.swing.JRadioButton cMoveRadioBtn;
    private javax.swing.JComboBox countryCombo;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deletePreset;
    private javax.swing.JButton deleteServerBtn;
    private javax.swing.JCheckBox dynamicJNLPRetrieveTypeChk;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox languageCombo;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JPanel languagePanel;
    private javax.swing.JLabel listenerAetLabel;
    private javax.swing.JTextField listenerAetTxt;
    private javax.swing.JPanel listenerPanel;
    private javax.swing.JLabel listenerPortLabel;
    private javax.swing.JTextField listenerPortTxt;
    private javax.swing.JLabel localeIdLabel;
    private javax.swing.JTextField localeTextField;
    private javax.swing.JCheckBox loopbackChk;
    private javax.swing.JPanel miscellaneousPanel;
    private javax.swing.JComboBox modalityCombo;
    private javax.swing.JPanel modalityPanel;
    private javax.swing.JPanel preferencesPanel;
    private javax.swing.JTable presetListTable;
    private javax.swing.JLabel presetModalityLabel;
    private javax.swing.JPanel presetsPanel;
    private javax.swing.JPanel queryButtonsPanel;
    private javax.swing.JPanel queryParametersPanel;
    private javax.swing.ButtonGroup retrieveTypeGroup;
    private javax.swing.JLabel retrieveTypeLabel;
    private javax.swing.JButton saveListenerBtn;
    private javax.swing.JButton saveThemeBtn;
    private javax.swing.JLabel selectThemeLabel;
    private javax.swing.JTable serverListTable;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JPanel serversPanel;
    private javax.swing.JComboBox themeCombo;
    private javax.swing.JPanel themesPanel;
    private javax.swing.JButton updateLanguageButton;
    private javax.swing.JButton verifyServerBtn;
    private javax.swing.JRadioButton wadoRadioBtn;
    // End of variables declaration//GEN-END:variables

    public static SettingsForm getSettingsObject() {
        return ApplicationContext.mainScreenObj.settingsForm;
    }

    public void setServerListTableModel() {
        ServerTableModel model = new ServerTableModel();
        model.setData(ApplicationContext.databaseRef.getServerList());
        serverListTable.setModel(model);
        setServerRetrieveComboEditor();
        setServerListTableRenderer();
        serverListTable.getColumnModel().getColumn(0).setMinWidth(110);
        serverListTable.getColumnModel().getColumn(1).setMinWidth(110);
        serverListTable.getColumnModel().getColumn(2).setMinWidth(110);
    }

    public void setButtonListTableModel(ArrayList<ButtonsModel> buttonModel) {
        ButtonTableModel model = new ButtonTableModel();
        model.setData(buttonModel);
        buttonListTable.setModel(model);
    }

    private void loadThemeCombo() {
        ThemeComboModel themeComboModel = new ThemeComboModel(ApplicationContext.databaseRef.getThemes());
        themeCombo.setModel(themeComboModel);
        if (!ApplicationContext.activeTheme.equals("System")) {
            themeCombo.setSelectedItem(ApplicationContext.activeTheme);
        } else {
            themeCombo.setSelectedItem(System.getProperty("os.name"));
        }
    }

    private void loadModalitiesCombo() {
        ArrayList<String> activeModalities = ApplicationContext.databaseRef.getActiveModalities();
        modalityCombo.setModel(new ModalityComboModel(activeModalities));
        if (activeModalities.size() > 0) {
            modalityCombo.setSelectedIndex(0);
            setPresetTableModel();
        }
    }

    private void setPresetTableModel() {
        PresetTableModel presetTableModel = new PresetTableModel();
        presetTableModel.setData(ApplicationContext.databaseRef.getPresetsForModality((String) modalityCombo.getSelectedItem()));
        presetListTable.setModel(presetTableModel);
    }

    private void setServerRetrieveComboEditor() {
        String[] retrieveTypeArray = {"C-MOVE", "C-GET", "WADO"};
        JComboBox comboBox = new JComboBox(retrieveTypeArray);
        comboBox.setFont(ApplicationContext.textFont);
        comboBox.setMaximumRowCount(4);
        TableCellEditor editor = new DefaultCellEditor(comboBox);
        serverListTable.getColumnModel().getColumn(4).setCellEditor(editor);
    }

    private void deleteServer() {
        if (serverListTable.getSelectedRow() != -1) {
            String serverName = serverListTable.getValueAt(serverListTable.getSelectedRow(), 0).toString();
            int isDelete = JOptionPane.showConfirmDialog(rootPane, "Are you sure want to delete server " + serverName + "?", "Delete Server", JOptionPane.YES_NO_OPTION);
            if (isDelete == 0) {
                ApplicationContext.databaseRef.deleteServer(((ServerTableModel) serverListTable.getModel()).getRow(serverListTable.getSelectedRow()));
                setServerListTableModel();
                ApplicationContext.mainScreenObj.removeTab(serverName);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a server to delete!", "Cannot Delete Server", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteButton() {
        if (buttonListTable.getSelectedRow() != -1) {
            String buttonName = buttonListTable.getValueAt(buttonListTable.getSelectedRow(), 0).toString();
            int isDelete = JOptionPane.showConfirmDialog(rootPane, "Are you sure want to delete button " + buttonName + "?", "Delete Button", JOptionPane.YES_NO_OPTION);
            if (isDelete == 0) {
                ApplicationContext.databaseRef.deleteButton(buttonName);
                setButtonListTableModel(ApplicationContext.databaseRef.getAllQueryButtons());
            }
            ApplicationContext.mainScreenObj.createButtonsDelegate.loadButtons();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid button to delete!", "Cannot Delete Button", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deletePreset() {
        if (presetListTable.getSelectedRow() != -1) {
            String presetName = (String) presetListTable.getValueAt(presetListTable.getSelectedRow(), 0);
            int isDelete = JOptionPane.showConfirmDialog(this, "Are you sure want to delete preset " + presetName + "?", "Delete Button", JOptionPane.YES_NO_OPTION);
            if (isDelete == 0) {
                ApplicationContext.databaseRef.deletePreset(((PresetTableModel) presetListTable.getModel()).getRow(presetListTable.getSelectedRow()));
                setPresetTableModel();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid preset to delete!", "Cannot Delete Preset", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addKeyListener() {
        serverListTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                    deleteServer();
                }
            }
        });

        buttonListTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                    deleteButton();
                }
            }
        });

        presetListTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                    deletePreset();
                }
            }
        });
    }

    private void setServerListTableRenderer() {
        serverListTable.setDefaultRenderer(Object.class, new CellRenderer());
        serverListTable.getTableHeader().setPreferredSize(new Dimension(this.getWidth(), 25));
        serverListTable.getTableHeader().setFont(ApplicationContext.labelFont);
        serverListTable.setRowHeight(25);
        serverListTable.getTableHeader().setForeground(new Color(255, 138, 0));
        serverListTable.getTableHeader().setBackground(new Color(0, 0, 0));
        serverListTable.getColumnModel().getColumn(5).setCellRenderer(new CheckBoxRenderer());

        for (int i = 0; i < serverListTable.getColumnCount() - 2; i++) {
            TableColumn tc = serverListTable.getColumnModel().getColumn(i);
            tc.setCellEditor(new ServerTableCellEditor(new JTextField()));
        }
    }

    private void setRenderer() {
        buttonListTable.setDefaultRenderer(Object.class, new CellRenderer());
        buttonListTable.getTableHeader().setPreferredSize(new Dimension(this.getWidth(), 25));
        buttonListTable.getTableHeader().setFont(ApplicationContext.labelFont);
        buttonListTable.setRowHeight(25);
        buttonListTable.getTableHeader().setForeground(new Color(255, 138, 0));
        buttonListTable.getTableHeader().setBackground(new Color(0, 0, 0));

        presetListTable.setDefaultRenderer(Object.class, new CellRenderer());
        presetListTable.getTableHeader().setPreferredSize(new Dimension(this.getWidth(), 25));
        presetListTable.getTableHeader().setFont(ApplicationContext.labelFont);
        presetListTable.setRowHeight(25);
        presetListTable.getTableHeader().setForeground(new Color(255, 138, 0));
        presetListTable.getTableHeader().setBackground(new Color(0, 0, 0));

        for (int i = 0; i < presetListTable.getColumnCount(); i++) {
            TableColumn tc = presetListTable.getColumnModel().getColumn(i);
            tc.setCellEditor(new ServerTableCellEditor(new JTextField()));
        }
    }

    private void addButtonListTableListener() {
        buttonListTable.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent me) {
                int row = buttonListTable.rowAtPoint(me.getPoint());
                if (row > -1) {
                    buttonListTable.clearSelection();
                    buttonListTable.setRowSelectionInterval(row, row);
                }
                popup.show(buttonListTable, me.getX() + 10, me.getY() + 10);
            }
        });

        buttonListTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                int row = buttonListTable.rowAtPoint(me.getPoint());
                if (row > -1) {
                    moveLabel.setText(ApplicationContext.currentBundle.getString("Preferences.queryParameters.replaceLabel.text") + " " + buttonListTable.getValueAt(row, 0));
                    buttonToMove = (String) buttonListTable.getValueAt(row, 0);
                }
            }

            @Override
            public void mouseReleased(MouseEvent me) {
                popup.setVisible(false);
                String buttonToReplace = (String) buttonListTable.getValueAt(buttonListTable.getSelectedRow(), 0);
                ApplicationContext.databaseRef.reArrangeButtons(buttonToMove, buttonToReplace);
                setButtonListTableModel(ApplicationContext.databaseRef.getAllQueryButtons());
                ApplicationContext.mainScreenObj.createButtonsDelegate.loadButtons();
            }

            @Override
            public void mouseClicked(MouseEvent me) {
                int row = buttonListTable.rowAtPoint(me.getPoint());
                if (row > -1) {
                    buttonListTable.clearSelection();
                    buttonListTable.setRowSelectionInterval(row, row);
                }
            }
        });
    }

    //Positions all modalities for modlity configuration
    private void loadModalitiesConfig() {
        Vector<String> modalities = ApplicationContext.databaseRef.getAllModalities();
        ItemListener modalityChkListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                JCheckBox chk = (JCheckBox) e.getSource();
                ApplicationContext.databaseRef.updateModalitiesStatus(chk.getText(), chk.isSelected());
            }
        };
        int xPos = 1, ypos = 25, maxWidth = modalityPanel.getWidth() - 50;
        for (int i = 0; i < modalities.size(); i++) {
            final JCheckBox chk = new JCheckBox(modalities.get(i));
            chk.setFont(ApplicationContext.textFont);
            chk.setBounds(xPos, ypos, 60, 40);
            modalityPanel.add(chk);
            chk.setSelected(ApplicationContext.databaseRef.isModalityActive(modalities.get(i)));
            chk.addItemListener(modalityChkListener);
            if (xPos + 63 < maxWidth) {
                xPos += 62;
            } else {
                xPos = 1;
                ypos += 42;
            }
        }
    }

    private void addServerListTableKeyListener() {

        Action serverTableTabNavigation = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processActionEvent(serverListTable, true);
            }
        };

        Action serverTableReverseNAvigation = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processActionEvent(serverListTable, false);
            }
        };

        Action presetTableTabNavigation = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processActionEvent(presetListTable, true);
            }
        };

        Action presetTableReverseNavigation = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processActionEvent(presetListTable, false);
            }
        };

        serverListTable.putClientProperty("autoStartsEdit", Boolean.TRUE);
        serverListTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        serverListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "navigate");
        serverListTable.getActionMap().put("navigate", serverTableTabNavigation);
        serverListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "navigate");
        serverListTable.getActionMap().put("navigate", serverTableTabNavigation);
        serverListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("shift TAB"), "reversenavigate");
        serverListTable.getActionMap().put("reversenavigate", serverTableReverseNAvigation);
        serverListTable.setSurrendersFocusOnKeystroke(true);

        presetListTable.putClientProperty("autoStartsEdit", Boolean.TRUE);
        presetListTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        presetListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "navigate");
        presetListTable.getActionMap().put("navigate", presetTableTabNavigation);
        presetListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "navigate");
        presetListTable.getActionMap().put("navigate", presetTableTabNavigation);
        presetListTable.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("shift TAB"), "reversenavigate");
        presetListTable.getActionMap().put("reversenavigate", presetTableReverseNavigation);
        presetListTable.setSurrendersFocusOnKeystroke(true);
    }

    private void processActionEvent(JTable table, boolean isForward) {
        int row = 0, col = 0;
        if (table.isEditing()) {
            row = table.getEditingRow();
            col = table.getEditingColumn();
            table.getCellEditor().stopCellEditing();
        } else {
            row = table.getSelectedRow();
            col = table.getSelectedColumn();
        }
        if (isForward) {
            col++;
        } else {
            col--;
        }
        table.editCellAt(row, col);
        table.changeSelection(row, col, false, false);
        table.invalidate();
    }

    private void setLanguageInfo() {
        languageComboModel = new LanguageComboModel(ApplicationContext.databaseRef.getLanguagesOfCountry((String) countryCombo.getSelectedItem()));
        languageCombo.setModel(languageComboModel);
        languageCombo.setSelectedIndex(0);
    }

    private void setLocaleInfo() {
        localeTextField.setText(ApplicationContext.databaseRef.getLocaleIDForCountryAndLanguage((String) countryCombo.getSelectedItem(), (String) languageCombo.getSelectedItem())[0]);
    }

    public void applyLocaleChange() {
        Border loweredetched = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        Font titleFont = new Font("Lucida Grande", Font.BOLD, 15);
        setTitle(ApplicationContext.currentBundle.getString("MainScreen.settingsMenuItem.text"));
        jTabbedPane1.setTitleAt(0, ApplicationContext.currentBundle.getString("Preferences.servers.text"));
        jTabbedPane1.setTitleAt(1, ApplicationContext.currentBundle.getString("Preferences.queryPanel.text"));
        jTabbedPane1.setTitleAt(2, ApplicationContext.currentBundle.getString("Preferences.preferences.text"));
        jTabbedPane1.setTitleAt(3, ApplicationContext.currentBundle.getString("Preferences.presets.text"));
        jTabbedPane1.setTitleAt(4, ApplicationContext.currentBundle.getString("Preferences.miscellaneous.text"));
        listenerPanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.listener.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        listenerAetLabel.setText(ApplicationContext.currentBundle.getString("Preferences.listener.aeTitleLabel.text"));
        listenerPortLabel.setText(ApplicationContext.currentBundle.getString("Preferences.listener.portLabel.text"));
        saveListenerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.listener.saveButton.text"));
        serversPanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.serversPanel.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        addServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.addButton.text"));
        deleteServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.deleteButton.text"));
        verifyServerBtn.setText(ApplicationContext.currentBundle.getString("Preferences.servers.verifyButton.text"));
        modalityPanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.modalities.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        queryButtonsPanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.queryParameters.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        addButton.setText(ApplicationContext.currentBundle.getString("Preferences.queryParameters.addButton.text"));
        deleteButton.setText(ApplicationContext.currentBundle.getString("Preferences.queryParameters.deleteButton.text"));
        themesPanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.themes.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        selectThemeLabel.setText(ApplicationContext.currentBundle.getString("Preferences.themes.selectThemeLabel.text"));
        saveThemeBtn.setText(ApplicationContext.currentBundle.getString("Preferences.themes.saveButton.text"));
        addPreset.setText(ApplicationContext.currentBundle.getString("Preferences.presets.addButton.text"));
        deletePreset.setText(ApplicationContext.currentBundle.getString("Preferences.presets.deleteButton.text"));
        presetModalityLabel.setText(ApplicationContext.currentBundle.getString("Preferences.presets.modalityLabel.text"));
        languagePanel.setBorder(BorderFactory.createTitledBorder(loweredetched, ApplicationContext.currentBundle.getString("Preferences.language.text"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, titleFont));
        countryLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.countryLabel.text"));
        languageLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.languageLabel.text"));
        localeIdLabel.setText(ApplicationContext.currentBundle.getString("Preferences.language.localidLabel.text"));
        updateLanguageButton.setText(ApplicationContext.currentBundle.getString("Preferences.language.okButton.text"));
        loopbackChk.setText(ApplicationContext.currentBundle.getString("Preferences.miscellaneous.loopbackChk.text"));
        retrieveTypeLabel.setText(ApplicationContext.currentBundle.getString("Preferences.miscellaneous.reteriveTypeLabel.text"));
        dynamicJNLPRetrieveTypeChk.setText(ApplicationContext.currentBundle.getString("Prferences.miscellaneous.overrideRetrieveTypeChk"));
        setLocaleForTableHeader();
    }

    private void setLocaleForTableHeader() {
        JTableHeader tableHeader = serverListTable.getTableHeader();
        TableColumnModel columnModel = tableHeader.getColumnModel();
        if (columnModel.getColumnCount() > 0) {
            TableColumn nameColumn = columnModel.getColumn(0);
            nameColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.serverNameColumn.text"));
            TableColumn aetColumn = columnModel.getColumn(1);
            aetColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.aeTitleColumn.text"));
            TableColumn hostColumn = columnModel.getColumn(2);
            hostColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.hostnameColumn.text"));
            TableColumn portColumn = columnModel.getColumn(3);
            portColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.portColumn.text"));
            TableColumn retrieveColumn = columnModel.getColumn(4);
            retrieveColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.retrieveColumn.text"));
            TableColumn previewColumn = columnModel.getColumn(5);
            previewColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.servers.previewsColumn.text"));
            tableHeader.validate();
            tableHeader.repaint();
        }
        JTableHeader tableHeader1 = buttonListTable.getTableHeader();
        TableColumnModel columnModel1 = tableHeader1.getColumnModel();
        if (columnModel1.getColumnCount() > 0) {
            TableColumn nameColumn = columnModel1.getColumn(0);
            nameColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.queryParameters.buttonNameColumn.text"));
            TableColumn modalityColumn = columnModel1.getColumn(1);
            modalityColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.queryParameters.modalityColumn.text"));
            TableColumn studyDateColumn = columnModel1.getColumn(2);
            studyDateColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.queryParameters.studyDateColumn.text"));
            TableColumn studyTimeColumn = columnModel1.getColumn(3);
            studyTimeColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.queryParameters.studyTimeColumn.text"));
            tableHeader1.validate();
            tableHeader1.repaint();
        }
        JTableHeader tableHeader2 = presetListTable.getTableHeader();
        TableColumnModel columnModel2 = tableHeader2.getColumnModel();
        if (columnModel2.getColumnCount() > 0) {
            TableColumn nameColumn = columnModel2.getColumn(0);
            nameColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.presets.presetNameColumn.text"));
            TableColumn windowLevelColumn = columnModel2.getColumn(1);
            windowLevelColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.presets.windowLevelColumn.text"));
            TableColumn windowWidthColumn = columnModel2.getColumn(2);
            windowWidthColumn.setHeaderValue(ApplicationContext.currentBundle.getString("Preferences.presets.windowWidthColumn.text"));
            tableHeader2.validate();
            tableHeader2.repaint();
        }
    }

    private void setRetrieveTypeCombo() {
        String retrieveType = ApplicationContext.databaseRef.getJNLPRetrieveType();
        if (retrieveType.equals("C-GET")) {
            cGetRadioBtn.setSelected(true);
        } else if (retrieveType.equals("C-MOVE")) {
            cMoveRadioBtn.setSelected(true);
        } else {
            wadoRadioBtn.setSelected(true);
        }

        ItemListener itemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                ApplicationContext.databaseRef.updateJNLPRetrieveType(((JRadioButton) e.getItem()).getText());
            }
        };

        cGetRadioBtn.addItemListener(itemListener);
        cMoveRadioBtn.addItemListener(itemListener);
        wadoRadioBtn.addItemListener(itemListener);

        dynamicJNLPRetrieveTypeChk.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                ApplicationContext.databaseRef.updateDynamicRetrieveTypeStatus(dynamicJNLPRetrieveTypeChk.isSelected());
            }
        });
        dynamicJNLPRetrieveTypeChk.setSelected(ApplicationContext.databaseRef.getDynamicRetrieveTypeStatus());
    }
}
