/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Devishree
 * @version 2.0
 */
public class ImagePreviewPanel extends javax.swing.JPanel {

    public JPanel parent = new JPanel();
    String[] labelInfo;
    String studyInstanceUid = "";
    JLabel[] infoLabels = null;

    /**
     * Creates new form ImagePreviewPanel
     */
    public ImagePreviewPanel() {
        initComponents();
        container.setLayout(new GridLayout(1, 1));
        parent.setLayout(null);
        infoPanel.setLayout(new GridLayout(4, 1, 5, 5));
        infoLabels = new JLabel[4];
        infoLabels[0] = new JLabel("");
        infoLabels[0].setFont(ApplicationContext.textFont);
        infoLabels[1] = new JLabel("");
        infoLabels[1].setFont(ApplicationContext.textFont);
        Font font = new Font("Lucida Grande", Font.PLAIN, 12);
        infoLabels[2] = new JLabel("");
        infoLabels[2].setFont(font);
        infoLabels[3] = new JLabel("");
        infoLabels[3].setFont(font);
        infoPanel.add(infoLabels[0]);
        infoPanel.add(infoLabels[1]);
        infoPanel.add(infoLabels[2]);
        infoPanel.add(infoLabels[3]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seriesScrollPane = new javax.swing.JScrollPane();
        container = new javax.swing.JPanel();
        infoPanel = new javax.swing.JPanel();

        seriesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        seriesScrollPane.getVerticalScrollBar().setUnitIncrement(20);

        container.setBorder(null);

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        seriesScrollPane.setViewportView(container);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(seriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JScrollPane seriesScrollPane;
    // End of variables declaration//GEN-END:variables

    public void paint(int size) {
        parent.setBounds(0, 0, 240, size);
        container.add(parent);
        container.setPreferredSize(new Dimension(230, size));
        container.revalidate();
        container.repaint();
        seriesScrollPane.repaint();
        seriesScrollPane.validate();
    }

    public void addViewerPanel(int pos, int size, ViewerPreviewPanel viewerPreviewPanel, int totalSize) {
        container.remove(parent);
        container.revalidate();
        container.repaint();
        viewerPreviewPanel.setBounds(0, pos, 240, size);
        parent.add(viewerPreviewPanel);
        parent.setBounds(0, 0, 240, totalSize);
        parent.revalidate();
        parent.repaint();
        container.add(parent);
        container.setPreferredSize(new Dimension(230, totalSize));
        container.revalidate();
        container.repaint();
    }

    public void addPreviewPanel(int pos, int size, PreviewPanel previewPanel, int totalSize) {
        previewPanel.setBounds(0, pos, 230, size);
        parent.add(previewPanel);
        parent.setBounds(0, 0, 230, totalSize);
        parent.revalidate();
        parent.repaint();
        container.add(parent);
        container.setPreferredSize(new Dimension(230, totalSize));
        container.revalidate();
        container.repaint();
    }

    public void setPatientInfo(String[] labelsInfo) {
        this.labelInfo = labelsInfo;
        infoLabels[0].setText(labelInfo[0]);
        infoLabels[1].setText(labelInfo[1]);
        infoLabels[2].setText(labelInfo[2]);
        infoLabels[3].setText("<html><body>" + labelInfo[3] + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + labelInfo[4] + "</body></html>");
    }

    public void clearPatientInfo() {
        infoLabels[0].setText("");
        infoLabels[1].setText("");
        infoLabels[2].setText("");
        infoLabels[3].setText("");
    }

    public void resetPreviewPanel() {
        container.remove(parent);
        parent.removeAll();
        parent.setBounds(0, 0, 230, 200);
        container.setPreferredSize(new Dimension(230, 200));
        parent.revalidate();
        parent.repaint();
        container.add(parent);
        container.revalidate();
        container.repaint();
        seriesScrollPane.repaint();
        seriesScrollPane.validate();
    }

    public void resetImagePreviewPanel() {
        clearPatientInfo();
        container.remove(parent);
        parent.removeAll();
        parent.setBounds(0, 0, 230, 200);
        container.setPreferredSize(new Dimension(230, 200));
        parent.revalidate();
        parent.repaint();
        container.add(parent);
        container.revalidate();
        container.repaint();
        seriesScrollPane.repaint();
        seriesScrollPane.validate();
    }

    public String[] getLabelInfo() {
        return labelInfo;
    }

    public String getPatientId() {
        if (labelInfo != null) {
            return labelInfo[1];
        } else {
            return "";
        }
    }

    public String getPreviousStudyUid() {
        return studyInstanceUid;
    }

    public void setPreviousStudyUid(String studyUid) {
        studyInstanceUid = studyUid;
    }

    public void displayPreiew(String seriesInstanceUID) {
        for (int i = 0; i < parent.getComponentCount(); i++) {
            if (((ViewerPreviewPanel) parent.getComponent(i)).getSeriesInstanceUid().equals(seriesInstanceUID)) {
                ((ViewerPreviewPanel) parent.getComponent(i)).loadThumbnails();
//                return;
            }
        }
    }

    public void displayAllPreviews() {
        for (int i = 0; i < parent.getComponentCount(); i++) {
            ((ViewerPreviewPanel) parent.getComponent(i)).loadThumbnails();
        }
    }

    public void displayVideoPreviews() {
        for (int i = 0; i < parent.getComponentCount(); i++) {
            ((ViewerPreviewPanel) parent.getComponent(i)).convertVideo();
//            ((ViewerPreviewPanel) parent.getComponent(i)).loadMultiframes();
        }
    }

    public String getPatientName() {
        return labelInfo[0];
    }

    public void setVideoIdentification(String videoIuid) {
        for (Object previewPanel : parent.getComponents()) {
            ((ViewerPreviewPanel) previewPanel).clearSelectedInstances();
        }
        for (Component previewPanel : parent.getComponents()) {
            ViewerPreviewPanel viewerPreviewPanel = (ViewerPreviewPanel) previewPanel;
            if (viewerPreviewPanel.getSopUid() != null && viewerPreviewPanel.getSopUid().equals(videoIuid)) {
                viewerPreviewPanel.setSelectedInstance(0);
                break;
            }
        }
    }

    public void setSeriesIdentification(JPanel container) {
        for (int i = 0; i < parent.getComponentCount(); i++) {
            ViewerPreviewPanel preview = ((ViewerPreviewPanel) parent.getComponent(i));
            preview.clearSelectedInstances();
            for (int k = 0; k < container.getComponentCount(); k++) {
                JPanel seriesLevelPanel = (JPanel) container.getComponent(k);
                for (int j = 0; j < seriesLevelPanel.getComponentCount(); j++) {
                    if (seriesLevelPanel.getComponent(j) instanceof LayeredCanvas) {
                        LayeredCanvas canvas = (LayeredCanvas) seriesLevelPanel.getComponent(j);
                        if (preview.getSopUid() == null && !canvas.imgpanel.isMultiFrame()) {
                            if (canvas.imgpanel.getSeriesUID().equals(preview.getSeriesInstanceUid())) {
                                preview.setSelectedInstance(canvas.imgpanel.getCurrentInstanceNo());
                            }
                        } else if (preview.getSopUid() != null && preview.getSopUid().equals(canvas.imgpanel.getInstanceUID())) {
                            preview.setSelectedInstance(0);
                        }
                    }
                }
            }
        }
    }
}
