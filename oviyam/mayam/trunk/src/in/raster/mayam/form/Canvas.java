/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author  BabuHussain
 * @version 0.5
 *
 */
public class Canvas extends javax.swing.JPanel {

    /** Creates new form DateFormatPanel */
    public boolean startPan = false;
    public boolean focusGained = false;
    private boolean firstTime = true;
    private LayeredCanvas layeredCanvas;

    public Canvas(LayeredCanvas canvas) {
        initComponents();
        this.layeredCanvas = canvas;
        setNoSelectionColoring();
    }

    public Canvas() {
        initComponents();
    }

    Canvas(MainScreen ms) {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 436, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 322, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        setSelection();
        this.layeredCanvas.annotationPanel.mouseClicked(evt);
    }//GEN-LAST:event_formMouseClicked
    public boolean isFocusGained() {
        return focusGained;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (firstTime) {
            this.setSize(layeredCanvas.getSize().width, layeredCanvas.getSize().height);
            firstTime = false;
            centerImage();
            repaint();
        }
        if (this.focusGained) {
            g.setColor(Color.YELLOW);
        } else {
            g.setColor(Color.DARK_GRAY);
        }
        g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
        if (this.layeredCanvas.imgpanel != null) {
            if (this.layeredCanvas.imgpanel.getPixelSpacingY() != -1) {
                int viewScaleHeight = (int) ((int) (100 / this.layeredCanvas.imgpanel.getPixelSpacingY()) * this.layeredCanvas.imgpanel.getScaleFactor() * this.layeredCanvas.imgpanel.getCurrentScaleFactor());
                int y1 = (this.getHeight() - viewScaleHeight) / 2;
                int hx = 20;
                int y2 = y1 + viewScaleHeight;
                g.setColor(Color.YELLOW);
                g.drawLine(hx, y1, hx, y2);
                g.drawLine(hx, y1, hx + 12, y1);
                g.drawLine(hx, y2, hx + 12, y2);
                double viewScaleHeightUnit = (viewScaleHeight + 0.000f) / 10;              
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 1)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 1)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 2)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 2)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 3)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 3)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 4)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 4)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 5)), hx + 12, (int) (y1 + (viewScaleHeightUnit * 5)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 6)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 6)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 7)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 7)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 8)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 8)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 9)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 9)));
                int viewScaleWidth = (int) ((int) (100 / this.layeredCanvas.imgpanel.getPixelSpacingX()) * this.layeredCanvas.imgpanel.getScaleFactor() * this.layeredCanvas.imgpanel.getCurrentScaleFactor());
                int wx1 = (this.getWidth() - viewScaleWidth) / 2;
                int wy = this.getHeight() - 20;
                int wx2 = wx1 + viewScaleWidth;
                g.drawLine(wx1, wy, wx2, wy);
                g.drawLine(wx1, wy, wx1, wy - 12);
                g.drawLine(wx2, wy, wx2, wy - 12);
                double viewScaleWidthUnit = (viewScaleWidth + 0.000f) / 10;               
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 5)), wy, (int) (wx1 + (viewScaleWidthUnit * 5)), wy - 12);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 1)), wy, (int) (wx1 + (viewScaleWidthUnit * 1)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 2)), wy, (int) (wx1 + (viewScaleWidthUnit * 2)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 3)), wy, (int) (wx1 + (viewScaleWidthUnit * 3)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 4)), wy, (int) (wx1 + (viewScaleWidthUnit * 4)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 6)), wy, (int) (wx1 + (viewScaleWidthUnit * 6)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 7)), wy, (int) (wx1 + (viewScaleWidthUnit * 7)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 8)), wy, (int) (wx1 + (viewScaleWidthUnit * 8)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 9)), wy, (int) (wx1 + (viewScaleWidthUnit * 9)), wy - 6);
            }
        }
    }

    @Override
    protected void paintBorder(Graphics g) {
        super.paintBorder(g);

    }

    public void resizeHandler() {
        this.firstTime = true;
        repaint();
    }

    /**
     * This routine used to center the image.
     */
    private void centerImage() {
        int xPosition = (this.getSize().width - this.getComponent(0).getSize().width) / 2;
        int yPosition = (this.getSize().height - this.getComponent(0).getSize().height) / 2;
        this.getComponent(0).setBounds(xPosition, yPosition, this.getComponent(0).getSize().width, this.getComponent(0).getSize().height);
    }

    public LayeredCanvas getLayeredCanvas() {
        return layeredCanvas;
    }

    public void setLayeredCanvas(LayeredCanvas layeredCanvas) {
        this.layeredCanvas = layeredCanvas;
    }

    /**
     * This routine used to set the selection coloring.
     */
    public void setSelectionColoring() {
        focusGained = true;
        repaint();
    }

    /**
     * This routine used to remove the selection coloring.
     */
    public void setNoSelectionColoring() {
        focusGained = false;
        repaint();
    }

    public void setSelection() {
        if (ApplicationContext.layeredCanvas != null) {
            if (ApplicationContext.layeredCanvas.getCanvas() != null) {
                ApplicationContext.layeredCanvas.getCanvas().setNoSelectionColoring();
            } else {
                ApplicationContext.layeredCanvas.setNoSelectionColoring();
            }
        }
        ApplicationContext.imgPanel = (ImagePanel) this.getComponent(0);
        ApplicationContext.layeredCanvas = this.layeredCanvas;
        ApplicationContext.annotationPanel = this.layeredCanvas.annotationPanel;
        ApplicationContext.layeredCanvas.getCanvas().setSelectionColoring();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
