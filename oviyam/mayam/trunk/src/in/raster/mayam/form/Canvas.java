/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.delegates.ImageOrientation;
import in.raster.mayam.delegates.LocalizerDelegate;
import java.awt.*;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JPanel;

/**
 *
 * @author BabuHussain
 * @version 0.5
 *
 */
public class Canvas extends javax.swing.JPanel {

    /**
     * Creates new form DateFormatPanel
     */
    public boolean startPan = false;
    public boolean focusGained = false;
    private boolean firstTime = true;
    private LayeredCanvas layeredCanvas;
    private String columnRight = "";
    private String columnLeft = "";
    private String rowTop = "";
    private String rowDown = "";

    public Canvas(LayeredCanvas canvas) {
        initComponents();
        layeredCanvas = canvas;
        setNoSelectionColoring();
    }

    public Canvas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 436, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 322, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // setSelection(true);
        // layeredCanvas.annotationPanel.mouseClicked(evt);
    }//GEN-LAST:event_formMouseClicked
    public boolean isFocusGained() {
        return focusGained;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (firstTime) {
            setSize(layeredCanvas.getSize().width, layeredCanvas.getSize().height);
            firstTime = false;
            centerImage();
            repaint();
        }
        if (focusGained) {
            g.setColor(new Color(255, 138, 0));
        } else {
            g.setColor(Color.DARK_GRAY);
        }
        g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
        if (layeredCanvas.imgpanel != null) {
            if (layeredCanvas.imgpanel.getPixelSpacingY() != -1 && layeredCanvas.imgpanel.getPixelSpacingY() != 0) {
                int viewScaleHeight = (int) ((int) (100 / layeredCanvas.imgpanel.getPixelSpacingY()) * layeredCanvas.imgpanel.getScaleFactor());
                int y1 = (getHeight() - viewScaleHeight) / 2;
                int hx = 20;
                int y2 = y1 + viewScaleHeight;
                g.setColor(Color.YELLOW);
                g.drawLine(hx, y1, hx, y2);
                g.drawLine(hx, y1, hx + 12, y1);
                g.drawLine(hx, y2, hx + 12, y2);
                double viewScaleHeightUnit = (viewScaleHeight + 0.000f) / 10;
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 1)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 1)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 2)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 2)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 3)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 3)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 4)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 4)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 5)), hx + 12, (int) (y1 + (viewScaleHeightUnit * 5)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 6)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 6)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 7)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 7)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 8)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 8)));
                g.drawLine(hx, (int) (y1 + (viewScaleHeightUnit * 9)), hx + 6, (int) (y1 + (viewScaleHeightUnit * 9)));
                int viewScaleWidth = (int) ((int) (100 / layeredCanvas.imgpanel.getPixelSpacingX()) * layeredCanvas.imgpanel.getScaleFactor());
                int wx1 = (getWidth() - viewScaleWidth) / 2;
                int wy = getHeight() - 20;
                int wx2 = wx1 + viewScaleWidth;
                g.drawLine(wx1, wy, wx2, wy);
                g.drawLine(wx1, wy, wx1, wy - 12);
                g.drawLine(wx2, wy, wx2, wy - 12);
                double viewScaleWidthUnit = (viewScaleWidth + 0.000f) / 10;
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 5)), wy, (int) (wx1 + (viewScaleWidthUnit * 5)), wy - 12);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 1)), wy, (int) (wx1 + (viewScaleWidthUnit * 1)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 2)), wy, (int) (wx1 + (viewScaleWidthUnit * 2)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 3)), wy, (int) (wx1 + (viewScaleWidthUnit * 3)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 4)), wy, (int) (wx1 + (viewScaleWidthUnit * 4)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 6)), wy, (int) (wx1 + (viewScaleWidthUnit * 6)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 7)), wy, (int) (wx1 + (viewScaleWidthUnit * 7)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 8)), wy, (int) (wx1 + (viewScaleWidthUnit * 8)), wy - 6);
                g.drawLine((int) (wx1 + (viewScaleWidthUnit * 9)), wy, (int) (wx1 + (viewScaleWidthUnit * 9)), wy - 6);
            }
            Graphics2D g2d = (Graphics2D) g;
            JPanel panel = (JPanel) layeredCanvas.getParent();
            int gradientHeight = layeredCanvas.imgpanel.getWidth() / 2;
            int gradientWidth = Math.round((panel.getWidth() / ((JPanel) layeredCanvas.getParent()).getComponentCount()) * (3 / 100f));
            int fromRight = Math.round((panel.getWidth() / ((JPanel) layeredCanvas.getParent()).getComponentCount()) * (4 / 100f));
            GradientPaint gp1 = null;

            gp1 = new GradientPaint(getSize().width - fromRight, ((getSize().height / 2) - (gradientHeight / 2)), Color.WHITE, (getSize().width - fromRight) + gradientWidth, ((getSize().height / 2) - (gradientHeight / 2)) + gradientHeight, Color.BLACK);
            g2d.setPaint(gp1);
            if (layeredCanvas.imgpanel.isInvertFlag()) {
                gp1 = new GradientPaint(getSize().width - fromRight, ((getSize().height / 2) - (gradientHeight / 2)), Color.BLACK, (getSize().width - fromRight) + gradientWidth, ((getSize().height / 2) - (gradientHeight / 2)) + gradientHeight, Color.WHITE);
                g2d.setPaint(gp1);
            }

            g2d.fillRect(getSize().width - fromRight, ((getSize().height / 2) - (gradientHeight / 2)), gradientWidth, gradientHeight);
            g.setColor(Color.gray);
            g.drawRect(getSize().width - fromRight, ((getSize().height / 2) - (gradientHeight / 2)), gradientWidth, gradientHeight);
            FontMetrics font = g.getFontMetrics();
            g.setColor(Color.white);
            int wMin = layeredCanvas.imgpanel.getWindowLevel() - (layeredCanvas.imgpanel.getWindowWidth() / 2);
            int wMax = layeredCanvas.imgpanel.getWindowLevel() + (layeredCanvas.imgpanel.getWindowWidth() / 2);
            int windowCenter = layeredCanvas.imgpanel.getWindowLevel();
            if (layeredCanvas.imgpanel.getWindowLevel() == 0 && layeredCanvas.imgpanel.getWindowWidth() == 0) {
                wMin = 0;
                wMax = 255;
                windowCenter = 128;
            }
            int wlWdith = font.stringWidth(Integer.toString(windowCenter));
            int wMinWidth = font.stringWidth(Integer.toString(wMin));
            int wMaxWidth = font.stringWidth(Integer.toString(wMax));
            g.drawString(Integer.toString(wMax), getSize().width - fromRight - wMaxWidth - 2, ((getSize().height / 2) - (gradientHeight / 2)));
            g.drawString(Integer.toString(wMin), getSize().width - fromRight - wMinWidth - 2, ((getSize().height / 2) + (gradientHeight / 2)));
            g.drawString(Integer.toString(windowCenter), getSize().width - fromRight - wlWdith - 2, ((getSize().height / 2)));

            if (layeredCanvas.imgpanel.getImageOrientation() != null) {
                getOrientation(layeredCanvas.imgpanel.getImageOrientation());
                columnLeft = getOppositeOrientation(columnRight);
                rowTop = getOppositeOrientation(rowDown);
                if (layeredCanvas.imgpanel.isFlipHorizontalFlag()) {
                    flipOrientationToHorizontal();
                }
                if (layeredCanvas.imgpanel.isFlipVerticalFlag()) {
                    flipOrientationToVertical();
                }
                if (layeredCanvas.imgpanel.isIsRotate()) {
                    if (layeredCanvas.imgpanel.getRotateRightAngle() == 90 || layeredCanvas.imgpanel.getRotateLeftAngle() == -270) {
                        changeOrientationTo90();
                    } else if (layeredCanvas.imgpanel.getRotateRightAngle() == 180 || layeredCanvas.imgpanel.getRotateLeftAngle() == -180) {
                        changeOrientationTo180();
                    } else if (layeredCanvas.imgpanel.getRotateRightAngle() == 270 || layeredCanvas.imgpanel.getRotateLeftAngle() == -90) {
                        changeOrientationTo270();
                    }
                }
                g.drawString(rowTop, (getSize().width / 2) - 1, 20);
                g.drawString(rowDown, (getSize().width / 2) - 1, getSize().height - 7);
                g.drawString(columnLeft, 10, (getSize().height / 2) - 1);
                g.drawString(columnRight, getSize().width - 30, (getSize().height / 2) - 1);
            }
        }
    }

    @Override
    protected void paintBorder(Graphics g) {
        super.paintBorder(g);

    }

    public void resizeHandler() {
        firstTime = true;
        repaint();
    }

    /**
     * This routine used to center the image.
     */
    private void centerImage() {
        getComponent(0).setBounds(0, 0, getWidth(), getHeight());
        ((ImagePanel) getComponent(0)).initializeParams();
        layeredCanvas.annotationPanel.setBounds(0, 0, getWidth(), getHeight());
    }

    public LayeredCanvas getLayeredCanvas() {
        return layeredCanvas;
    }

    public void setLayeredCanvas(LayeredCanvas layeredCanvas) {
        this.layeredCanvas = layeredCanvas;
    }

    /**
     * This routine used to set the selection coloring.
     */
    public void setSelectionColoring() {
        focusGained = true;
        repaint();
    }

    public void changeOrientationTo90() {
        String tempLeft, tempRight, tempTop, tempBottom;
        tempLeft = columnLeft;
        tempRight = columnRight;
        tempTop = rowTop;
        tempBottom = rowDown;
        columnLeft = tempBottom;
        rowTop = tempLeft;
        columnRight = tempTop;
        rowDown = tempRight;
    }

    public void changeOrientationTo180() {
        String tempLeft, tempRight, tempTop, tempBottom;
        tempLeft = columnLeft;
        tempRight = columnRight;
        tempTop = rowTop;
        tempBottom = rowDown;
        columnLeft = tempRight;
        rowTop = tempBottom;
        columnRight = tempLeft;
        rowDown = tempTop;
    }

    public void changeOrientationTo270() {
        String tempLeft, tempRight, tempTop, tempBottom;
        tempLeft = columnLeft;
        tempRight = columnRight;
        tempTop = rowTop;
        tempBottom = rowDown;
        columnLeft = tempTop;
        rowTop = tempRight;
        columnRight = tempBottom;
        rowDown = tempLeft;
    }

    public void flipOrientationToHorizontal() {
        String tempLeft, tempRight;
        tempLeft = columnLeft;
        tempRight = columnRight;
        columnLeft = tempRight;
        columnRight = tempLeft;
    }

    public void flipOrientationToVertical() {
        String tempTop, tempBottom;
        tempTop = rowTop;
        tempBottom = rowDown;
        rowTop = tempBottom;
        rowDown = tempTop;
    }

    public void getOrientation(String imageOrientation) {
        String imageOrientationArray[];
        if (!imageOrientation.equalsIgnoreCase("null")) {
            imageOrientationArray = imageOrientation.split("\\\\");
            float _imgRowCosx = Float.parseFloat(imageOrientationArray[0]);
            float _imgRowCosy = Float.parseFloat(imageOrientationArray[1]);
            float _imgRowCosz = Float.parseFloat(imageOrientationArray[2]);
            float _imgColCosx = Float.parseFloat(imageOrientationArray[3]);
            float _imgColCosy = Float.parseFloat(imageOrientationArray[4]);
            float _imgColCosz = Float.parseFloat(imageOrientationArray[5]);
            columnRight = ImageOrientation.getOrientation(_imgRowCosx, _imgRowCosy, _imgRowCosz);
            rowDown = ImageOrientation.getOrientation(_imgColCosx, _imgColCosy, _imgColCosz);
        }
    }

    public String getOppositeOrientation(String orientation) {
        String oppositePrcl = "";
        java.util.List<String> chars = new ArrayList<String>();
        Pattern pat = Pattern.compile("\\p{L}\\p{M}*"); // p{L} - Unicode Letter, p{M} - Unicode Mark
        Matcher matcher = pat.matcher(orientation);
        while (matcher.find()) {
            chars.add(matcher.group());
        }
        for (int i = 0; i < chars.size(); i++) {
            oppositePrcl += getOpposite(chars.get(i));
        }
        return oppositePrcl;
    }

    public String getOpposite(String c) {
        String opposite = "";
        if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.left"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.right");
        } else if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.right"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.left");
        } else if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.anterior"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.posterior");
        } else if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.posterior"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.anterior");
        } else if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.head"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.foot");
        } else if (c.equals(ApplicationContext.currentBundle.getString("ImageView.imageOrientation.foot"))) {
            return ApplicationContext.currentBundle.getString("ImageView.imageOrientation.head");
        }
        return opposite;
    }

    /**
     * This routine used to remove the selection coloring.
     */
    public void setNoSelectionColoring() {
        focusGained = false;
        repaint();
    }

//    public void setSelection(boolean skip) { //skip is used to skip this block each time on mouse scroll
//        try {
//            String seriesUid = ApplicationContext.layeredCanvas.imgpanel.getSeriesUID();
//            String iuid = ApplicationContext.layeredCanvas.imgpanel.getInstanceUID();
//            ImagePanel imgPanel = (ImagePanel) this.getComponent(0);
//            if (skip || !seriesUid.equals(imgPanel.getSeriesUID()) || imgPanel.isMultiFrame() || !iuid.equals(imgPanel.getInstanceUID())) {
//                if (ApplicationContext.layeredCanvas != null && ApplicationContext.layeredCanvas.canvas != null) {
//                    ApplicationContext.layeredCanvas.getCanvas().setNoSelectionColoring();
//                } else {
//                    ApplicationContext.layeredCanvas.setNoSelectionColoring();
//                }
//                ApplicationContext.layeredCanvas = null;
//                ApplicationContext.layeredCanvas = layeredCanvas;
//                ApplicationContext.selectedPanel = (JPanel) layeredCanvas.getParent();
//                setSelectionColoring();
//                if (ApplicationContext.isImageViewExist()) {
////                    ApplicationContext.imgView.imageToolbar.refreshToolsDisplay();
//                }
//                if (!ApplicationContext.imgView.imageToolbar.isImageLayout && ImagePanel.isDisplayScout()) {
//                    LocalizerDelegate localizer = new LocalizerDelegate(false);
//                    localizer.start();
//                }
//            }
//
//        } catch (ArrayIndexOutOfBoundsException ex) {
//            //ignore : No of components differ in Jdk 1.7
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
