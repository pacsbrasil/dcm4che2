/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import com.nilo.plaf.nimrod.NimRODLookAndFeel;
import com.sun.java.swing.plaf.motif.MotifLookAndFeel;
import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.delegates.CGetDelegate;
import in.raster.mayam.delegates.CreateButtonsDelegate;
import in.raster.mayam.delegates.InputArgumentsParser;
import in.raster.mayam.delegates.MoveDelegate;
import in.raster.mayam.delegates.ReceiveDelegate;
import in.raster.mayam.delegates.WadoRetrieveDelegate;
import in.raster.mayam.form.dialogs.FileChooserDialog;
import in.raster.mayam.listeners.*;
import in.raster.mayam.models.*;
import in.raster.mayam.models.table.renderer.IconRenderer;
import in.raster.mayam.models.treetable.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Devishree
 * @version 2.0
 */
public class MainScreen extends javax.swing.JFrame {

     private ReceiveDelegate receiveDelegate = null;
    public CreateButtonsDelegate createButtonsDelegate = null;
    public SettingsForm settingsForm = null;
    //Variables    
    ArrayList<String> serverLabels = new ArrayList<String>();
    ArrayList<StudySeriesMatch> studySeriesMatchs;
    JPopupMenu preferencesPopup;
    JMenuItem preferencesItem, resetItem, importItem;
    //Listeners
    QueryButtonListener queryButtonListener = null;
    ServerTabChangeListener serverTabChangeListener = null;
    int progressValue = 0;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        initAppDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsToolbar = new javax.swing.JPanel();
        serverTab = new javax.swing.JTabbedPane();
        settingsButton = new javax.swing.JButton();
        queryInfoLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(ApplicationContext.currentBundle.getString("MainScreen.title.text")); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/in/raster/mayam/form/images/fav_mayam.png")));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonsToolbar.setPreferredSize(new java.awt.Dimension(1000, 40));

        javax.swing.GroupLayout buttonsToolbarLayout = new javax.swing.GroupLayout(buttonsToolbar);
        buttonsToolbar.setLayout(buttonsToolbarLayout);
        buttonsToolbarLayout.setHorizontalGroup(
            buttonsToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        buttonsToolbarLayout.setVerticalGroup(
            buttonsToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 52, Short.MAX_VALUE)
        );

        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/setting-org.png"))); // NOI18N
        settingsButton.setMaximumSize(new java.awt.Dimension(25, 25));
        settingsButton.setMinimumSize(new java.awt.Dimension(25, 25));
        settingsButton.setPreferredSize(new java.awt.Dimension(25, 25));
        settingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                settingsButtonMousePressed(evt);
            }
        });

        queryInfoLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.studiesFoundLabel.text")); // NOI18N

        progressLabel.setFont(ApplicationContext.labelFont);
        progressLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.downloadingLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverTab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonsToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 931, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 270, Short.MAX_VALUE)
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonsToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 426, Short.MAX_VALUE))
                    .addComponent(serverTab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queryInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressLabel))
                .addContainerGap())
        );

        queryInfoLabel.setFont(ApplicationContext.labelFont);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void settingsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMousePressed
        preferencesPopup.show(this, settingsButton.getX(), settingsButton.getY() + 50);
    }//GEN-LAST:event_settingsButtonMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
         stopReceiver();
        if (ApplicationContext.imgView != null) {
            ApplicationContext.imgView.onWindowClose();
        }
        ApplicationContext.databaseRef.deleteLinkStudies();
        ApplicationContext.deleteDir(new File(ApplicationContext.getAppDirectory() + File.separator + "Thumbnails"));
        ApplicationContext.deleteDir(new File(ApplicationContext.getAppDirectory() + File.separator + "Videos"));
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsToolbar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JLabel queryInfoLabel;
    private javax.swing.JTabbedPane serverTab;
    private javax.swing.JButton settingsButton;
    // End of variables declaration//GEN-END:variables

    private void initAppDefaults() {
        ApplicationContext.mainScreenObj = this;
        ApplicationContext.listenerDetails = ApplicationContext.databaseRef.getListenerDetails();
        ApplicationContext.activeTheme = ApplicationContext.databaseRef.getActiveTheme();
        startListening();
        loadStudiesBasedOnInputParameter();
        if (!ApplicationContext.isJnlp) {
            settingsForm = new SettingsForm();
            createServers();
            createPreferences();
            setTheme();
            queryButtonListener = new QueryButtonListener(serverTab);
            serverTab.addMouseListener(new ServerTabListener(serverTab));
            serverTabChangeListener = new ServerTabChangeListener(serverTab);
            serverTab.addChangeListener(serverTabChangeListener);
            createButtonsDelegate = new CreateButtonsDelegate(buttonsToolbar, CursorController.createListener(this, queryButtonListener));
            createButtonsDelegate.loadButtons();
            ApplicationContext.currentTreeTable = ((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) serverTab.getSelectedComponent()).getRightComponent()).getComponent(0)).getComponent(0));
            addKeyEventDispatcher();
            queryInfoLabel.setText("");
            loadlocalStudies();
            hideProgressBar();
            addComponentListener(new ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent ce) {
                    createButtonsDelegate.loadButtons();
                    if (getWidth() < 1000) {
                        setSize(1000, getHeight());
                    }
                }
            });
        }
    }

    public void startListening() {
        receiveDelegate = new ReceiveDelegate();
        try {
            receiveDelegate.start();
            System.out.println("Start Server listening on port " + receiveDelegate.getPort());
        } catch (Exception ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void stopReceiver() {
        System.out.println("Stop server listening on port " + receiveDelegate.getPort());
        receiveDelegate.stop();
    }

    public void createServers() {
        serverTab.setFont(ApplicationContext.textFont);
        serverTab.add(ApplicationContext.currentBundle.getString("MainScreen.local.text"), constructSplitPaneWithPreview());
        serverLabels = ApplicationContext.databaseRef.getAllServerNames();
        for (int i = 0; i < serverLabels.size(); i++) {
            if (!serverLabels.get(i).equals("Description")) {
                addNewTab(serverLabels.get(i));
            }
        }
    }

    public void addNewTab(String serverName) {
        JSplitPane parentSpliPane;
        SearchFilterForm searchFilterForm = new SearchFilterForm();
        searchFilterForm.setMinimumSize(new Dimension(900, 150));
        if (ApplicationContext.databaseRef.isPreviewsEnabled(serverName)) {
            JSplitPane splitPane = constructSplitPaneWithPreview();
            parentSpliPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, searchFilterForm, splitPane);
            setSplitPaneProperties(parentSpliPane, 150, 15);
        } else {
            TreeTable treeTab = new TreeTable();
            treeTab.addMouseListener(new TreeTableMouseListener(treeTab));
            parentSpliPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, searchFilterForm, new JScrollPane(treeTab));
            setSplitPaneProperties(parentSpliPane, 150, 15);
        }
        serverTab.add(serverName, parentSpliPane);
    }

    public JSplitPane constructSplitPaneWithPreview() {
        ImagePreviewPanel imagePreviewPanel = new ImagePreviewPanel();
        TreeTable treeTab = new TreeTable();
        treeTab.addMouseListener(new TreeTableMouseListener(treeTab, imagePreviewPanel));
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, imagePreviewPanel, new JScrollPane(treeTab));
        setSplitPaneProperties(splitPane, 270, 15);
        imagePreviewPanel.setMinimumSize(new Dimension(270, 0));
        return splitPane;
    }

    public void setSplitPaneProperties(JSplitPane splitPane, int dividerLocation, int dividerSize) {
        splitPane.setDividerLocation(dividerLocation);
        splitPane.setDividerSize(dividerSize);
        splitPane.setOneTouchExpandable(true);
    }

    public void setTheme() {
        if (ApplicationContext.activeTheme.equals("Nimrod")) {
            setNimRodTheme();
        } else if (ApplicationContext.activeTheme.equals("Motif")) {
            setMotifTheme();
        } else {
            setSystemTheme();
        }
    }

    private void setNimRodTheme() {
        try {
            UIManager.setLookAndFeel(new NimRODLookAndFeel());
            UIDefaults uIDefaults = UIManager.getDefaults();
            uIDefaults.put("Menu.font", ApplicationContext.textFont);
            uIDefaults.put("MenuItem.font", ApplicationContext.textFont);
            uIDefaults.put("Button.font", ApplicationContext.textFont);
            uIDefaults.put("Label.font", ApplicationContext.textFont);
            uIDefaults.put("RadioButton.font", ApplicationContext.textFont);
            uIDefaults.put("CheckBox.font", ApplicationContext.textFont);
            uIDefaults.put("TabbedPane.tabInsets", new Insets(5, 5, 5, 5));
            uIDefaults.put("TabbedPane.selectedTabPadInsets", new Insets(5, 7, 5, 7));
            uIDefaults.put("OptionPane.messageFont", ApplicationContext.labelFont);
            uIDefaults.put("OptionPane.buttonFont", ApplicationContext.labelFont);
            uIDefaults.put("ToolTip.font", ApplicationContext.labelFont);
            uIDefaults.put("Slider.horizontalThumbIcon", new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/slider.png")));
            updateComponentsTreeUI();
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setMotifTheme() {
        try {
            UIManager.setLookAndFeel(new MotifLookAndFeel());
            updateComponentsTreeUI();
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setSystemTheme() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            updateComponentsTreeUI();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateComponentsTreeUI() {
        SwingUtilities.updateComponentTreeUI(this);
        if (settingsForm != null && preferencesPopup != null) {
            SwingUtilities.updateComponentTreeUI(settingsForm);
            SwingUtilities.updateComponentTreeUI(preferencesPopup);
        }
        if (ApplicationContext.isImageViewExist()) {
            SwingUtilities.updateComponentTreeUI(ApplicationContext.imgView);
        }
        //To update the theme to ImagePreviewPanel,SearchFilterForm,TreeTable
        for (int i = 0; i < serverTab.getTabCount(); i++) {
            if (i != 0) {
                SwingUtilities.updateComponentTreeUI((SearchFilterForm) ((JSplitPane) serverTab.getComponentAt(i)).getTopComponent());
                if (((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent() instanceof JScrollPane) {
                    SwingUtilities.updateComponentTreeUI(((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getComponent(0)).getComponent(0)));
                } else {
                    SwingUtilities.updateComponentTreeUI(((ImagePreviewPanel) ((JSplitPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getLeftComponent()));
                    SwingUtilities.updateComponentTreeUI(((ImagePreviewPanel) ((JSplitPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getLeftComponent()).parent);
                    SwingUtilities.updateComponentTreeUI(((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getRightComponent()).getComponent(0)).getComponent(0)));
                }
            } else {
                SwingUtilities.updateComponentTreeUI(((ImagePreviewPanel) ((JSplitPane) serverTab.getComponentAt(i)).getLeftComponent()));
                SwingUtilities.updateComponentTreeUI(((ImagePreviewPanel) ((JSplitPane) serverTab.getComponentAt(i)).getLeftComponent()).parent);
                SwingUtilities.updateComponentTreeUI(((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) serverTab.getComponentAt(i)).getRightComponent()).getComponent(0)).getComponent(0)));
            }
        }
    }

    public void setStudiesFound(String text) {
        queryInfoLabel.setText(text);
    }

    public synchronized void loadlocalStudies() {
        DataNode root = null;
        studySeriesMatchs = new ArrayList<StudySeriesMatch>();
        ArrayList<StudyModel> studies = ApplicationContext.databaseRef.listAllLocalStudies();
        if (!studies.isEmpty()) {
            for (int i = 0; i < studies.size(); i++) {
                ArrayList<Series> seriesList = ApplicationContext.databaseRef.getSeriesList_SepMulti(studies.get(i).getStudyUID());
                StudySeriesMatch studySeriesMatch = new StudySeriesMatch(studies.get(i).getStudyUID(), seriesList);
                studySeriesMatchs.add(studySeriesMatch);
            }
            root = ApplicationContext.communicationDelegate.constructTreeTableData(studySeriesMatchs, studies, "", "", "", "", "", "", "");
        }
        setTreeTableModel(root);
    }

    public String getCurrentServer() {
        return serverTab.getTitleAt(serverTab.getSelectedIndex());
    }

    public void addOrEditServer(String prevName, String currentName) {
        boolean serverFound = false;
        for (int i = 0; i < serverTab.getTabCount(); i++) {
            if (serverTab.getTitleAt(i).equals(prevName)) {
                serverTab.setTitleAt(i, currentName);
                serverFound = true;
                break;
            }
        }
        if (!serverFound) {
            addNewTab(currentName);
        }
    }

    public void removeTab(String serverName) {
        for (int i = 1; i < serverTab.getTabCount(); i++) {
            if (serverTab.getTitleAt(i).equals(serverName)) {
                serverTab.remove(i);
                break;
            }
        }
    }

    public void setTreeTableModel(DataNode root) {
        AbstractTreeTableModel treeModel = new DataModel(root);
        ApplicationContext.currentTreeTable.setTreeTableModel(treeModel);
        ApplicationContext.currentTreeTable.setDefaultRenderer(Object.class, new IconRenderer(ApplicationContext.currentTreeTable));
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(0).setMaxWidth(20);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(1).setMaxWidth(20);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(3).setMinWidth(120);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(6).setMinWidth(40);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(7).setMinWidth(150);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(8).setMaxWidth(70);
        ApplicationContext.currentTreeTable.getColumnModel().getColumn(9).setMaxWidth(60);
        ApplicationContext.currentTreeTable.getTableHeader().setReorderingAllowed(false);
    }

    public ImagePreviewPanel getCurrentImagePreviewPanel() {
        if (serverTab.getSelectedIndex() == 0) {
            return ((ImagePreviewPanel) ((JSplitPane) serverTab.getSelectedComponent()).getLeftComponent());
        }
        return null;
    }

    public void removeAllPreviewsOfImagePreviewPanel() {
        try {
            ((ImagePreviewPanel) ((JSplitPane) ((JSplitPane) serverTab.getSelectedComponent()).getRightComponent()).getLeftComponent()).resetImagePreviewPanel();
        } catch (ClassCastException cce) {
            //ignore
        }
    }

    //ProgressBar Updations
    public void initializeProgressBar(int maxValue) {
        progressBar.setMaximum(progressBar.getMaximum() + maxValue);
        if (!progressBar.isVisible()) {
            progressBar.setIndeterminate(false);
            progressBar.setVisible(true);
            progressLabel.setVisible(true);
        }
    }

    public void incrementProgressValue() {
        progressValue += 1;
        progressBar.setValue(progressValue);
        progressBar.setStringPainted(true);
    }

    public void increaseProgressValue() { // To increase the progress value during the thumbnails construction
        if (progressValue < progressBar.getMaximum()) {
            progressValue++;
            progressBar.setValue(progressValue);
            progressBar.setStringPainted(true);
        }
    }

    public void hideProgressBar() {
        progressBar.setVisible(false);
        progressLabel.setVisible(false);
        progressBar.setMaximum(0);
        progressValue = 0;
        progressBar.setValue(progressValue);
        progressLabel.setText("");
    }

    public void setProgressbarVisibility(boolean visibility) {
        progressBar.setVisible(visibility);
        progressLabel.setVisible(visibility);
    }

    public int getCurrentProgressValue() {
        return progressBar.getValue();
    }

    public void setProgressIndeterminate() {
        progressBar.setIndeterminate(true);
    }

    public void setProgressText(String text) {
        progressLabel.setText(text);
    }

    public void showProgress() {
        progressLabel.setVisible(true);
        progressBar.setValue(1);
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);
    }

    public String getProgressText() {
        return progressLabel.getText();
    }

    //To launch From JNLP
    private void loadStudiesBasedOnInputParameter() {
        InputArgumentValues inputArgumentValues = InputArgumentsParser.inputArgumentValues;
        if (inputArgumentValues != null) {
            setTheme();
            ApplicationContext.isJnlp = true;
            if (ApplicationContext.communicationDelegate.verifyServer(ApplicationContext.communicationDelegate.constructURL(inputArgumentValues.getAeTitle(), inputArgumentValues.getHostName(), inputArgumentValues.getPort()))) {
                if (inputArgumentValues.getRetrieveType().equals("WADO")) {
                    ServerModel serverModel = new ServerModel();
                    serverModel.setAeTitle(inputArgumentValues.getAeTitle());
                    serverModel.setHostName(inputArgumentValues.getHostName());
                    serverModel.setPort(inputArgumentValues.getPort());
                    serverModel.setWadoContextPath(inputArgumentValues.getWadoContext());
                    serverModel.setWadoPort(inputArgumentValues.getWadoPort());
                    serverModel.setWadoProtocol(inputArgumentValues.getWadoProtocol());
                    WadoRetrieveDelegate wadoRetrieveDelegate = new WadoRetrieveDelegate();
                    wadoRetrieveDelegate.retrieveStudy(serverModel);
                } else if (inputArgumentValues.getRetrieveType().equals("C-GET")) {
                    CGetDelegate cGetDelegate = new CGetDelegate(inputArgumentValues);
                } else {
                    MoveDelegate moveDelegate = new MoveDelegate(inputArgumentValues);
                }
            } else {
                System.err.println("ERROR : DICOM Server Unreachable");
                System.exit(0);
            }
        }
    }

    //To filter the studies
    public void loadMatchingStudies() {
        String pid = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 2)).trim();
        String pname = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 3)).trim();
        String dob = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 4)).trim();
        String accNo = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 5)).trim();
        String studyDate = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 6)).trim();
        String studyDesc = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 7)).trim();
        String modality = String.valueOf(ApplicationContext.currentTreeTable.getValueAt(ApplicationContext.currentTreeTable.getSelectedRow(), 8)).trim();
        ArrayList<StudySeriesMatch> studySeriesList = new ArrayList<StudySeriesMatch>();
        ArrayList<StudyModel> studies = ApplicationContext.databaseRef.listStudies("%" + pname.toUpperCase() + "%", "%" + pid.toUpperCase() + "%", "%" + dob + "%", "%" + accNo.toUpperCase() + "%", "%" + studyDate + "%", "%" + studyDesc.toUpperCase() + "%", "%" + modality.toUpperCase() + "%");
        if (!studies.isEmpty()) {
            for (int i = 0; i < studies.size(); i++) {
                ArrayList<Series> seriesList = ApplicationContext.databaseRef.getSeriesList(studies.get(i).getStudyUID());
                studySeriesList.add(new StudySeriesMatch(studies.get(i).getStudyUID(), seriesList));
            }
        }
        setTreeTableModel(ApplicationContext.communicationDelegate.constructTreeTableData(studySeriesList, studies, pid, pname, dob, accNo, studyDate, studyDesc, modality));
    }

    public void addKeyEventDispatcher() {
        KeyEventDispatcher keyEventDispatcher = new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
                if (e.getID() == KeyEvent.KEY_TYPED && ApplicationContext.isLocal && ApplicationContext.mainScreenObj.isFocused()) {
                    keyEventProcessor(e);
                }
                boolean discardEvent = false;
                return discardEvent;
            }
        };
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(keyEventDispatcher);
    }

    private void keyEventProcessor(KeyEvent e) {
        if (ApplicationContext.currentTreeTable.getSelectedRow() == 0 && ApplicationContext.mainScreenObj.isFocused()) {
            int row = ApplicationContext.currentTreeTable.getSelectedRow();
            int column = ApplicationContext.currentTreeTable.getSelectedColumn();
            if (e.getKeyChar() == KeyEvent.VK_DELETE) {
                ApplicationContext.currentTreeTable.setValueAt("", row, column);
            } else if (e.getKeyChar() == KeyEvent.VK_BACK_SPACE) {
                String str = (String) ApplicationContext.currentTreeTable.getValueAt(row, column);
                try {
                    ApplicationContext.currentTreeTable.setValueAt(str.substring(0, str.length() - 1), row, column);
                } catch (StringIndexOutOfBoundsException sioobe) {
                }
            } else {
                ApplicationContext.currentTreeTable.setValueAt((String) ApplicationContext.currentTreeTable.getValueAt(row, column) + e.getKeyChar(), row, column);
            }
            ApplicationContext.mainScreenObj.loadMatchingStudies();
            ApplicationContext.currentTreeTable.changeSelection(row, column, false, false);
        }
    }

    public void applyLocaleChange() {
        ApplicationContext.applyLocaleChange();
        this.setTitle(ApplicationContext.currentBundle.getString("MainScreen.title.text"));
        serverTab.setTitleAt(0, ApplicationContext.currentBundle.getString("MainScreen.local.text"));
        TreeTable treeTable;
        SearchFilterForm filterForm = null;
        for (int i = 0; i < serverTab.getTabCount(); i++) {
            if (i != 0) {
                filterForm = (SearchFilterForm) ((JSplitPane) serverTab.getComponentAt(i)).getTopComponent();
                if (((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent() instanceof JScrollPane) {
                    treeTable = ((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getComponent(0)).getComponent(0));
                } else {
                    treeTable = ((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getRightComponent()).getComponent(0)).getComponent(0));
                }
            } else {
                treeTable = ((TreeTable) ((JViewport) ((JScrollPane) ((JSplitPane) serverTab.getComponentAt(i)).getBottomComponent()).getComponent(0)).getComponent(0));
            }
            JTableHeader tableHeader = treeTable.getTableHeader();
            TableColumnModel columnModel = tableHeader.getColumnModel();
            if (columnModel.getColumnCount() > 0) {
                TableColumn idColumn = columnModel.getColumn(2);
                idColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.patientIdColumn.text"));
                TableColumn nameColumn = columnModel.getColumn(3);
                nameColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.patientNameColumn.text"));
                TableColumn dobColumn = columnModel.getColumn(4);
                dobColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.dobColumn.text"));
                TableColumn accNoColumn = columnModel.getColumn(5);
                accNoColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.accessionNoColumn.text"));
                TableColumn studyDateColumn = columnModel.getColumn(6);
                studyDateColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.studyDateColumn.text"));
                TableColumn studyDescColumn = columnModel.getColumn(7);
                studyDescColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.studyDescColumn.text"));
                TableColumn modalityColumn = columnModel.getColumn(8);
                modalityColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.modalityColumn.text"));
                TableColumn imagesColumn = columnModel.getColumn(9);
                imagesColumn.setHeaderValue(ApplicationContext.currentBundle.getString("MainScreen.imagesColumn.text"));
                tableHeader.validate();
                tableHeader.repaint();
            }
            if (filterForm != null) {
                filterForm.applyLocaleChange();
            }
        }
        if (!queryInfoLabel.getText().equals("")) {
            queryInfoLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.studiesFoundLabel.text") + queryInfoLabel.getText().split(":")[1]);
        }
        progressLabel.setText(ApplicationContext.currentBundle.getString("MainScreen.downloadingLabel.text"));
        settingsForm.applyLocaleChange();
        if (ApplicationContext.isImageViewExist()) {
            ApplicationContext.imgView.applyLocale();
        }
        preferencesItem.setText(ApplicationContext.currentBundle.getString("MainScreen.settingsMenuItem.text"));
        resetItem.setText(ApplicationContext.currentBundle.getString("MainScreen.resetLocalDbMenuItem.text"));
        importItem.setText(ApplicationContext.currentBundle.getString("MainScreen.importMenuItem.text"));
    }

    private void createPreferences() {
        Font textFont = new Font("Lucida Grande", Font.BOLD, 15);
        preferencesPopup = new JPopupMenu();
        preferencesItem = new JMenuItem(ApplicationContext.currentBundle.getString("MainScreen.settingsMenuItem.text"));
        preferencesItem.setFont(textFont);
        preferencesItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                settingsForm.setSelectedTab();
                settingsForm.setLocationRelativeTo(ApplicationContext.mainScreenObj);
                settingsForm.setVisible(true);
            }
        });
        resetItem = new JMenuItem(ApplicationContext.currentBundle.getString("MainScreen.resetLocalDbMenuItem.text"));
        resetItem.setFont(textFont);
        ActionListener resetListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int isReset = JOptionPane.showConfirmDialog(rootPane, "Do you want to reset the local database?", "Reset", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (isReset == 0) {
                    ApplicationContext.databaseRef.rebuild();
                    if (serverTab.getSelectedIndex() == 0) {
                        setTreeTableModel(null);
                    }
                    ((ImagePreviewPanel) ((JSplitPane) serverTab.getComponentAt(0)).getLeftComponent()).resetImagePreviewPanel();
                    if (ApplicationContext.isImageViewExist()) {
                        ApplicationContext.imgView.dispose();
                        ApplicationContext.imgView = null;
                    }
                }
            }
        };
        importItem = new JMenuItem(ApplicationContext.currentBundle.getString("MainScreen.importMenuItem.text"));
        importItem.setFont(textFont);
        importItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                FileChooserDialog fcd = new FileChooserDialog(ApplicationContext.mainScreenObj, true);
                fcd.setLocationRelativeTo(ApplicationContext.mainScreenObj);
                fcd.setVisible(true);
            }
        });
        resetItem.addActionListener(CursorController.createListener(ApplicationContext.mainScreenObj, resetListener));
        preferencesPopup.add(preferencesItem);
        preferencesPopup.add(resetItem);
        preferencesPopup.add(importItem);
    }

    public synchronized void refreshLocalDB() {
        if (ApplicationContext.isLocal && !ApplicationContext.isJnlp) {
            ArrayList<Integer> expandedRows = new ArrayList<Integer>();
            JTree tree;
            if (ApplicationContext.currentTreeTable.getRowCount() > 1) {
                tree = ((TreeTableCellEditor) ApplicationContext.currentTreeTable.getCellEditor(0, 0)).getTree();
                for (int j = 1; j < ApplicationContext.currentTreeTable.getRowCount(); j++) {
                    if (!((Boolean) ((TreeTableModelAdapter) ApplicationContext.currentTreeTable.getModel()).getValueAt(j, 14))) {
                        if (tree.isExpanded(j)) {
                            expandedRows.add(j);
                        }
                    }
                }
            }
            loadlocalStudies();
            tree = ((TreeTableCellEditor) ApplicationContext.currentTreeTable.getCellEditor(0, 0)).getTree();
            for (int j = 0; j < expandedRows.size(); j++) {
                tree.expandRow(expandedRows.get(j));
            }
            for (int i = 0; i < ApplicationContext.currentTreeTable.getRowCount(); i++) {
                if (ApplicationContext.currentTreeTable.getValueAt(i, 2).equals(((ImagePreviewPanel) ((JSplitPane) serverTab.getComponentAt(0)).getLeftComponent()).getPatientId())) {
                    ApplicationContext.currentTreeTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
        }
    }

    public SearchFilterForm getCurrentSearchFilterForm() {
        return ((SearchFilterForm) ((JSplitPane) serverTab.getSelectedComponent()).getTopComponent());
    }
}
