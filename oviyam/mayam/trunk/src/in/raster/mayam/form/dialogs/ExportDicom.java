/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2014
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form.dialogs;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.delegates.DicomImageReader;
import in.raster.mayam.form.LayeredCanvas;
import in.raster.mayam.form.display.Display;
import in.raster.mayam.models.ServerModel;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import org.dcm4che2.net.ConfigurationException;
import org.dcm4che2.tool.dcmsnd.DcmSnd;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Devishree
 * @version 2.1
 */
public class ExportDicom extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private LayeredCanvas selectedCanvas = null;
    private File patientNameFile = null;
    private ProgressBar exportingProgress = null;
    private HashSet<String> selectedServers = null;
    private HashSet<ServerModel> serversToSend = null;

    /**
     * Creates new form ExportDicom
     */
    public ExportDicom(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ExportDicom(LayeredCanvas selectedCanvas) {
        this.selectedCanvas = selectedCanvas;
        initComponents();
        jScrollPane1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formatGroup = new javax.swing.ButtonGroup();
        imageLevelGroup = new javax.swing.ButtonGroup();
        sendToDicomNodesRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        saveAsDicomRadio = new javax.swing.JRadioButton();
        saveAsJpegRadio = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        singleImageRadio = new javax.swing.JRadioButton();
        entireSeriesRadio = new javax.swing.JRadioButton();
        entireStudyRadio = new javax.swing.JRadioButton();
        cancelButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(ApplicationContext.currentBundle.getString("ExportDialog.title.text")); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/in/raster/mayam/form/images/fav_mayam.png")));

        formatGroup.add(sendToDicomNodesRadio);
        sendToDicomNodesRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.toDicomNodeRadio.text")); // NOI18N
        sendToDicomNodesRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sendToDicomNodesRadioItemStateChanged(evt);
            }
        });

        jLabel1.setText(ApplicationContext.currentBundle.getString("ExportDialog.destinationLbl.text")); // NOI18N

        formatGroup.add(saveAsDicomRadio);
        saveAsDicomRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.dicomRadio.text")); // NOI18N

        formatGroup.add(saveAsJpegRadio);
        saveAsJpegRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.jpgRadio.text")); // NOI18N

        jLabel2.setText(ApplicationContext.currentBundle.getString("ExportDialog.selectionLbl")); // NOI18N

        imageLevelGroup.add(singleImageRadio);
        singleImageRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.currentImageRadio.text")); // NOI18N

        imageLevelGroup.add(entireSeriesRadio);
        entireSeriesRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.allImagesRadio.text")); // NOI18N

        imageLevelGroup.add(entireStudyRadio);
        entireStudyRadio.setText(ApplicationContext.currentBundle.getString("ExportDialog.entireStudy.text")); // NOI18N

        cancelButton.setText(ApplicationContext.currentBundle.getString("CancelButtons.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        exportButton.setText(ApplicationContext.currentBundle.getString("ExportDialog.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(serverPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 143, Short.MAX_VALUE)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendToDicomNodesRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(entireSeriesRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(singleImageRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveAsJpegRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveAsDicomRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(entireStudyRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendToDicomNodesRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveAsDicomRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveAsJpegRadio)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(singleImageRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entireSeriesRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entireStudyRadio)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(exportButton))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
        if (entireStudyRadio.isSelected() || entireSeriesRadio.isSelected() || singleImageRadio.isSelected()) {
            if (sendToDicomNodesRadio.isSelected()) { //Send to DICOM nodes
                String selectedServerStr = "";
                Iterator<String> iterator = selectedServers.iterator();
                try {
                    selectedServerStr = "'" + iterator.next() + "'";
                    while (iterator.hasNext()) {
                        selectedServerStr += ",'" + iterator.next() + "'";
                    }
                    serversToSend = ApplicationContext.databaseRef.getServersToSend(selectedServerStr);
                    exportingProgress = new ProgressBar(ApplicationContext.viewer, true, ApplicationContext.currentBundle.getString("ExportingProgress.exportingLabel.text"));
                    ExportToPacs exportToPacs = new ExportToPacs();
                    exportToPacs.start();
                    Display.alignScreen(exportingProgress);
                    setVisible(false);
                    exportingProgress.setVisible(true);
                } catch (NoSuchElementException e) {
                    JOptionPane.showOptionDialog(this, ApplicationContext.currentBundle.getString("ExportDialog.noServerSelectedMsg"), ApplicationContext.currentBundle.getString("ErrorTitles.text"), JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{ApplicationContext.currentBundle.getString("OkButtons.text")}, "default");
                }
            } else if (saveAsDicomRadio.isSelected() || saveAsJpegRadio.isSelected()) { //Save in local
                final JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fileChooser.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (e.getActionCommand().equalsIgnoreCase("CancelSelection")) {
                            doClose();
                        } else {
                            String selectedFolderPath = fileChooser.getSelectedFile().getAbsolutePath();
                            startExport(selectedFolderPath);
                        }
                    }

                    private void startExport(String selectedFolderPath) {
                        exportingProgress = new ProgressBar(ApplicationContext.viewer, true, ApplicationContext.currentBundle.getString("ExportingProgress.exportingLabel.text"));
                        patientNameFile = new File(selectedFolderPath + File.separator + selectedCanvas.textOverlay.getPatientName());
                        patientNameFile.mkdirs();
                        Exporter exporter = new Exporter();
                        exporter.start();
                        Display.alignScreen(exportingProgress);
                        exportingProgress.setVisible(true);
                    }
                });
                setVisible(false);
                fileChooser.showSaveDialog(this);
            } else {
                JOptionPane.showOptionDialog(this, ApplicationContext.currentBundle.getString("ExportDialog.noDestinationMsg"), ApplicationContext.currentBundle.getString("ErrorTitles.text"), JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{ApplicationContext.currentBundle.getString("OkButtons.text")}, "default");
            }
        } else {
            JOptionPane.showOptionDialog(this, ApplicationContext.currentBundle.getString("ExportDialog.noneSelectedMsg"), ApplicationContext.currentBundle.getString("ErrorTitles.text"), JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{ApplicationContext.currentBundle.getString("OkButtons.text")}, "default");
        }
    }//GEN-LAST:event_exportActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        doClose();
    }//GEN-LAST:event_cancelActionPerformed

    private void sendToDicomNodesRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sendToDicomNodesRadioItemStateChanged
        // TODO add your handling code here:
        if (sendToDicomNodesRadio.isSelected()) {
            selectedServers = new HashSet<String>(0, 1);
            ArrayList<String> serverLabels = ApplicationContext.databaseRef.getAllServerNames();
            if (serverLabels.size() < 4) {
                serverPanel.setLayout(new GridLayout(4, 1, 2, 2));
            } else {
                serverPanel.setLayout(new GridLayout(serverLabels.size(), 1, 2, 2));
            }
            jScrollPane1.setVisible(true);
            for (int i = 0; i < serverLabels.size(); i++) {
                JCheckBox checkBox = new JCheckBox(serverLabels.get(i));
                serverPanel.add(checkBox);
                checkBox.addItemListener(serverSelectionListner);
            }
            validate();
        } else {
            serverPanel.removeAll();
            serverPanel.setLayout(null);
            jScrollPane1.setVisible(false);
            validate();
        }
    }//GEN-LAST:event_sendToDicomNodesRadioItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton entireSeriesRadio;
    private javax.swing.JRadioButton entireStudyRadio;
    private javax.swing.JButton exportButton;
    private javax.swing.ButtonGroup formatGroup;
    private javax.swing.ButtonGroup imageLevelGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton saveAsDicomRadio;
    private javax.swing.JRadioButton saveAsJpegRadio;
    private javax.swing.JRadioButton sendToDicomNodesRadio;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JRadioButton singleImageRadio;
    // End of variables declaration//GEN-END:variables

    private void doClose() {
        setVisible(false);
        dispose();
    }

    private void exportDcm(String inputFile, String outputFile) {
        //outputFile = outputFile.replaceAll("[^\\p{L}\\p{Z}]", "");//Regex Filter to replace everything that is not a letter in any language
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(inputFile);
            out = new FileOutputStream(outputFile + File.separator + inputFile.substring(inputFile.lastIndexOf(File.separator) + 1));
            byte[] buf = new byte[4096];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void exportJpeg(String outputPath, BufferedImage bimg) {
        /*outputPath = outputPath.replaceAll("[^\\p{L}\\p{Z}]", ""); //Regex Filter to replace everything that is not a letter in any language
         OutputStream output = null;
         try {
         File outputJpegFile = new File(outputPath + ".jpg");
         BufferedImage jpegImage = bimg;
         output = new BufferedOutputStream(new FileOutputStream(outputJpegFile));
         ImageIO.write(jpegImage, "jpeg", outputJpegFile);
         } catch (IOException ex) {
         Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
         } catch (Exception ex) {
         Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
         } finally {
         try {
         if (output != null) {
         output.close();
         }
         } catch (IOException ex) {
         ex.printStackTrace();
         }
         }
         try {
         FileOutputStream fout = new FileOutputStream(outputPath);

         JPEGImageEncoder jencoder = JPEGCodec.createJPEGEncoder(fout);
         JPEGEncodeParam enParam = jencoder.getDefaultJPEGEncodeParam(bimg);

         enParam.setQuality(1.0F, true);
         jencoder.setJPEGEncodeParam(enParam);
         jencoder.encode(bimg);

         fout.close();
         } catch (FileNotFoundException ex) {
         Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
         Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
         } */
        try {
            ImageWriter imageWriter = null;
            Iterator<ImageWriter> iter = ImageIO.getImageWritersByFormatName("jpg");
            if (iter.hasNext()) {
                imageWriter = iter.next();
            }
            ImageOutputStream ios = ImageIO.createImageOutputStream(new File(outputPath));
            imageWriter.setOutput(ios);
            ImageWriteParam iwParam = new JPEGImageWriteParam(ApplicationContext.currentLocale);
            iwParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
            iwParam.setCompressionQuality(1F);
            imageWriter.write(null, new IIOImage(convertToRGB(bimg), null, null), iwParam);
            ios.flush();
            imageWriter.dispose();
            ios.close();
        } catch (IOException ex) {
            Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void exportAsJPEGImages(ArrayList<String> instances, boolean isMultiframes) {
        try {
            ImageWriter imageWriter = null;
            Iterator<ImageWriter> iter = ImageIO.getImageWritersByFormatName("jpg");
            if (iter.hasNext()) {
                imageWriter = iter.next();
            }
            ImageWriteParam iwParam = new JPEGImageWriteParam(ApplicationContext.currentLocale);
            iwParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
            iwParam.setCompressionQuality(1F);

            for (int inst_Iter = 0; inst_Iter < instances.size(); inst_Iter++) {
                String outputPath = instances.get(inst_Iter).substring(instances.get(inst_Iter).lastIndexOf(File.separator) + 1);
                ImageOutputStream ios = null;
                if (!isMultiframes) {
                    ios = ImageIO.createImageOutputStream(new File(patientNameFile.getAbsolutePath() + File.separator + outputPath));
                    imageWriter.setOutput(ios);
                    imageWriter.write(null, new IIOImage(convertToRGB(DicomImageReader.readDicomFile(new File(instances.get(inst_Iter)))), null, null), iwParam);
                } else {
                    BufferedImage[] multiframes = DicomImageReader.readMultiFrames(new File(instances.get(inst_Iter)));
                    for (int i = 0; i < multiframes.length; i++) {
                        ios = ImageIO.createImageOutputStream(new File(patientNameFile.getAbsolutePath() + File.separator + outputPath + "_" + i));
                        imageWriter.setOutput(ios);
                        imageWriter.write(null, new IIOImage(convertToRGB(multiframes[i]), null, null), iwParam);
                        exportingProgress.update();
                    }
                }
                ios.flush();
                ios.close();
                exportingProgress.showProgress(inst_Iter);
            }
            imageWriter.dispose();
        } catch (IOException ex) {
            Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public class Exporter extends Thread {

        @Override
        public void run() {
            if (!entireStudyRadio.isSelected()) {
                if (entireSeriesRadio.isSelected()) { // A SERIES                    
                    if (saveAsDicomRadio.isSelected()) { //As DICOM 
                        ArrayList<String> instances = ApplicationContext.databaseRef.getInstancesLocation(selectedCanvas.imgpanel.getStudyUID(), selectedCanvas.imgpanel.getSeriesUID());
                        exportingProgress.setProgressMaximum(instances.size());
                        for (int i = 0; i < instances.size(); i++) {
                            exportDcm(instances.get(i), patientNameFile.getAbsolutePath());
                            exportingProgress.showProgress(i);
                        }
                    } else { //As JPEG
                        if (selectedCanvas.imgpanel.isEncapsulatedDocument()) {
                            int i = 1;
                            ArrayList<BufferedImage> pdfArray = selectedCanvas.imgpanel.createPDFArray();
                            for (BufferedImage b : pdfArray) {
                                exportJpeg(patientNameFile.getAbsolutePath() + File.separator + i, b);
                                i++;
                            }
                        } else {
                            ArrayList<String> normalInstances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), selectedCanvas.imgpanel.getSeriesUID(), "false");
                            ArrayList<String> multiframeInstances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), selectedCanvas.imgpanel.getSeriesUID(), "true");
                            exportingProgress.setProgressMaximum(normalInstances.size() + multiframeInstances.size());
                            exportAsJPEGImages(normalInstances, false);
                            exportAsJPEGImages(multiframeInstances, true);
                        }
                    }
                } else { //Single image
                    if (saveAsDicomRadio.isSelected()) { // As DICOM
                        exportDcm(selectedCanvas.imgpanel.getDicomFileUrl(), patientNameFile.getAbsolutePath());
                    } else { // As JPEG
                        if (!selectedCanvas.imgpanel.isMultiFrame()) {
                            exportJpeg(patientNameFile.getAbsolutePath() + File.separator + selectedCanvas.imgpanel.getInstanceUID(), selectedCanvas.imgpanel.getCurrentbufferedimage());
                        } else {
                            exportJpeg(patientNameFile.getAbsolutePath() + File.separator + selectedCanvas.imgpanel.getInstanceUID() + "_" + selectedCanvas.imgpanel.getCurrentInstanceNo(), selectedCanvas.imgpanel.getCurrentbufferedimage());
                        }
                    }
                }
            } else { //whole study
                if (saveAsDicomRadio.isSelected()) { //As DICOM
                    ArrayList<String> instances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), null, null);
                    exportingProgress.setProgressMaximum(instances.size());
                    for (int i = 0; i < instances.size(); i++) {
                        exportDcm(instances.get(i), patientNameFile.getAbsolutePath());
                        exportingProgress.showProgress(i);
                    }
                } else { // As JPEG
                    ArrayList<String> instances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), null, "false");
                    ArrayList<String> multiframeInstances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), null, "true");
                    exportingProgress.setProgressMaximum(instances.size() + multiframeInstances.size());
                    exportAsJPEGImages(instances, false);
                    exportAsJPEGImages(multiframeInstances, true);
                }
            }
            try {
                exportingProgress.showProgress(100);
                exportingProgress.setVisible(false);
                exportingProgress.dispose();
            } catch (NullPointerException ex) {
                //ignore
            }
        }
    }
    private ItemListener serverSelectionListner = new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            JCheckBox selectedChk = ((JCheckBox) e.getSource());
            if (selectedChk.isSelected()) {
                selectedServers.add(selectedChk.getText());
            } else {
                selectedServers.remove(selectedChk.getText());
            }
        }
    };

    private class ExportToPacs extends Thread {

        public void run() {
            Iterator<ServerModel> iterator = serversToSend.iterator();
            if (entireStudyRadio.isSelected()) { //Whole STUDY                                
                ArrayList<String> instances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), null, null);
                exportingProgress.setProgressMaximum(instances.size() * serversToSend.size());
                while (iterator.hasNext()) {
                    sendFiles(instances, iterator.next(), null);
                }
                exportingProgress.showProgress(serversToSend.size());
            } else if (entireSeriesRadio.isSelected()) { //A SERIES
                ArrayList<String> instances = ApplicationContext.databaseRef.getInstances(selectedCanvas.imgpanel.getStudyUID(), selectedCanvas.imgpanel.getSeriesUID(), null);
                exportingProgress.setProgressMaximum(instances.size() * serversToSend.size());
                while (iterator.hasNext()) {
                    sendFiles(instances, iterator.next(), null);
                }
            } else if (singleImageRadio.isSelected()) { //Single Image
                File file = new File(selectedCanvas.imgpanel.getDicomFileUrl());
                exportingProgress.setProgressMaximum(serversToSend.size());
                while (iterator.hasNext()) {
                    sendFiles(null, iterator.next(), file);
                }
            }
            exportingProgress.setVisible(false);
            exportingProgress.dispose();
        }

        private void sendFiles(ArrayList<String> instances, ServerModel server, File dcmFile) {
            DcmSnd dcmSnd = new DcmSnd("DCMSND");
            dcmSnd.setCalledAET(server.getAeTitle());
            dcmSnd.setRemoteHost(server.getHostName());
            dcmSnd.setRemotePort(server.getPort());
            dcmSnd.setOfferDefaultTransferSyntaxInSeparatePresentationContext(false);
            dcmSnd.setSendFileRef(false);
            dcmSnd.setStorageCommitment(false);
            dcmSnd.setPackPDV(true);
            dcmSnd.setTcpNoDelay(true);
            try {
                for (int i = 0; i < instances.size(); i++) {
                    exportingProgress.update();
                    dcmSnd.addFile(new File(instances.get(i)));
                }
            } catch (NullPointerException ex) {  //Single image export
                exportingProgress.update();
                dcmSnd.addFile(dcmFile);
            }
            dcmSnd.configureTransferCapability();
            try {
                dcmSnd.start();
            } catch (IOException ex) {
                Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                dcmSnd.open();
            } catch (IOException ex) {
                Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConfigurationException ex) {
                Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(ExportDicom.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                dcmSnd.send();
                dcmSnd.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                dcmSnd.stop();
            }
        }
    }

    private BufferedImage convertToRGB(BufferedImage srcImage) {
        BufferedImage newImage = new BufferedImage(srcImage.getWidth(null),
                srcImage.getHeight(null), BufferedImage.TYPE_INT_BGR);
        Graphics bg = newImage.getGraphics();
        bg.drawImage(srcImage, 0, 0, null);
        bg.dispose();
        return newImage;
    }
}
