/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import java.awt.Graphics;

/**
 *
 * @author  BabuHussain
 * @version 0.5
 *
 */
public class WindowingCanvas extends javax.swing.JPanel {

    /** Creates new form DateFormatPanel */
    private boolean firstTime = true;
    private WindowingLayeredCanvas layeredCanvas;

    public WindowingCanvas(WindowingLayeredCanvas canvas) {
        initComponents();
        this.layeredCanvas = canvas;
    }

    public WindowingCanvas() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 436, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 322, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setFirstTime(boolean firstTime) {
        this.firstTime = firstTime;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (firstTime) {
            this.setSize(layeredCanvas.getSize().width, layeredCanvas.getSize().height);
            firstTime = false;
            centerImage();
            repaint();
        }
    }

    @Override
    protected void paintBorder(Graphics g) {
        super.paintBorder(g);
    }

    public void resizeHandler() {
        this.firstTime = true;
        repaint();
    }

    private void centerImage() {
        int xPosition = (this.getSize().width - this.getComponent(0).getSize().width) / 2;
        int yPosition = (this.getSize().height - this.getComponent(0).getSize().height) / 2;
        this.getComponent(0).setBounds(xPosition, yPosition, this.getComponent(0).getSize().width, this.getComponent(0).getSize().height);
    }

    public WindowingLayeredCanvas getLayeredCanvas() {
        return layeredCanvas;
    }

    public void setLayeredCanvas(WindowingLayeredCanvas layeredCanvas) {
        this.layeredCanvas = layeredCanvas;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
