/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.delegate.LocalizerDelegate;
import in.raster.mayam.form.dialog.ExportDialog;
import in.raster.mayam.util.DicomTags;
import in.raster.mayam.util.DicomTagsReader;
import in.raster.mayam.form.display.Display;
import in.raster.mayam.delegate.CineTimer;
import in.raster.mayam.delegate.DestinationFinder;
import in.raster.mayam.model.Instance;
import in.raster.mayam.model.PresetModel;
import in.raster.mayam.model.Series;
import in.raster.mayam.model.Study;
import in.raster.mayam.model.combo.WindowingComboModel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Timer;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author  BabuHussain
 * @version 0.5
 *
 */
public class ImageToolbar extends javax.swing.JPanel {

    /** Creates new form ImageToolbar */
    ApplicationContext app;
    CineTimer cineTimer;
    Timer timer;
    ImageView imgView;

    public ImageToolbar() {
        initComponents();
        app = new ApplicationContext();
        cineTimer = new CineTimer();
    }

    public ImageToolbar(ImageView imgView) {
        initComponents();
        app = new ApplicationContext();
        cineTimer = new CineTimer();
        this.imgView = imgView;
        designPopup();
        textOverlayContext();
        // presetButton.setVisible(false);
        jComboBox1.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        toolsButtonGroup = new javax.swing.ButtonGroup();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jToolBar3 = new javax.swing.JToolBar();
        layoutButton = new javax.swing.JButton();
        windowing = new javax.swing.JButton();
        presetButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        probeButton = new javax.swing.JButton();
        verticalFlip = new javax.swing.JButton();
        horizontalFlip = new javax.swing.JButton();
        leftRotate = new javax.swing.JButton();
        rightRotate = new javax.swing.JButton();
        zoomin = new javax.swing.JButton();
        zoomoutButton = new javax.swing.JButton();
        panButton = new javax.swing.JButton();
        invert = new javax.swing.JButton();
        rulerButton = new javax.swing.JButton();
        rectangleButton = new javax.swing.JButton();
        ellipseButton = new javax.swing.JButton();
        clearAllMeasurement = new javax.swing.JButton();
        deleteMeasurement = new javax.swing.JButton();
        moveMeasurement = new javax.swing.JButton();
        annotationVisibility = new javax.swing.JButton();
        textOverlay = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        metaDataButton = new javax.swing.JButton();
        stackButton = new javax.swing.JButton();
        scoutButton = new javax.swing.JButton();
        loopCheckbox = new javax.swing.JCheckBox();
        loopSlider = new javax.swing.JSlider();

        setBackground(new java.awt.Color(102, 102, 102));

        jToolBar3.setRollover(true);

        layoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/layout.png"))); // NOI18N
        layoutButton.setToolTipText("Layout");
        layoutButton.setBorderPainted(false);
        layoutButton.setComponentPopupMenu(jPopupMenu1);
        layoutButton.setContentAreaFilled(false);
        layoutButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/layout2.png"))); // NOI18N
        layoutButton.setFocusable(false);
        layoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        layoutButton.setPreferredSize(new java.awt.Dimension(45, 45));
        layoutButton.setRolloverEnabled(true);
        layoutButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/layout1.png"))); // NOI18N
        layoutButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/layout1.png"))); // NOI18N
        layoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        layoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                layoutButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(layoutButton);

        windowing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowing.png"))); // NOI18N
        windowing.setToolTipText("Windowing");
        windowing.setBorderPainted(false);
        toolsButtonGroup.add(windowing);
        windowing.setContentAreaFilled(false);
        windowing.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowing2.png"))); // NOI18N
        windowing.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowing2.png"))); // NOI18N
        windowing.setFocusPainted(false);
        windowing.setFocusable(false);
        windowing.setHorizontalTextPosition(0);
        windowing.setPreferredSize(new java.awt.Dimension(45, 45));
        windowing.setRolloverEnabled(true);
        windowing.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowing1.png"))); // NOI18N
        windowing.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowing1.png"))); // NOI18N
        windowing.setVerticalTextPosition(3);
        windowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowingActionPerformed(evt);
            }
        });
        jToolBar3.add(windowing);

        presetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/drop_down.png"))); // NOI18N
        presetButton.setToolTipText("Preset");
        presetButton.setBorderPainted(false);
        presetButton.setComponentPopupMenu(jPopupMenu2);
        presetButton.setContentAreaFilled(false);
        presetButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/drop_down2.png"))); // NOI18N
        presetButton.setFocusable(false);
        presetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        presetButton.setMaximumSize(new java.awt.Dimension(12, 24));
        presetButton.setMinimumSize(new java.awt.Dimension(12, 24));
        presetButton.setPreferredSize(new java.awt.Dimension(45, 45));
        presetButton.setRolloverEnabled(true);
        presetButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/drop_down1.png"))); // NOI18N
        presetButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/angle.png"))); // NOI18N
        presetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        presetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                presetButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(presetButton);

        jComboBox1.setModel(new WindowingComboModel(ApplicationContext.databaseRef.getPresets()));
        jComboBox1.setMinimumSize(new java.awt.Dimension(20, 3));
        jComboBox1.setPreferredSize(new java.awt.Dimension(47, 3));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jToolBar3.add(jComboBox1);

        probeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/probe.png"))); // NOI18N
        probeButton.setToolTipText("Probe");
        probeButton.setBorderPainted(false);
        probeButton.setContentAreaFilled(false);
        probeButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/probe2.png"))); // NOI18N
        probeButton.setFocusable(false);
        probeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        probeButton.setPreferredSize(new java.awt.Dimension(45, 45));
        probeButton.setRolloverEnabled(true);
        probeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/probe1.png"))); // NOI18N
        probeButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/probe1.png"))); // NOI18N
        probeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        probeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probeButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(probeButton);

        verticalFlip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical.png"))); // NOI18N
        verticalFlip.setToolTipText("Vertical Flip");
        verticalFlip.setBorderPainted(false);
        verticalFlip.setContentAreaFilled(false);
        verticalFlip.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical2.png"))); // NOI18N
        verticalFlip.setFocusable(false);
        verticalFlip.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        verticalFlip.setPreferredSize(new java.awt.Dimension(45, 45));
        verticalFlip.setRolloverEnabled(true);
        verticalFlip.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical1.png"))); // NOI18N
        verticalFlip.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical1.png"))); // NOI18N
        verticalFlip.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical1.png"))); // NOI18N
        verticalFlip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        verticalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalFlipActionPerformed(evt);
            }
        });
        jToolBar3.add(verticalFlip);

        horizontalFlip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_horizontal.png"))); // NOI18N
        horizontalFlip.setToolTipText("Horizontal Flip");
        horizontalFlip.setBorderPainted(false);
        horizontalFlip.setContentAreaFilled(false);
        horizontalFlip.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_horizontal2.png"))); // NOI18N
        horizontalFlip.setFocusable(false);
        horizontalFlip.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        horizontalFlip.setPreferredSize(new java.awt.Dimension(45, 45));
        horizontalFlip.setRolloverEnabled(true);
        horizontalFlip.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_horizontal1.png"))); // NOI18N
        horizontalFlip.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_horizontal1.png"))); // NOI18N
        horizontalFlip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        horizontalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalFlipActionPerformed(evt);
            }
        });
        jToolBar3.add(horizontalFlip);

        leftRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_left.png"))); // NOI18N
        leftRotate.setToolTipText("Rotate Left");
        leftRotate.setBorderPainted(false);
        leftRotate.setContentAreaFilled(false);
        leftRotate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_left2.png"))); // NOI18N
        leftRotate.setFocusable(false);
        leftRotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftRotate.setPreferredSize(new java.awt.Dimension(45, 45));
        leftRotate.setRolloverEnabled(true);
        leftRotate.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_left1.png"))); // NOI18N
        leftRotate.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_left1.png"))); // NOI18N
        leftRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRotateActionPerformed(evt);
            }
        });
        jToolBar3.add(leftRotate);

        rightRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_right.png"))); // NOI18N
        rightRotate.setToolTipText("Rotate Right");
        rightRotate.setBorderPainted(false);
        rightRotate.setContentAreaFilled(false);
        rightRotate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_right2.png"))); // NOI18N
        rightRotate.setFocusable(false);
        rightRotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightRotate.setPreferredSize(new java.awt.Dimension(45, 45));
        rightRotate.setRolloverEnabled(true);
        rightRotate.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_right1.png"))); // NOI18N
        rightRotate.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_right1.png"))); // NOI18N
        rightRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRotateActionPerformed(evt);
            }
        });
        jToolBar3.add(rightRotate);

        zoomin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomin.png"))); // NOI18N
        zoomin.setToolTipText("Zoom In");
        zoomin.setBorderPainted(false);
        zoomin.setContentAreaFilled(false);
        zoomin.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomin2.png"))); // NOI18N
        zoomin.setFocusable(false);
        zoomin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomin.setPreferredSize(new java.awt.Dimension(45, 45));
        zoomin.setRolloverEnabled(true);
        zoomin.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomin1.png"))); // NOI18N
        zoomin.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomin1.png"))); // NOI18N
        zoomin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoominActionPerformed(evt);
            }
        });
        jToolBar3.add(zoomin);

        zoomoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomout.png"))); // NOI18N
        zoomoutButton.setToolTipText("Zoom Out");
        zoomoutButton.setBorderPainted(false);
        zoomoutButton.setContentAreaFilled(false);
        zoomoutButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomout2.png"))); // NOI18N
        zoomoutButton.setFocusable(false);
        zoomoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomoutButton.setPreferredSize(new java.awt.Dimension(45, 45));
        zoomoutButton.setRolloverEnabled(true);
        zoomoutButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomout1.png"))); // NOI18N
        zoomoutButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoomout1.png"))); // NOI18N
        zoomoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomoutButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(zoomoutButton);

        panButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan.png"))); // NOI18N
        panButton.setToolTipText("Pan");
        panButton.setBorderPainted(false);
        toolsButtonGroup.add(panButton);
        panButton.setContentAreaFilled(false);
        panButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan2.png"))); // NOI18N
        panButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan2.png"))); // NOI18N
        panButton.setFocusable(false);
        panButton.setHorizontalTextPosition(0);
        panButton.setPreferredSize(new java.awt.Dimension(45, 45));
        panButton.setRolloverEnabled(true);
        panButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan1.png"))); // NOI18N
        panButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan1.png"))); // NOI18N
        panButton.setVerticalTextPosition(3);
        panButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(panButton);

        invert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/invert.png"))); // NOI18N
        invert.setToolTipText("Invert");
        invert.setBorderPainted(false);
        invert.setContentAreaFilled(false);
        invert.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/invert2.png"))); // NOI18N
        invert.setFocusable(false);
        invert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        invert.setPreferredSize(new java.awt.Dimension(45, 45));
        invert.setRolloverEnabled(true);
        invert.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/invert1.png"))); // NOI18N
        invert.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/invert1.png"))); // NOI18N
        invert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        invert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertActionPerformed(evt);
            }
        });
        jToolBar3.add(invert);

        rulerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler.png"))); // NOI18N
        rulerButton.setToolTipText("Ruler");
        rulerButton.setActionCommand("ruler");
        rulerButton.setBorderPainted(false);
        toolsButtonGroup.add(rulerButton);
        rulerButton.setContentAreaFilled(false);
        rulerButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler2.png"))); // NOI18N
        rulerButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler2.png"))); // NOI18N
        rulerButton.setFocusable(false);
        rulerButton.setHorizontalTextPosition(0);
        rulerButton.setPreferredSize(new java.awt.Dimension(45, 45));
        rulerButton.setRolloverEnabled(true);
        rulerButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler1.png"))); // NOI18N
        rulerButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler1.png"))); // NOI18N
        rulerButton.setVerticalTextPosition(3);
        rulerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulerButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(rulerButton);

        rectangleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle.png"))); // NOI18N
        rectangleButton.setToolTipText("Rectangle ROI");
        rectangleButton.setActionCommand("rectangle");
        rectangleButton.setBorderPainted(false);
        toolsButtonGroup.add(rectangleButton);
        rectangleButton.setContentAreaFilled(false);
        rectangleButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle2.png"))); // NOI18N
        rectangleButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle2.png"))); // NOI18N
        rectangleButton.setFocusable(false);
        rectangleButton.setHorizontalTextPosition(0);
        rectangleButton.setPreferredSize(new java.awt.Dimension(45, 45));
        rectangleButton.setRolloverEnabled(true);
        rectangleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle1.png"))); // NOI18N
        rectangleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle1.png"))); // NOI18N
        rectangleButton.setVerticalTextPosition(3);
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(rectangleButton);

        ellipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse.png"))); // NOI18N
        ellipseButton.setToolTipText("Elliptical ROI");
        ellipseButton.setActionCommand("ellipse");
        ellipseButton.setBorderPainted(false);
        toolsButtonGroup.add(ellipseButton);
        ellipseButton.setContentAreaFilled(false);
        ellipseButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse2.png"))); // NOI18N
        ellipseButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse2.png"))); // NOI18N
        ellipseButton.setFocusable(false);
        ellipseButton.setHorizontalTextPosition(0);
        ellipseButton.setPreferredSize(new java.awt.Dimension(45, 45));
        ellipseButton.setRolloverEnabled(true);
        ellipseButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse1.png"))); // NOI18N
        ellipseButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse1.png"))); // NOI18N
        ellipseButton.setVerticalTextPosition(3);
        ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(ellipseButton);

        clearAllMeasurement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/clear_all_annotation.png"))); // NOI18N
        clearAllMeasurement.setToolTipText("Clear All Measurement");
        clearAllMeasurement.setActionCommand("clearAll");
        clearAllMeasurement.setBorderPainted(false);
        clearAllMeasurement.setContentAreaFilled(false);
        clearAllMeasurement.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/clear_all_annotation2.png"))); // NOI18N
        clearAllMeasurement.setPreferredSize(new java.awt.Dimension(45, 45));
        clearAllMeasurement.setRolloverEnabled(true);
        clearAllMeasurement.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/clear_all_annotation1.png"))); // NOI18N
        clearAllMeasurement.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/clear_all_annotation1.png"))); // NOI18N
        clearAllMeasurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllMeasurementActionPerformed(evt);
            }
        });
        jToolBar3.add(clearAllMeasurement);

        deleteMeasurement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation.png"))); // NOI18N
        deleteMeasurement.setToolTipText("Delete Measurement");
        deleteMeasurement.setActionCommand("deleteMeasurement");
        deleteMeasurement.setBorderPainted(false);
        toolsButtonGroup.add(deleteMeasurement);
        deleteMeasurement.setContentAreaFilled(false);
        deleteMeasurement.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation2.png"))); // NOI18N
        deleteMeasurement.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation2.png"))); // NOI18N
        deleteMeasurement.setFocusable(false);
        deleteMeasurement.setHorizontalTextPosition(0);
        deleteMeasurement.setPreferredSize(new java.awt.Dimension(45, 45));
        deleteMeasurement.setRolloverEnabled(true);
        deleteMeasurement.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation1.png"))); // NOI18N
        deleteMeasurement.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation1.png"))); // NOI18N
        deleteMeasurement.setVerticalTextPosition(3);
        deleteMeasurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMeasurementActionPerformed(evt);
            }
        });
        jToolBar3.add(deleteMeasurement);

        moveMeasurement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection.png"))); // NOI18N
        moveMeasurement.setToolTipText("Measurement Selection");
        moveMeasurement.setActionCommand("moveMeasurement");
        moveMeasurement.setBorderPainted(false);
        toolsButtonGroup.add(moveMeasurement);
        moveMeasurement.setContentAreaFilled(false);
        moveMeasurement.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection2.png"))); // NOI18N
        moveMeasurement.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection2.png"))); // NOI18N
        moveMeasurement.setDoubleBuffered(true);
        moveMeasurement.setFocusable(false);
        moveMeasurement.setHorizontalTextPosition(0);
        moveMeasurement.setPreferredSize(new java.awt.Dimension(45, 45));
        moveMeasurement.setRolloverEnabled(true);
        moveMeasurement.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection1.png"))); // NOI18N
        moveMeasurement.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection1.png"))); // NOI18N
        moveMeasurement.setVerticalTextPosition(3);
        moveMeasurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveMeasurementActionPerformed(evt);
            }
        });
        jToolBar3.add(moveMeasurement);

        annotationVisibility.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_overlay.png"))); // NOI18N
        annotationVisibility.setToolTipText("Annotation Overlay");
        annotationVisibility.setBorderPainted(false);
        annotationVisibility.setContentAreaFilled(false);
        annotationVisibility.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_overlay2.png"))); // NOI18N
        annotationVisibility.setFocusable(false);
        annotationVisibility.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        annotationVisibility.setPreferredSize(new java.awt.Dimension(45, 45));
        annotationVisibility.setRolloverEnabled(true);
        annotationVisibility.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_overlay1.png"))); // NOI18N
        annotationVisibility.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_overlay1.png"))); // NOI18N
        annotationVisibility.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_selection1.png"))); // NOI18N
        annotationVisibility.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        annotationVisibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationVisibilityActionPerformed(evt);
            }
        });
        jToolBar3.add(annotationVisibility);

        textOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/textoverlay.png"))); // NOI18N
        textOverlay.setToolTipText("Text Overlay");
        textOverlay.setBorderPainted(false);
        textOverlay.setContentAreaFilled(false);
        textOverlay.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/textoverlay2.png"))); // NOI18N
        textOverlay.setFocusable(false);
        textOverlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textOverlay.setPreferredSize(new java.awt.Dimension(45, 45));
        textOverlay.setRolloverEnabled(true);
        textOverlay.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/textoverlay1.png"))); // NOI18N
        textOverlay.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/textoverlay1.png"))); // NOI18N
        textOverlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        textOverlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textOverlayMousePressed(evt);
            }
        });
        jToolBar3.add(textOverlay);

        reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/reset.png"))); // NOI18N
        reset.setToolTipText("Reset");
        reset.setBorderPainted(false);
        reset.setContentAreaFilled(false);
        reset.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/reset2.png"))); // NOI18N
        reset.setFocusable(false);
        reset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reset.setPreferredSize(new java.awt.Dimension(45, 45));
        reset.setRolloverEnabled(true);
        reset.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/reset1.png"))); // NOI18N
        reset.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/reset1.png"))); // NOI18N
        reset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jToolBar3.add(reset);

        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/export_series.png"))); // NOI18N
        exportButton.setToolTipText("Export");
        exportButton.setBorderPainted(false);
        exportButton.setContentAreaFilled(false);
        exportButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/export_series2.png"))); // NOI18N
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setPreferredSize(new java.awt.Dimension(45, 45));
        exportButton.setRolloverEnabled(true);
        exportButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/export_series1.png"))); // NOI18N
        exportButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/export_series1.png"))); // NOI18N
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(exportButton);

        metaDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/metadata_viewerpage.png"))); // NOI18N
        metaDataButton.setToolTipText("Meta Data");
        metaDataButton.setBorderPainted(false);
        metaDataButton.setContentAreaFilled(false);
        metaDataButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/metadata_viewerpage2.png"))); // NOI18N
        metaDataButton.setFocusable(false);
        metaDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        metaDataButton.setPreferredSize(new java.awt.Dimension(45, 45));
        metaDataButton.setRolloverEnabled(true);
        metaDataButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/metadata_viewerpage1.png"))); // NOI18N
        metaDataButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/metadata_viewerpage1.png"))); // NOI18N
        metaDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        metaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(metaDataButton);

        stackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack.png"))); // NOI18N
        stackButton.setToolTipText("Stack");
        stackButton.setBorderPainted(false);
        toolsButtonGroup.add(stackButton);
        stackButton.setContentAreaFilled(false);
        stackButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack2.png"))); // NOI18N
        stackButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack2.png"))); // NOI18N
        stackButton.setFocusable(false);
        stackButton.setHorizontalTextPosition(0);
        stackButton.setPreferredSize(new java.awt.Dimension(45, 45));
        stackButton.setRolloverEnabled(true);
        stackButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack1.png"))); // NOI18N
        stackButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack1.png"))); // NOI18N
        stackButton.setVerticalTextPosition(3);
        stackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(stackButton);

        scoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout.png"))); // NOI18N
        scoutButton.setToolTipText("ScoutLine");
        scoutButton.setBorderPainted(false);
        toolsButtonGroup.add(scoutButton);
        scoutButton.setContentAreaFilled(false);
        scoutButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout2.png"))); // NOI18N
        scoutButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout2.png"))); // NOI18N
        scoutButton.setFocusable(false);
        scoutButton.setHorizontalTextPosition(0);
        scoutButton.setPreferredSize(new java.awt.Dimension(45, 45));
        scoutButton.setRolloverEnabled(true);
        scoutButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout1.png"))); // NOI18N
        scoutButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout1.png"))); // NOI18N
        scoutButton.setVerticalTextPosition(3);
        scoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoutButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(scoutButton);

        loopCheckbox.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        loopCheckbox.setText("Loop");
        loopCheckbox.setFocusable(false);
        loopCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loopCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loopCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopCheckboxActionPerformed(evt);
            }
        });
        loopCheckbox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                loopCheckboxStateChanged(evt);
            }
        });
        jToolBar3.add(loopCheckbox);

        loopSlider.setMaximum(9);
        loopSlider.setPaintTicks(true);
        loopSlider.setValue(6);
        loopSlider.setDoubleBuffered(true);
        loopSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                loopSliderStateChanged(evt);
            }
        });
        jToolBar3.add(loopSlider);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1151, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rightRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRotateActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.rotateRight();
            ApplicationContext.annotationPanel.doRotateRight();
        } else {
            JOptionPane.showMessageDialog(this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_rightRotateActionPerformed

    private void leftRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRotateActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.rotateLeft();
            ApplicationContext.annotationPanel.doRotateLeft();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_leftRotateActionPerformed

    private void invertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.negative();

        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_invertActionPerformed

    private void horizontalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalFlipActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.flipHorizontal();
            ApplicationContext.annotationPanel.doFlipHorizontal();
            ApplicationContext.imgPanel.repaint();
            ApplicationContext.layeredCanvas.textOverlay.repaint();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_horizontalFlipActionPerformed

    private void verticalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalFlipActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.flipVertical();
            ApplicationContext.annotationPanel.doFlipVertical();
            ApplicationContext.imgPanel.repaint();
            ApplicationContext.layeredCanvas.textOverlay.repaint();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_verticalFlipActionPerformed

    private void windowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowingActionPerformed
        setWindowingTool();
}//GEN-LAST:event_windowingActionPerformed

    private void zoominActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoominActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            resetTools();
            ApplicationContext.imgPanel.doZoomIn();
            ApplicationContext.annotationPanel.doZoomIn();
            ApplicationContext.imgPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
    }//GEN-LAST:event_zoominActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.reset();
            ApplicationContext.annotationPanel.reset();
            setWindowingTool();
            // ApplicationContext.annotationPanel.clearAllMeasurement();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_resetActionPerformed

    private void probeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probeButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.setAddLine(false);
            ApplicationContext.annotationPanel.setAddEllipse(false);
            ApplicationContext.annotationPanel.setAddRect(false);
            ApplicationContext.annotationPanel.stopPanning();
            ApplicationContext.imgPanel.probe();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_probeButtonActionPerformed

    private void panButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.setAddLine(false);
            ApplicationContext.annotationPanel.setAddEllipse(false);
            ApplicationContext.annotationPanel.setAddRect(false);
            ApplicationContext.imgPanel.doPan();
            ApplicationContext.annotationPanel.doPan();
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(panButton.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
    }//GEN-LAST:event_panButtonActionPerformed

    private void zoomoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomoutButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            resetTools();
            ApplicationContext.imgPanel.doZoomOut();
            ApplicationContext.annotationPanel.doZoomOut();
            ApplicationContext.imgPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_zoomoutButtonActionPerformed
    private void resetTools() {
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.setMouseLocX1(-1);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }

    }
    private void rulerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulerButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.stopPanning();
            ApplicationContext.imgPanel.setToolsToNull();
            ApplicationContext.annotationPanel.setMouseLocX1(-1);
            if (!ApplicationContext.annotationPanel.isAddLine()) {
                ApplicationContext.annotationPanel.setAddLine(true);
                ApplicationContext.annotationPanel.setAddEllipse(false);
                ApplicationContext.annotationPanel.setAddRect(false);
            } else {
                ApplicationContext.annotationPanel.setAddLine(false);
            }
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(rulerButton.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }

}//GEN-LAST:event_rulerButtonActionPerformed

    public void refreshToolsDisplay() {
        if (!layoutButton.isEnabled()) {
            enableAllTools();
        } else {
            setAnnotationToolsStatus();
        }
    }

    private void enableAllTools() {
        layoutButton.setEnabled(true);
        windowing.setEnabled(true);
        presetButton.setEnabled(true);
        probeButton.setEnabled(true);
        verticalFlip.setEnabled(true);
        horizontalFlip.setEnabled(true);
        leftRotate.setEnabled(true);
        rightRotate.setEnabled(true);
        zoomin.setEnabled(true);
        zoomoutButton.setEnabled(true);
        panButton.setEnabled(true);
        invert.setEnabled(true);
        annotationVisibility.setEnabled(true);
        textOverlay.setEnabled(true);
        reset.setEnabled(true);
        exportButton.setEnabled(true);
        metaDataButton.setEnabled(true);
        stackButton.setEnabled(true);
        scoutButton.setEnabled(true);
        setAnnotationToolsStatus();
    }

    public void disableAllTools() {
        layoutButton.setEnabled(false);
        windowing.setEnabled(false);
        presetButton.setEnabled(false);
        probeButton.setEnabled(false);
        verticalFlip.setEnabled(false);
        horizontalFlip.setEnabled(false);
        leftRotate.setEnabled(false);
        rightRotate.setEnabled(false);
        zoomin.setEnabled(false);
        zoomoutButton.setEnabled(false);
        panButton.setEnabled(false);
        invert.setEnabled(false);
        rulerButton.setEnabled(false);
        rectangleButton.setEnabled(false);
        ellipseButton.setEnabled(false);
        clearAllMeasurement.setEnabled(false);
        deleteMeasurement.setEnabled(false);
        moveMeasurement.setEnabled(false);
        annotationVisibility.setEnabled(false);
        textOverlay.setEnabled(false);
        reset.setEnabled(false);
        exportButton.setEnabled(false);
        metaDataButton.setEnabled(false);
        stackButton.setEnabled(false);
        scoutButton.setEnabled(false);
    }
    private void stackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.stopPanning();
            storeAnnotationHook();
            ApplicationContext.annotationPanel.setAddLine(false);
            ApplicationContext.annotationPanel.setAddEllipse(false);
            ApplicationContext.annotationPanel.setAddRect(false);
            ApplicationContext.imgPanel.doStack();
            ApplicationContext.imgPanel.repaint();
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(stackButton.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_stackButtonActionPerformed

    private void loopSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_loopSliderStateChanged

        try {
            if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
                if (loopCheckbox.isSelected()) {
                    if (timer != null) {
                        timer.cancel();
                        timer = new Timer();
                        timer.scheduleAtFixedRate(new CineTimer(), 0, (11 - loopSlider.getValue()) * 100);//

                    } else {
                        timer = new Timer();
                        timer.scheduleAtFixedRate(new CineTimer(), 0, (11 - loopSlider.getValue()) * 100);//
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }



}//GEN-LAST:event_loopSliderStateChanged

    private void loopCheckboxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_loopCheckboxStateChanged
}//GEN-LAST:event_loopCheckboxStateChanged

    private void loopCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopCheckboxActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            if (loopCheckbox.isSelected()) {
                storeAnnotationHook();
                try {
                    timer = new Timer();
                    timer.scheduleAtFixedRate(new CineTimer(), 0, (11 - loopSlider.getValue()) * 100);//
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                if (timer != null) {
                    timer.cancel();
                }
            }
        } else {
            loopCheckbox.setSelected(false);
        }
}//GEN-LAST:event_loopCheckboxActionPerformed

    public void resetCineTimer() {
        if (timer != null) {
            timer.cancel();
        }
    }
    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.stopPanning();
            ApplicationContext.imgPanel.setToolsToNull();
            ApplicationContext.annotationPanel.setMouseLocX1(-1);
            if (!ApplicationContext.annotationPanel.isAddRect()) {
                ApplicationContext.annotationPanel.setAddLine(false);
                ApplicationContext.annotationPanel.setAddEllipse(false);
                ApplicationContext.annotationPanel.setAddRect(true);
            } else {
                ApplicationContext.annotationPanel.setAddRect(false);
            }
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(rectangleButton.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }

}//GEN-LAST:event_rectangleButtonActionPerformed

    private void ellipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.stopPanning();
            ApplicationContext.imgPanel.setToolsToNull();
            ApplicationContext.annotationPanel.setMouseLocX1(-1);
            if (!ApplicationContext.annotationPanel.isAddEllipse()) {
                ApplicationContext.annotationPanel.setAddLine(false);
                ApplicationContext.annotationPanel.setAddEllipse(true);
                ApplicationContext.annotationPanel.setAddRect(false);
            } else {
                ApplicationContext.annotationPanel.setAddEllipse(false);
            }
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(ellipseButton.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_ellipseButtonActionPerformed

    private void clearAllMeasurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllMeasurementActionPerformed
        if (ApplicationContext.annotationPanel != null) {
            ApplicationContext.annotationPanel.clearAllMeasurement();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
    }//GEN-LAST:event_clearAllMeasurementActionPerformed

    private void annotationVisibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationVisibilityActionPerformed
        if (ApplicationContext.annotationPanel != null) {
            ApplicationContext.annotationPanel.toggleAnnotation();
            setAnnotationToolsStatus();
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_annotationVisibilityActionPerformed

    public void showAnnotationTools() {
        rulerButton.setEnabled(true);
        rectangleButton.setEnabled(true);
        ellipseButton.setEnabled(true);
        clearAllMeasurement.setEnabled(true);
        deleteMeasurement.setEnabled(true);
        moveMeasurement.setEnabled(true);
    }

    public void hideAnnotationTools() {
        rulerButton.setEnabled(false);
        rectangleButton.setEnabled(false);
        ellipseButton.setEnabled(false);
        clearAllMeasurement.setEnabled(false);
        deleteMeasurement.setEnabled(false);
        moveMeasurement.setEnabled(false);
        String actionCommand = toolsButtonGroup.getSelection().getActionCommand();
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            if (actionCommand != null) {
                if (actionCommand.equalsIgnoreCase("ruler") || actionCommand.equalsIgnoreCase("rectangle") || actionCommand.equalsIgnoreCase("ellipse") || actionCommand.equalsIgnoreCase("deleteMeasurement") || actionCommand.equalsIgnoreCase("moveMeasurement")) {
                    ApplicationContext.annotationPanel.setAddLine(false);
                    ApplicationContext.annotationPanel.setAddEllipse(false);
                    ApplicationContext.annotationPanel.setAddRect(false);
                    ApplicationContext.annotationPanel.stopPanning();
                    ApplicationContext.imgPanel.doWindowing();
                    toolsButtonGroup.clearSelection();
                    toolsButtonGroup.setSelected(windowing.getModel(), true);
                }
            }
        }
    }

    public void setWindowingTool() {
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.annotationPanel.setAddLine(false);
            ApplicationContext.annotationPanel.setAddEllipse(false);
            ApplicationContext.annotationPanel.setAddRect(false);
            ApplicationContext.annotationPanel.stopPanning();
            ApplicationContext.imgPanel.doWindowing();
        }
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(windowing.getModel(), true);
    }

    public void setAnnotationToolsStatus() {
        if (ApplicationContext.annotationPanel.isShowAnnotation()) {
            ApplicationContext.imgView.getImageToolbar().showAnnotationTools();
        } else {
            ApplicationContext.imgView.getImageToolbar().hideAnnotationTools();
        }
    }

    private void deleteMeasurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMeasurementActionPerformed
        if (ApplicationContext.annotationPanel != null) {
            ApplicationContext.annotationPanel.doDeleteMeasurement();
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(deleteMeasurement.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_deleteMeasurementActionPerformed

    private void moveMeasurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveMeasurementActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ApplicationContext.imgPanel.tool = "";
            ApplicationContext.annotationPanel.tool = "";
            ApplicationContext.annotationPanel.doMoveMeasurement();
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(moveMeasurement.getModel(), true);
        } else {
            JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
        }
}//GEN-LAST:event_moveMeasurementActionPerformed

    private void layoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_layoutButtonMouseClicked
        if(layoutButton.isEnabled())
        {
        int x = evt.getX();
        int y = evt.getY();
        long z = evt.getWhen();
        int mo = evt.getModifiers();
        int cc = evt.getClickCount();
        layoutButton.dispatchEvent(new java.awt.event.MouseEvent(this.layoutButton, MouseEvent.MOUSE_CLICKED, z, mo, x, y, cc, true));
        storeAnnotationHook();
        }
}//GEN-LAST:event_layoutButtonMouseClicked

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ExportDialog jpegConvertor = new ExportDialog(ApplicationContext.imgView, true);
            Display.alignScreen(jpegConvertor);
            jpegConvertor.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Tile selected is not valid for this process");
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void presetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_presetButtonMouseClicked
       if(presetButton.isEnabled()){
        int x = evt.getX();
        int y = evt.getY();
        long z = evt.getWhen();
        int mo = evt.getModifiers();
        int cc = evt.getClickCount();
        designPresetContext();
        presetButton.dispatchEvent(new java.awt.event.MouseEvent(this.presetButton, MouseEvent.MOUSE_CLICKED, z, mo, x, y, cc, true));
       }
    }//GEN-LAST:event_presetButtonMouseClicked

    private void metaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataButtonActionPerformed
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ArrayList<DicomTags> dcmTags = DicomTagsReader.getTags(new File(ApplicationContext.imgPanel.getDicomFileUrl()));
            DicomTagsViewer dicomTagsViewer = new DicomTagsViewer(dcmTags);
            Display.alignScreen(dicomTagsViewer);
            dicomTagsViewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Tile selected is not valid for this process");
        }
    }//GEN-LAST:event_metaDataButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        PresetModel presetModel = ApplicationContext.databaseRef.getPreset((String) ((JComboBox) evt.getSource()).getSelectedItem());
        if (presetModel.getPresetName() != null) {
            ApplicationContext.imgPanel.windowChanged(Integer.parseInt(presetModel.getWindowLevel()), Integer.parseInt(presetModel.getWindowWidth()));
        } else {
            ApplicationContext.imgPanel.resetWindowing();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void scoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoutButtonActionPerformed
        if (!ApplicationContext.imgPanel.isDisplayScout()) {
            ApplicationContext.imgPanel.setDisplayScout(true);
            LocalizerDelegate localizer = new LocalizerDelegate();
            localizer.drawScoutLineWithBorder();
        } else {
            ApplicationContext.imgPanel.setDisplayScout(false);
            LocalizerDelegate.hideScoutLine();
        }
    }//GEN-LAST:event_scoutButtonActionPerformed

    private void textOverlayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textOverlayMousePressed
          if(textOverlay.isEnabled())
        {
        int x = evt.getX();
        int y = evt.getY();
        long z = evt.getWhen();
        int mo = evt.getModifiers();
        int cc = evt.getClickCount();
        textOverlay.dispatchEvent(new java.awt.event.MouseEvent(this.textOverlay, MouseEvent.MOUSE_CLICKED, z, mo, x, y, cc, true));
          }
    }//GEN-LAST:event_textOverlayMousePressed
    private void designPresetContext() {
        if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
            ArrayList presetList = ApplicationContext.databaseRef.getPresetValueForModality(ApplicationContext.imgPanel.getModality());
            jPopupMenu2.removeAll();
            JMenuItem menu = new JMenuItem("PRESETS") {

                @Override
                protected void paintComponent(Graphics grphcs) {
                    grphcs.setFont(new Font("Arial", Font.BOLD, 12));
                    grphcs.setColor(Color.blue);
                    grphcs.drawString(this.getText(), 32, 14);
                }
            };
            menu.setEnabled(false);
            jPopupMenu2.add(menu);
            jPopupMenu2.addSeparator();
            for (int i = 0; i < presetList.size(); i++) {
                final PresetModel presetModel = (PresetModel) presetList.get(i);
                if (!presetModel.getPresetName().equalsIgnoreCase("PRESETNAME")) {
                    JMenuItem menu1 = new JMenuItem(presetModel.getPresetName());
                    jPopupMenu2.add(menu1);
                    menu1.addActionListener(new ActionListener() {

                        public void actionPerformed(ActionEvent e) {
                            ApplicationContext.imgPanel.windowChanged(Integer.parseInt(presetModel.getWindowLevel()), Integer.parseInt(presetModel.getWindowWidth()));

                        }
                    });
                }
            }
            this.setComponentPopupMenu(jPopupMenu1);
        } else {
            JOptionPane.showMessageDialog(this, "Tile selected is not valid for this process");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annotationVisibility;
    private javax.swing.JButton clearAllMeasurement;
    private javax.swing.JButton deleteMeasurement;
    private javax.swing.JButton ellipseButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton horizontalFlip;
    private javax.swing.JButton invert;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JButton layoutButton;
    private javax.swing.JButton leftRotate;
    private javax.swing.JCheckBox loopCheckbox;
    private javax.swing.JSlider loopSlider;
    private javax.swing.JButton metaDataButton;
    private javax.swing.JButton moveMeasurement;
    private javax.swing.JButton panButton;
    private javax.swing.JButton presetButton;
    private javax.swing.JButton probeButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton reset;
    private javax.swing.JButton rightRotate;
    private javax.swing.JButton rulerButton;
    private javax.swing.JButton scoutButton;
    private javax.swing.JButton stackButton;
    private javax.swing.JButton textOverlay;
    private javax.swing.ButtonGroup toolsButtonGroup;
    private javax.swing.JButton verticalFlip;
    private javax.swing.JButton windowing;
    private javax.swing.JButton zoomin;
    private javax.swing.JButton zoomoutButton;
    // End of variables declaration//GEN-END:variables

    public void designPopup() {
        JPanel jp = new JPanel(new GridLayout(3, 3));
        JButton jb1 = new JButton("1x1");
        JButton jb2 = new JButton("1x2");
        JButton jb3 = new JButton("1x3");
        JButton jb4 = new JButton("2x1");
        JButton jb5 = new JButton("2x2");
        JButton jb6 = new JButton("2x3");
        JButton jb7 = new JButton("3x1");
        JButton jb8 = new JButton("3x2");
        JButton jb9 = new JButton("3x3");
        jp.add(jb1);
        jp.add(jb2);
        jp.add(jb3);
        jp.add(jb4);
        jp.add(jb5);
        jp.add(jb6);
        jp.add(jb7);
        jp.add(jb8);
        jp.add(jb9);
        jp.setBounds(0, 0, 200, 400);
        jPopupMenu1.add(jp);

        jb1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb1ActionPerformed(evt);
            }
        });
        jb2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb2ActionPerformed(evt);
            }
        });
        jb3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb3ActionPerformed(evt);
            }
        });
        jb4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb4ActionPerformed(evt);
            }
        });
        jb5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb5ActionPerformed(evt);
            }
        });
        jb6.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb6ActionPerformed(evt);
            }
        });
        jb7.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb7ActionPerformed(evt);
            }
        });
        jb8.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb8ActionPerformed(evt);
            }
        });
        jb9.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb9ActionPerformed(evt);
            }
        });

    }

    public void jb1ActionPerformed(ActionEvent e) {
        changeLayout(1, 1);

    }

    public void storeAnnotationHook() {
        for (int i = 0; i < ApplicationContext.imgView.jTabbedPane1.getComponentCount(); i++) {
            for (int j = 0; j < ((JPanel) ApplicationContext.imgView.jTabbedPane1.getComponent(i)).getComponentCount(); j++) {
                try {
                    if (((JPanel) ApplicationContext.imgView.jTabbedPane1.getComponent(i)).getComponent(j) instanceof LayeredCanvas) {
                        LayeredCanvas tempCanvas = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getComponent(i)).getComponent(j));
                        if (tempCanvas.imgpanel != null) {
                            tempCanvas.imgpanel.storeAnnotation();
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void removeAllPanelsFromSelectedTab() {
        for (int i = ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponentCount() - 1; i >= 0; i--) {
            ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).remove(i);
        }
    }

    public void changeLayout(int row, int col) {
        String siuid;
        LayeredCanvas tempCanvas = null;
        if (((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(0) instanceof LayeredCanvas) {
            tempCanvas = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(0));
            siuid = tempCanvas.imgpanel.getStudyUID();
        } else {
            tempCanvas = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(1));
            siuid = tempCanvas.imgpanel.getStudyUID();
        }
        GridLayout g = new GridLayout(row, col);
        ArrayList<Instance> instanceArray = getInstanceArray();
        ArrayList tempRef = ApplicationContext.databaseRef.getUrlBasedOnStudyIUID(siuid);
        for (int i = ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponentCount() - 1; i >= 0; i--) {
            ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).remove(i);

        }
        ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).setLayout(g);
        for (int i = 0; i < (row * col); i++) {
            if (i < tempRef.size()) {
                File file = (File) tempRef.get(i);
                LayeredCanvas canvas = new LayeredCanvas(file.getAbsolutePath());
                ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).add(canvas, i);
                for (int x = 0; x < instanceArray.size(); x++) {
                    if (file.getAbsolutePath().equalsIgnoreCase(new DestinationFinder().getFileDestination(instanceArray.get(x).getFilepath()))) {
                        LayeredCanvas tempCanvas1 = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(i));

                        if (ApplicationContext.databaseRef.getMultiframeStatus() && tempCanvas1.imgpanel.isMulitiFrame()) {
                            if (instanceArray != null && instanceArray.get(x) != null && instanceArray.get(x).getAnnotations() != null && instanceArray.get(x).getAnnotations().get(0) != null) {
                                tempCanvas1.annotationPanel.setAnnotation(instanceArray.get(x).getAnnotations().get(0));
                            }
                        } else {
                            if (instanceArray != null && instanceArray.get(x) != null && instanceArray.get(x).getAnnotation() != null) {
                                tempCanvas1.annotationPanel.setAnnotation(instanceArray.get(x).getAnnotation());
                            }
                        }
                        break;
                    }
                }

            } else {
                LayeredCanvas j = new LayeredCanvas();
                j.setStudyUID(siuid);
                ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).add(j, i);
            }
        }
        ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).revalidate();
        ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).repaint();
        ApplicationContext.imgPanel = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(0)).imgpanel;
        ApplicationContext.annotationPanel = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(0)).annotationPanel;
        ApplicationContext.layeredCanvas = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(0));
        hideLayoutSelectionPopup();
        ((Canvas) ApplicationContext.imgPanel.getCanvas()).setSelection();
        //storeAnnotationHook();
    }

    private void hideLayoutSelectionPopup() {
        jPopupMenu1.setVisible(false);
    }

    public ArrayList getInstanceArray() {
        ArrayList<Instance> instanceArray = new ArrayList<Instance>();
        String studyUID = "";
        if (ApplicationContext.imgPanel != null) {
            studyUID = ApplicationContext.imgPanel.getStudyUID();
        } else {
            studyUID = ApplicationContext.layeredCanvas.getStudyUID();
        }
        for (Study study : MainScreen.studyList) {
            if (study.getStudyInstanceUID().equalsIgnoreCase(studyUID)) {
                ArrayList<Series> seriesList = (ArrayList<Series>) study.getSeriesList();
                for (int i = 0; i < seriesList.size(); i++) {
                    Series series = seriesList.get(i);
                    Instance instance = series.getImageList().get(0);
                    instanceArray.add(instance);
                    //   this.getCanvas().getLayeredCanvas().annotationPanel.setAnnotation(instance.getAnnotation());
                }
            }
        }
        return instanceArray;
    }

    public void jb2ActionPerformed(ActionEvent e) {
        changeLayout(1, 2);
    }

    public void jb3ActionPerformed(ActionEvent e) {
        changeLayout(1, 3);
    }

    public void jb4ActionPerformed(ActionEvent e) {
        changeLayout(2, 1);
    }

    public void jb5ActionPerformed(ActionEvent e) {
        changeLayout(2, 2);
    }

    public void jb6ActionPerformed(ActionEvent e) {
        changeLayout(2, 3);
    }

    public void jb7ActionPerformed(ActionEvent e) {
        changeLayout(3, 1);
    }

    public void jb8ActionPerformed(ActionEvent e) {
        changeLayout(3, 2);
    }

    public void jb9ActionPerformed(ActionEvent e) {
        changeLayout(3, 3);
    }

    public void textOverlayContext() {

        JMenuItem currentFrame = new JMenuItem("Selected");
        JMenuItem allFrame = new JMenuItem("All");
        jPopupMenu3.add(currentFrame);
        jPopupMenu3.add(allFrame);
        textOverlay.setComponentPopupMenu(jPopupMenu3);
        allFrame.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                LayeredCanvas tempCanvas = null;
                int childCount = ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponentCount();
                for (int i = 0; i < childCount; i++) {
                    if (((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(i) instanceof LayeredCanvas) {
                        tempCanvas = ((LayeredCanvas) ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getComponent(i));
                        if (tempCanvas.textOverlay != null) {
                            tempCanvas.textOverlay.toggleTextOverlay();
                        }
                    }
                }
            }
        });
        currentFrame.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (ApplicationContext.annotationPanel != null && ApplicationContext.imgPanel != null) {
                    ApplicationContext.layeredCanvas.textOverlay.toggleTextOverlay();

                } else {
                    JOptionPane.showMessageDialog(ImageToolbar.this, "Tile selected is not valid for this process");
                }
            }
        });
    }
}
