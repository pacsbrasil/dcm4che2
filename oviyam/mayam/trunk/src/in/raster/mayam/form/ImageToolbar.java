/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * The Initial Developer of the Original Code is
 * Raster Images
 * Portions created by the Initial Developer are Copyright (C) 2009-2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Babu Hussain A
 * Devishree V
 * Meer Asgar Hussain B
 * Prakash J
 * Suresh V
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.models.PresetModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.*;

/**
 *
 * @author BabuHussain
 * @version 0.5
 *
 */
public class ImageToolbar extends javax.swing.JPanel {

    LayoutPopupDesign layoutPopupDesign = null;
    public boolean isImageLayout = false;
    KeyEventDispatcher keyEventDispatcher = null;
    private javax.swing.Timer presetTimer = null;
    boolean mouseReleased = false;
    JMenuItem[] menuItems = null;
    private ViewerJPanel parent = null;

    /**
     * Creates new form ImageToolbar1
     */
    public ImageToolbar(ViewerJPanel parent) {
        initComponents();
        loopSlider.setUI(new SliderUI());
        this.parent = parent;
        layoutButton.setArrowPopupMenu(jPopupMenu1);
        layoutPopupDesign = new LayoutPopupDesign(jPopupMenu1, this);
        applyLocale();
    }

    public void changeImageLayout(int row, int col) {
        ((ViewerJPanel) getParent()).changeImageLayout(row, col);
        jPopupMenu1.setVisible(false);
        isImageLayout = false;
        layoutPopupDesign.resetPopupMenu();
        if (synchronizeButton.isSelected()) {
            parent.doSynchronize();
        }
    }

    public void changeTileLayout(int row, int col) {
        jPopupMenu1.setVisible(false);
        parent.changeTileLayout(row, col);
        isImageLayout = true;
        scoutButton.setSelected(false);
        layoutPopupDesign.resetPopupMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolsButtonGroup = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        layoutButton = new in.raster.mayam.form.JComboButton();
        windowing = new javax.swing.JButton();
        probeButton = new javax.swing.JButton();
        verticalFlip = new javax.swing.JButton();
        horizontalFlip = new javax.swing.JButton();
        leftRotate = new javax.swing.JButton();
        rightRotate = new javax.swing.JButton();
        zoomButton = new javax.swing.JButton();
        panButton = new javax.swing.JButton();
        invert = new javax.swing.JButton();
        annotationButton = new javax.swing.JButton();
        deleteMeasurement = new javax.swing.JButton();
        annotationVisibility = new javax.swing.JButton();
        textOverlay = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        metaDataButton = new javax.swing.JButton();
        stackButton = new javax.swing.JButton();
        scoutButton = new javax.swing.JButton();
        cube3DButton = new javax.swing.JButton();
        synchronizeButton = new javax.swing.JButton();
        loopCheckbox = new javax.swing.JCheckBox();
        loopSlider = new javax.swing.JSlider();

        setBackground(new java.awt.Color(102, 102, 102));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        layoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/layout.png"))); // NOI18N
        layoutButton.setText("");
        layoutButton.setFocusable(false);
        layoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        layoutButton.setPreferredSize(new java.awt.Dimension(45, 45));
        layoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(layoutButton);

        windowing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/windowingdropdown.png"))); // NOI18N
        toolsButtonGroup.add(windowing);
        windowing.setFocusable(false);
        windowing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        windowing.setPreferredSize(new java.awt.Dimension(45, 45));
        windowing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        windowing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                windowingMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                windowingMouseReleased(evt);
            }
        });
        jToolBar1.add(windowing);

        probeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/probe.png"))); // NOI18N
        toolsButtonGroup.add(probeButton);
        probeButton.setFocusable(false);
        probeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        probeButton.setPreferredSize(new java.awt.Dimension(45, 45));
        probeButton.setRequestFocusEnabled(false);
        probeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        probeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(probeButton);

        verticalFlip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_vertical.png"))); // NOI18N
        toolsButtonGroup.add(verticalFlip);
        verticalFlip.setFocusable(false);
        verticalFlip.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        verticalFlip.setPreferredSize(new java.awt.Dimension(45, 45));
        verticalFlip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        verticalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalFlipActionPerformed(evt);
            }
        });
        jToolBar1.add(verticalFlip);

        horizontalFlip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/flip_horizontal.png"))); // NOI18N
        toolsButtonGroup.add(horizontalFlip);
        horizontalFlip.setFocusable(false);
        horizontalFlip.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        horizontalFlip.setPreferredSize(new java.awt.Dimension(45, 45));
        horizontalFlip.setRequestFocusEnabled(false);
        horizontalFlip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        horizontalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalFlipActionPerformed(evt);
            }
        });
        jToolBar1.add(horizontalFlip);

        leftRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_left.png"))); // NOI18N
        toolsButtonGroup.add(leftRotate);
        leftRotate.setFocusable(false);
        leftRotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftRotate.setPreferredSize(new java.awt.Dimension(45, 45));
        leftRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRotateActionPerformed(evt);
            }
        });
        jToolBar1.add(leftRotate);

        rightRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rotate_right.png"))); // NOI18N
        toolsButtonGroup.add(rightRotate);
        rightRotate.setFocusable(false);
        rightRotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightRotate.setPreferredSize(new java.awt.Dimension(45, 45));
        rightRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRotateActionPerformed(evt);
            }
        });
        jToolBar1.add(rightRotate);

        zoomButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/zoom.png"))); // NOI18N
        toolsButtonGroup.add(zoomButton);
        zoomButton.setFocusable(false);
        zoomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomButton.setPreferredSize(new java.awt.Dimension(45, 45));
        zoomButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(zoomButton);

        panButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pan.png"))); // NOI18N
        toolsButtonGroup.add(panButton);
        panButton.setFocusable(false);
        panButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panButton.setPreferredSize(new java.awt.Dimension(45, 45));
        panButton.setRequestFocusEnabled(false);
        panButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        panButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(panButton);

        invert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/invert.png"))); // NOI18N
        invert.setFocusable(false);
        invert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        invert.setPreferredSize(new java.awt.Dimension(45, 45));
        invert.setRequestFocusEnabled(false);
        invert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        invert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertActionPerformed(evt);
            }
        });
        jToolBar1.add(invert);

        annotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler.png"))); // NOI18N
        annotationButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.rulerButton.toolTipText")); // NOI18N
        annotationButton.setActionCommand("ruler");
        toolsButtonGroup.add(annotationButton);
        annotationButton.setFocusable(false);
        annotationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        annotationButton.setPreferredSize(new java.awt.Dimension(45, 45));
        annotationButton.setRequestFocusEnabled(false);
        annotationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        annotationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                annotationMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                annotationMouseReleased(evt);
            }
        });
        jToolBar1.add(annotationButton);

        deleteMeasurement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/delete_annotation.png"))); // NOI18N
        deleteMeasurement.setActionCommand("deleteMeasurement");
        toolsButtonGroup.add(deleteMeasurement);
        deleteMeasurement.setFocusable(false);
        deleteMeasurement.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteMeasurement.setPreferredSize(new java.awt.Dimension(45, 45));
        deleteMeasurement.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteMeasurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMeasurementActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteMeasurement);

        annotationVisibility.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/annotation_overlay.png"))); // NOI18N
        toolsButtonGroup.add(annotationVisibility);
        annotationVisibility.setFocusable(false);
        annotationVisibility.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        annotationVisibility.setPreferredSize(new java.awt.Dimension(45, 45));
        annotationVisibility.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        annotationVisibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationVisibilityActionPerformed(evt);
            }
        });
        jToolBar1.add(annotationVisibility);

        textOverlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/textoverlay.png"))); // NOI18N
        toolsButtonGroup.add(textOverlay);
        textOverlay.setFocusable(false);
        textOverlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textOverlay.setPreferredSize(new java.awt.Dimension(45, 45));
        textOverlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        textOverlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textOverlayMousePressed(evt);
            }
        });
        jToolBar1.add(textOverlay);

        reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/reset.png"))); // NOI18N
        toolsButtonGroup.add(reset);
        reset.setFocusable(false);
        reset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reset.setPreferredSize(new java.awt.Dimension(45, 45));
        reset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jToolBar1.add(reset);

        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/export_series.png"))); // NOI18N
        toolsButtonGroup.add(exportButton);
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setPreferredSize(new java.awt.Dimension(45, 45));
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exportButton);

        metaDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/metadata_viewerpage.png"))); // NOI18N
        toolsButtonGroup.add(metaDataButton);
        metaDataButton.setFocusable(false);
        metaDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        metaDataButton.setPreferredSize(new java.awt.Dimension(45, 45));
        metaDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        metaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(metaDataButton);

        stackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stack.png"))); // NOI18N
        toolsButtonGroup.add(stackButton);
        stackButton.setFocusable(false);
        stackButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stackButton.setPreferredSize(new java.awt.Dimension(45, 45));
        stackButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(stackButton);

        scoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/scout.png"))); // NOI18N
        scoutButton.setFocusable(false);
        scoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        scoutButton.setPreferredSize(new java.awt.Dimension(45, 45));
        scoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        scoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoutButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(scoutButton);

        cube3DButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Cube3D.png"))); // NOI18N
        toolsButtonGroup.add(cube3DButton);
        cube3DButton.setComponentPopupMenu(jPopupMenu4);
        cube3DButton.setEnabled(false);
        cube3DButton.setFocusable(false);
        cube3DButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cube3DButton.setPreferredSize(new java.awt.Dimension(45, 45));
        cube3DButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cube3DButton);

        synchronizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Link.png"))); // NOI18N
        synchronizeButton.setFocusable(false);
        synchronizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        synchronizeButton.setPreferredSize(new java.awt.Dimension(45, 45));
        synchronizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        synchronizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(synchronizeButton);

        loopCheckbox.setText("Loop");
        loopCheckbox.setToolTipText("Cine Loop");
        loopCheckbox.setFocusable(false);
        loopCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loopCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loopCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopCheckboxActionPerformed(evt);
            }
        });
        jToolBar1.add(loopCheckbox);

        loopSlider.setMaximum(9);
        loopSlider.setPaintTicks(true);
        loopSlider.setValue(6);
        loopSlider.setDoubleBuffered(true);
        jToolBar1.add(loopSlider);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1177, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void probeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probeButtonActionPerformed
        parent.disableAnnotations();
        toolsButtonGroup.clearSelection();
        probeButton.setSelected(parent.doProbe());
    }//GEN-LAST:event_probeButtonActionPerformed

    private void verticalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalFlipActionPerformed
        parent.doVerticalFlip();
    }//GEN-LAST:event_verticalFlipActionPerformed

    private void horizontalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalFlipActionPerformed
        parent.doHorizontalFlip();
    }//GEN-LAST:event_horizontalFlipActionPerformed

    private void leftRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRotateActionPerformed
        parent.doRotateLeft();
    }//GEN-LAST:event_leftRotateActionPerformed

    private void rightRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRotateActionPerformed
        parent.doRotateRight();
    }//GEN-LAST:event_rightRotateActionPerformed

    private void zoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomButtonActionPerformed
        parent.disableAnnotations();
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(zoomButton.getModel(), parent.doZoom());
    }//GEN-LAST:event_zoomButtonActionPerformed

    private void panButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panButtonActionPerformed
        doPan();
    }//GEN-LAST:event_panButtonActionPerformed

    private void invertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertActionPerformed
        toolsButtonGroup.clearSelection();
        invert.setSelected(parent.doInvert());
    }//GEN-LAST:event_invertActionPerformed

    private void deleteMeasurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMeasurementActionPerformed
        parent.disableAnnotations();
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(deleteMeasurement.getModel(), parent.dodeleteMeasurements());
    }//GEN-LAST:event_deleteMeasurementActionPerformed

    private void annotationVisibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationVisibilityActionPerformed
        parent.toggleAnnotations();
    }//GEN-LAST:event_annotationVisibilityActionPerformed

    private void textOverlayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textOverlayMousePressed
        parent.toggleTextOverlay();
    }//GEN-LAST:event_textOverlayMousePressed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        doReset();
    }//GEN-LAST:event_resetActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        parent.doExport();
    }//GEN-LAST:event_exportButtonActionPerformed

    private void metaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataButtonActionPerformed
        parent.showMetaData();
    }//GEN-LAST:event_metaDataButtonActionPerformed

    private void stackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackButtonActionPerformed
        doStack();
    }//GEN-LAST:event_stackButtonActionPerformed

    private void scoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoutButtonActionPerformed
        scoutButton.setSelected(parent.doScout());
    }//GEN-LAST:event_scoutButtonActionPerformed

    private void synchronizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeButtonActionPerformed
        synchronizeButton.setSelected(!synchronizeButton.isSelected() ? true : false);
        parent.doSynchronize();
    }//GEN-LAST:event_synchronizeButtonActionPerformed

    private void loopCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopCheckboxActionPerformed
        doLoop();
    }//GEN-LAST:event_loopCheckboxActionPerformed

    private void windowingMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowingMousePressed
        // TODO add your handling code here:        
        if (windowing.isEnabled()) {
            if (SwingUtilities.isRightMouseButton(evt)) {
                jPopupMenu2.show(windowing, 10, 10);
            } else {
                mouseReleased = false;
                presetTimer = new javax.swing.Timer(1000, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (!mouseReleased) {
                            jPopupMenu2.show(windowing, 25, 25);
                        }
                        presetTimer.stop();
                        presetTimer = null;
                    }
                });
                presetTimer.setRepeats(false);
                presetTimer.start();
            }
        }
    }//GEN-LAST:event_windowingMousePressed

    private void windowingMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_windowingMouseReleased
        // TODO add your handling code here:
        mouseReleased = true;
        setWindowingTool();
    }//GEN-LAST:event_windowingMouseReleased

    private void annotationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_annotationMousePressed
        // TODO add your handling code here:
        if (annotationButton.isEnabled()) {
            if (SwingUtilities.isRightMouseButton(evt)) {
                jPopupMenu3.show(annotationButton, 10, 10);
            } else {
                mouseReleased = false;
                presetTimer = new javax.swing.Timer(1000, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (!mouseReleased) {
                            jPopupMenu3.show(annotationButton, 25, 25);
                        }
                        presetTimer.stop();
                        presetTimer = null;
                    }
                });
                presetTimer.setRepeats(false);
                presetTimer.start();
            }
        }
    }//GEN-LAST:event_annotationMousePressed

    private void annotationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_annotationMouseReleased
        // TODO add your handling code here:
        mouseReleased = true;
        doAnnotation();
    }//GEN-LAST:event_annotationMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annotationButton;
    private javax.swing.JButton annotationVisibility;
    private javax.swing.JButton cube3DButton;
    private javax.swing.JButton deleteMeasurement;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton horizontalFlip;
    private javax.swing.JButton invert;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JToolBar jToolBar1;
    private in.raster.mayam.form.JComboButton layoutButton;
    private javax.swing.JButton leftRotate;
    private javax.swing.JCheckBox loopCheckbox;
    private javax.swing.JSlider loopSlider;
    private javax.swing.JButton metaDataButton;
    private javax.swing.JButton panButton;
    private javax.swing.JButton probeButton;
    private javax.swing.JButton reset;
    private javax.swing.JButton rightRotate;
    private javax.swing.JButton scoutButton;
    private javax.swing.JButton stackButton;
    private javax.swing.JButton synchronizeButton;
    private javax.swing.JButton textOverlay;
    private javax.swing.ButtonGroup toolsButtonGroup;
    private javax.swing.JButton verticalFlip;
    private javax.swing.JButton windowing;
    private javax.swing.JButton zoomButton;
    // End of variables declaration//GEN-END:variables

    public void setWindowingTool() {
        parent.disableAnnotations();
        parent.doWindowing();
    }

    public void doPan() {
        parent.disableAnnotations();
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(panButton.getModel(), parent.doPan());
    }

    public void doAnnotation() {
        if (toolsButtonGroup.isSelected(annotationButton.getModel())) {
            toolsButtonGroup.clearSelection();
            parent.disableAnnotations();
        } else {
            toolsButtonGroup.clearSelection();
            parent.doAnnotation();
            toolsButtonGroup.setSelected(annotationButton.getModel(), true);
            handleAnnotations(annotationButton.getToolTipText());
        }
    }

    public void doRuler(boolean addArrow) {
        parent.doRuler(addArrow);
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(annotationButton.getModel(), true);
    }

    public void doRectangle() {
        toolsButtonGroup.clearSelection();
        parent.doRectangle();
        toolsButtonGroup.setSelected(annotationButton.getModel(), true);
    }

    public void doEllipse() {
        toolsButtonGroup.clearSelection();
        parent.doEllipse();
        toolsButtonGroup.setSelected(annotationButton.getModel(), true);
    }

    public void doReset() {
        loopCheckbox.setSelected(false);
        doLoop();
        parent.doReset();
    }

    public void doWindowing() {
        toolsButtonGroup.clearSelection();
    }

    public void doWindowing(boolean selected) {
        toolsButtonGroup.clearSelection();
        toolsButtonGroup.setSelected(windowing.getModel(), selected);
    }

    public void doStack() {
        toolsButtonGroup.setSelected(stackButton.getModel(), parent.doStack());
    }

    private void enableAllTools() {
        layoutButton.setEnabled(true);
        windowing.setEnabled(true);
        probeButton.setEnabled(true);
        verticalFlip.setEnabled(true);
        horizontalFlip.setEnabled(true);
        leftRotate.setEnabled(true);
        rightRotate.setEnabled(true);
        zoomButton.setEnabled(true);
        panButton.setEnabled(true);
        invert.setEnabled(true);
        textOverlay.setEnabled(true);
        reset.setEnabled(true);
        exportButton.setEnabled(true);
        metaDataButton.setEnabled(true);
        stackButton.setEnabled(true);
        scoutButton.setEnabled(true);
        cube3DButton.setEnabled(true);
        synchronizeButton.setEnabled(true);
        setAnnotationToolsStatus(parent.isHideAnnotations());
        loopSlider.setEnabled(true);
        loopCheckbox.setEnabled(true);
    }

    public void disableAllTools() {
        layoutButton.setEnabled(false);
        windowing.setEnabled(false);
        probeButton.setEnabled(false);
        verticalFlip.setEnabled(false);
        horizontalFlip.setEnabled(false);
        leftRotate.setEnabled(false);
        rightRotate.setEnabled(false);
        zoomButton.setEnabled(false);
        panButton.setEnabled(false);
        invert.setEnabled(false);
        annotationButton.setEnabled(false);
        deleteMeasurement.setEnabled(false);
        annotationVisibility.setEnabled(false);
        textOverlay.setEnabled(false);
        reset.setEnabled(false);
        exportButton.setEnabled(false);
        metaDataButton.setEnabled(false);
        stackButton.setEnabled(false);
        scoutButton.setEnabled(false);
        cube3DButton.setEnabled(false);
        synchronizeButton.setEnabled(false);
        loopCheckbox.setEnabled(false);
        loopSlider.setEnabled(false);
    }

    public void showAnnotationTools() {
        annotationButton.setEnabled(true);
        deleteMeasurement.setEnabled(true);
    }

    public void hideAnnotationTools() {
        annotationButton.setEnabled(false);
        deleteMeasurement.setEnabled(false);
        String actionCmd = null;
        if (toolsButtonGroup != null && toolsButtonGroup.getSelection() != null) {
            actionCmd = toolsButtonGroup.getSelection().getActionCommand();
        }
        if (actionCmd != null && (actionCmd.equalsIgnoreCase("ruler") || actionCmd.equalsIgnoreCase("arrow") || actionCmd.equalsIgnoreCase("ellipse") || actionCmd.equalsIgnoreCase("rectangle") || actionCmd.equalsIgnoreCase("deleteMeasurement") || actionCmd.equalsIgnoreCase("moveMeasurement"))) {
            parent.stopAnnotation();
            toolsButtonGroup.clearSelection();
            toolsButtonGroup.setSelected(windowing.getModel(), true);
        }
    }

    public LayoutPopupDesign getImageLayoutPopupDesign() {
        return layoutPopupDesign;
    }

    public void applyLocale() {
        layoutButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.imageLayout.toolTipText"));
        windowing.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.windowingButton.toolTipText"));
        probeButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.probeButton.toolTipText"));
        verticalFlip.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.verticalFlipButton.toolTipText"));
        horizontalFlip.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.horizontalFlipButton.toolTipText"));
        leftRotate.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.leftRotateButton.toolTipText"));
        rightRotate.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.rightRotateButton.toolTipText"));
        zoomButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.zoomInButton.toolTipText"));
        panButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.panButton.toolTipText"));
        invert.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.invertButton.toolTipText"));
        annotationButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.rulerButton.toolTipText"));
        deleteMeasurement.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.deleteSelectedMeasurementButton.toolTipText"));
        annotationVisibility.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.annotaionOverlayButton.toolTipText"));
        textOverlay.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.textOverlayButton.toolTipText"));
        reset.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.resetButton.toolTipText"));
        exportButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.exportButton.toolTipText"));
        metaDataButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.metaDataButton.toolTipText"));
        stackButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.stackButton.toolTipText"));
        scoutButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.scoutButton.toolTipText"));
        cube3DButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.3DButton.toolTipText"));
        synchronizeButton.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.synchronizeButton.toolTipText"));
        loopCheckbox.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.loopChk.toolTipText"));
        layoutPopupDesign.applyLocaleChange();
        repaint();
    }

    public void deselectTools() {
        scoutButton.setSelected(false);
        synchronizeButton.setSelected(false);
        invert.setSelected(false);
        probeButton.setSelected(false);
        stackButton.setSelected(false);
        zoomButton.setSelected(false);
        annotationButton.setSelected(false);
        panButton.setSelected(false);
        deleteMeasurement.setSelected(false);
    }

    public void deselectLoopChk() {
        loopCheckbox.setSelected(false);
    }

    public boolean getAnnotationStatus() {
        return annotationButton.isEnabled();
    }

    public void enableImageTools() {
        if (!windowing.isEnabled()) {
            enableAllTools();
        }
    }

    public void disableMultiSeriesTools() {
        layoutButton.setEnabled(false);
        textOverlay.setEnabled(false);
        exportButton.setEnabled(false);
        synchronizeButton.setEnabled(false);
    }

    public void enableMultiSeriesTools() {
        if (windowing.isEnabled()) {
            layoutButton.setEnabled(true);
            textOverlay.setEnabled(true);
            exportButton.setEnabled(true);
            synchronizeButton.setEnabled(true);
        }
    }

    public void designAnnotationContext() {
        jPopupMenu3.removeAll();
        jPopupMenu3.setOpaque(true);
        jPopupMenu3.setBackground(Color.BLACK);
        JMenuItem ruler = new JMenuItem(ApplicationContext.currentBundle.getString("ImageView.rulerButton.toolTipText"), new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ruler.png")));
        ruler.addActionListener(annotationHandler);
        jPopupMenu3.add(ruler);
        JMenuItem rect = new JMenuItem(ApplicationContext.currentBundle.getString("ImageView.rectangleButton.toolTipText"), new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangle.png")));
        rect.addActionListener(annotationHandler);
        jPopupMenu3.add(rect);
        JMenuItem ellipse = new JMenuItem(ApplicationContext.currentBundle.getString("ImageView.ellipseButton.toolTipText"), new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipse.png")));
        ellipse.addActionListener(annotationHandler);
        jPopupMenu3.add(ellipse);
        JMenuItem arrow = new JMenuItem(ApplicationContext.currentBundle.getString("ImageView.arrowButton.toolTipText"), new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/arrow.png")));
        arrow.addActionListener(annotationHandler);
        jPopupMenu3.add(arrow);
        jPopupMenu3.addSeparator();
        JMenuItem clearAll = new JMenuItem("Delete All Measurements", new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/clear_all_annotation.png")));
        clearAll.addActionListener(annotationHandler);
        jPopupMenu3.add(clearAll);
    }

    public void designPresetContext() {
        ArrayList<PresetModel> presetList = ApplicationContext.databaseRef.getPresetsForModality(parent.getModality());
        jPopupMenu2.removeAll();
        jPopupMenu2.setOpaque(true);
        jPopupMenu2.setBackground(Color.BLACK);
        jPopupMenu2.setOpaque(false);
        menuItems = new JMenuItem[presetList.size() + 1];
        for (int i = 0; i < presetList.size(); i++) {
            if (!presetList.get(i).getPresetName().equalsIgnoreCase("PRESETNAME")) {
                menuItems[i] = new JMenuItem(presetList.get(i).getPresetName());
                menuItems[i].setName(presetList.get(i).getWindowLevel() + "," + presetList.get(i).getWindowWidth());
                menuItems[i].addActionListener(presetHandler);
                menuItems[i].setHorizontalTextPosition(JMenuItem.LEFT);
                jPopupMenu2.add(menuItems[i]);
            }
        }
        jPopupMenu2.addSeparator();
        menuItems[presetList.size()] = new JMenuItem("Default", new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/selected.png")));
        menuItems[presetList.size()].setName("default");
        menuItems[presetList.size()].addActionListener(presetHandler);
        menuItems[presetList.size()].setHorizontalTextPosition(JMenuItem.LEFT);
        jPopupMenu2.add(menuItems[presetList.size()]);
    }
    ActionListener presetHandler = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String presetVal[] = ((JMenuItem) e.getSource()).getName().split(",");
            deselectMenues();
            ((JMenuItem) e.getSource()).setIcon(new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/selected.png")));
            JPanel currentPanel = parent.getCanvasParent();
            try {
                for (int i = 0; i < currentPanel.getComponentCount(); i++) {
                    try {
                        ((LayeredCanvas) currentPanel.getComponent(i)).imgpanel.windowChanged(Integer.parseInt(presetVal[0]), Integer.parseInt(presetVal[1]));
                    } catch (NumberFormatException ex) { //Comes here if the selected menu item is "default"
                        ((LayeredCanvas) currentPanel.getComponent(i)).imgpanel.resetWindowing();
                    }
                }
            } catch (NullPointerException npe) {
                ApplicationContext.logger.log(Level.INFO, "Image Toolber - No compoenents in tile", npe);
                //Null pointer exception occurs when there is no components in image layout
            }
            toolsButtonGroup.setSelected(windowing.getModel(), true);
            parent.setWindowing();
        }
    };

    public void deselectMenues() {
        for (int i = 0; i < menuItems.length; i++) {
            menuItems[i].setIcon(null);
        }
    }
    ActionListener annotationHandler = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            handleAnnotations(((JMenuItem) e.getSource()).getText());
        }
    };

    public void handleAnnotations(String text) {
        if (text.equalsIgnoreCase(ApplicationContext.currentBundle.getString("ImageView.rulerButton.toolTipText"))) {
            annotationButton.setIcon(new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rulerdropdown.png")));
            doRuler(false);
        } else if (text.equalsIgnoreCase(ApplicationContext.currentBundle.getString("ImageView.rectangleButton.toolTipText"))) {
            annotationButton.setIcon(new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/rectangledropdown.png")));
            doRectangle();
        } else if (text.equalsIgnoreCase(ApplicationContext.currentBundle.getString("ImageView.ellipseButton.toolTipText"))) {
            annotationButton.setIcon(new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/ellipsedropdown.png")));
            doEllipse();
        } else if (text.equalsIgnoreCase(ApplicationContext.currentBundle.getString("ImageView.arrowButton.toolTipText"))) {
            annotationButton.setIcon(new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/arrowdropdown.png")));
            doRuler(true);
        } else {
            parent.clearMeasurements();
        }
        annotationButton.setToolTipText(text);
    }

    public void setScoutSelected(boolean selected) {
        scoutButton.setSelected(selected);
    }

    public void toggleLoopChk() {
        loopCheckbox.setSelected(loopCheckbox.isSelected() ? false : true);
        doLoop();
    }

    private void setAnnotationToolsStatus(boolean isHide) {
        annotationButton.setEnabled(isHide);
        annotationVisibility.setEnabled(isHide);
        deleteMeasurement.setEnabled(isHide);
    }
    SwingWorker<Void, Void> worker = null;

    public void doAutoPlay() {
        loopSlider.setValue(loopSlider.getMaximum());
        loopCheckbox.setSelected(true);
        doLoop();
    }

    public void stopAutoPlay() {
        if (loopCheckbox.isSelected()) {
            loopCheckbox.setSelected(false);
            doLoop();
        }
    }

    public void doLoop() {
        if (loopCheckbox.isSelected()) {
            if (!parent.isMultiframe()) {
                parent.setRenderingQuality(false);
                doImageLoop();
            } else {
                doFrameLoop();
            }
        } else if (worker != null) {
            worker.cancel(true);
            worker = null;
            loopCheckbox.setSelected(false);
        }
    }

    public void doImageLoop() {
        if (!parent.isTileLayout()) {
            worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    int total = parent.getTotalImages();
                    for (int i = parent.getCurrentInstanceOrFrame(); i < total; i++) {
                        parent.showImage(i);
                        Thread.sleep((11 - loopSlider.getValue()) * 30);
                        if (ApplicationContext.isLoopBack && i == total - 1) {
                            parent.forwardLoopBack();
                            i = -1;
                        }
                    }
                    return null;
                }
            };
            worker.execute();
        }
    }

    public void doFrameLoop() {
        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                int totalFrames = parent.getTotalFrames();
                for (int i = parent.getCurrentInstanceOrFrame(); i < totalFrames; i++) {
                    parent.showFrame(i);
                    if (ApplicationContext.isLoopBack && i == totalFrames - 1) {
                        i = -1;
                    }
                    Thread.sleep((11 - loopSlider.getValue()) * 10);
                }
                return null;
            }
        };
        worker.execute();
    }
}
