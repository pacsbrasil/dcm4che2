/* ***** BEGIN LICENSE BLOCK *****
* Version: MPL 1.1/GPL 2.0/LGPL 2.1
*
* The contents of this file are subject to the Mozilla Public License Version
* 1.1 (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
*
* The Initial Developer of the Original Code is
* Raster Images
* Portions created by the Initial Developer are Copyright (C) 2009-2010
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
* Babu Hussain A
* Meer Asgar Hussain B
* Prakash J
* Suresh V
*
* Alternatively, the contents of this file may be used under the terms of
* either the GNU General Public License Version 2 or later (the "GPL"), or
* the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
* in which case the provisions of the GPL or the LGPL are applicable instead
* of those above. If you wish to allow use of your version of this file only
* under the terms of either the GPL or the LGPL, and not to allow others to
* use your version of this file under the terms of the MPL, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the GPL or the LGPL. If you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the MPL, the GPL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form.dialog;

import in.raster.mayam.model.ServerModel;
import in.raster.mayam.model.combo.TransferSyntaxModel;

/**
 *
 * @author  BabuHussain
 * @version 0.7
 *
 */
public class WadoInformation extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    private ServerModel serverModel;

    /** Creates new form WadoInformation */
    public WadoInformation(java.awt.Frame parent, boolean modal,ServerModel serverModel) {
        super(parent, modal);
        initComponents();
        this.serverModel=serverModel;
        updateWadoInformation();

       
    }
    private String[] getRetrieveTransferSyntaxArray()
    {
        String[] retrieveSyntaxArray=new String[3];
        retrieveSyntaxArray[0]="Explicit VR Little Endian";
        retrieveSyntaxArray[1]="Implicit VR Little Endian";
        retrieveSyntaxArray[2]="Original Syntax";
        return retrieveSyntaxArray;
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        wadoURLLabel = new javax.swing.JLabel();
        wadoPort = new javax.swing.JLabel();
        encryptionLabel = new javax.swing.JLabel();
        retrieveSyntaxLabel = new javax.swing.JLabel();
        wadoURLText = new javax.swing.JTextField();
        wadoPortText = new javax.swing.JTextField();
        wadoProtocolCheckBox = new javax.swing.JCheckBox();
        retrieveSyntaxCombo = new javax.swing.JComboBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        wadoURLLabel.setText("WADO url");

        wadoPort.setText("WADO Port");

        encryptionLabel.setText("Encryption");

        retrieveSyntaxLabel.setText("Retrieve Syntax");

        wadoProtocolCheckBox.setText("https");

        retrieveSyntaxCombo.setModel(new TransferSyntaxModel(getRetrieveTransferSyntaxArray()));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(retrieveSyntaxLabel)
                            .add(wadoURLLabel)
                            .add(wadoPort)
                            .add(encryptionLabel))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(wadoPortText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(wadoURLText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(retrieveSyntaxCombo, 0, 239, Short.MAX_VALUE)
                            .add(wadoProtocolCheckBox))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        layout.linkSize(new java.awt.Component[] {cancelButton, okButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(wadoURLLabel)
                    .add(wadoURLText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(wadoPort)
                    .add(wadoPortText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(encryptionLabel)
                    .add(wadoProtocolCheckBox))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(retrieveSyntaxLabel)
                    .add(retrieveSyntaxCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 13, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        storeWadoInformation();
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    public void updateWadoInformation()
    {
        wadoURLText.setText(serverModel.getWadoContextPath());
        wadoPortText.setText(String.valueOf(serverModel.getWadoPort()));
        if(serverModel.getWadoProtocol().equalsIgnoreCase("https"))
        wadoProtocolCheckBox.setSelected(true);
        if(!serverModel.getRetrieveTransferSyntax().equalsIgnoreCase(""))
        retrieveSyntaxCombo.getModel().setSelectedItem(serverModel.getRetrieveTransferSyntax());
    }
    private void storeWadoInformation()
    {      
        String wadoProtocol=this.wadoProtocolCheckBox.isSelected()?"https":"http";  
        serverModel.setWadoContextPath(this.wadoURLText.getText());
        serverModel.setWadoPort(Integer.parseInt(this.wadoPortText.getText()));
        serverModel.setWadoProtocol(wadoProtocol);
        serverModel.setRetrieveTransferSyntax((String)this.retrieveSyntaxCombo.getSelectedItem());
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel encryptionLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox retrieveSyntaxCombo;
    private javax.swing.JLabel retrieveSyntaxLabel;
    private javax.swing.JLabel wadoPort;
    private javax.swing.JTextField wadoPortText;
    private javax.swing.JCheckBox wadoProtocolCheckBox;
    private javax.swing.JLabel wadoURLLabel;
    private javax.swing.JTextField wadoURLText;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
