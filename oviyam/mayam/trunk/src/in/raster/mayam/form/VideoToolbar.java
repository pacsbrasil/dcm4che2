/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import java.awt.Font;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 *
 * @author Devishree
 * @version 2.1
 */
public class VideoToolbar extends javax.swing.JPanel {

    Timer timer = null;
    ImageIcon play = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/play.png"));
    ImageIcon pause = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pause.png"));
    ImageIcon mute = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/mute.png"));
    ImageIcon lowLevel = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound1.png"));
    ImageIcon medium = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound2.png"));
    ImageIcon highLevel = new ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound3.png"));
    EmbeddedMediaPlayer mediaPlayer = null;

    /**
     * Creates new form VideoToolbar
     */
    public VideoToolbar(EmbeddedMediaPlayer mediaPlayer) {
        initComponents();        
//        setBorder(new RoundedCorner(new Color(42,42,42), 2, 15));
        this.mediaPlayer = mediaPlayer;
        videoTimeController.setUI(new SliderUI());
        volumeController.setUI(new SliderUI());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playOrPauseBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        videoTimeController = new javax.swing.JSlider();
        timeDisplayLabel = new javax.swing.JLabel();
        volumeBtn = new javax.swing.JButton();
        volumeController = new javax.swing.JSlider();

        playOrPauseBtn.setFont(new Font("Lucida Grande",Font.BOLD,12));
        playOrPauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/pause.png"))); // NOI18N
        playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
        playOrPauseBtn.setBorderPainted(false);
        playOrPauseBtn.setFocusPainted(false);
        playOrPauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playOrPauseBtnActionPerformed(evt);
            }
        });

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/stop.png"))); // NOI18N
        stopBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.stopButton.toolTipText"));
        stopBtn.setBorderPainted(false);
        stopBtn.setFocusPainted(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        videoTimeController.setForeground(new java.awt.Color(255, 138, 0));
        videoTimeController.setMaximum(0);
        videoTimeController.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                videoTimeControllerMouseDragged(evt);
            }
        });

        timeDisplayLabel.setText("jLabel1");

        volumeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/in/raster/mayam/form/images/Sound2.png"))); // NOI18N
        volumeBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.volumeButton.toolTipText"));
        volumeBtn.setBorderPainted(false);
        volumeBtn.setFocusPainted(false);
        volumeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeBtnActionPerformed(evt);
            }
        });

        volumeController.setForeground(new java.awt.Color(255, 138, 0));
        volumeController.setMaximum(200);
        volumeController.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                volumeControllerMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playOrPauseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(videoTimeController, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(timeDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(volumeBtn)
                .addGap(18, 18, 18)
                .addComponent(volumeController, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeDisplayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(volumeBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stopBtn)
                                    .addComponent(playOrPauseBtn)
                                    .addComponent(videoTimeController, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(volumeController, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playOrPauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playOrPauseBtnActionPerformed
        // TODO add your handling code here:
        if (mediaPlayer.isPlayable()) {
            if (mediaPlayer.isPlaying()) {
                playOrPauseBtn.setIcon(play);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
                mediaPlayer.pause();
            } else {
                playOrPauseBtn.setIcon(pause);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
                startTimer();
                mediaPlayer.play();
            }
        } else {
            mediaPlayer.playMedia(mediaPlayer.mrl().replace("file://", ""));
            startTimer();
            playOrPauseBtn.setIcon(pause);
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
        }
    }//GEN-LAST:event_playOrPauseBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        mediaPlayer.stop();
        stopTimer();
        playOrPauseBtn.setIcon(play);
        playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
    }//GEN-LAST:event_stopBtnActionPerformed

    private void volumeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeBtnActionPerformed
        // TODO add your handling code here:
        if (!volumeBtn.getIcon().equals(mute)) {
            volumeBtn.setIcon(mute);
            mediaPlayer.mute();
        } else {
            setVolumeIcon();
            mediaPlayer.mute(false);
        }
    }//GEN-LAST:event_volumeBtnActionPerformed

    private void volumeControllerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeControllerMouseDragged
        // TODO add your handling code here:
        mediaPlayer.setVolume(volumeController.getValue());
        setVolumeIcon();
    }//GEN-LAST:event_volumeControllerMouseDragged

    private void videoTimeControllerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoTimeControllerMouseDragged
        // TODO add your handling code here:
        mediaPlayer.setTime(videoTimeController.getValue() * 1000);
    }//GEN-LAST:event_videoTimeControllerMouseDragged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton playOrPauseBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JLabel timeDisplayLabel;
    private javax.swing.JSlider videoTimeController;
    private javax.swing.JButton volumeBtn;
    private javax.swing.JSlider volumeController;
    // End of variables declaration//GEN-END:variables

    private void setVolumeIcon() {
        if (volumeController.getValue() < 75) {
            volumeBtn.setIcon(lowLevel);
        } else if (volumeController.getValue() > 75 && volumeController.getValue() < 150) {
            volumeBtn.setIcon(medium);
        } else {
            volumeBtn.setIcon(highLevel);
        }
    }

    public void updateLocale() {
        stopBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.stopButton.toolTipText"));
        volumeBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.volumeButton.toolTipText"));
        if (playOrPauseBtn.getIcon().equals(play)) {
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
        } else {
            playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.pauseButton.toolTipText"));
        }
    }

    public void startTimer() {
        if (timer == null) {
            timer = new Timer();
            timer.scheduleAtFixedRate(new CineTimer(), 0, 900);
        }
    }

    public void stopTimer() {
        if (timer != null) {
            timer.cancel();
            timer = null;
        }
    }

    private class CineTimer extends TimerTask {

        @Override
        public void run() {
            if (videoTimeController.getMaximum() == 0) {
                videoTimeController.setMaximum((int) mediaPlayer.getLength() / 1000);
                volumeController.setValue(mediaPlayer.getVolume());
            }
            String mins = String.valueOf((int) ((mediaPlayer.getTime() / 1000) / 60));
            String secs = String.valueOf((int) (mediaPlayer.getTime() / 1000));
            if (mins.length() == 1) {
                mins = 0 + mins;
            }
            if (secs.length() == 1) {
                secs = 0 + secs;
            }
            timeDisplayLabel.setText(mins + ":" + secs);
            videoTimeController.setValue((int) (mediaPlayer.getTime() / 1000));
            if (mediaPlayer.getMediaPlayerState().equals(mediaPlayer.getMediaPlayerState().libvlc_Ended)) {
                playOrPauseBtn.setIcon(play);
                playOrPauseBtn.setToolTipText(ApplicationContext.currentBundle.getString("ImageView.playButton.toolTipText"));
                timer.cancel();
                timer = null;
            }
        }
    }
    
//    @Override
//    protected void paintComponent(Graphics g) {
//        super.paintComponent(g);
//        g.setColor(new Color(42, 42, 42));
//        g.fillRoundRect(getX(), getY(), getWidth(), getHeight(), 20, 20);
//    }
}
