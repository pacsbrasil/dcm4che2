/* ***** BEGIN LICENSE BLOCK *****
* Version: MPL 1.1/GPL 2.0/LGPL 2.1
*
* The contents of this file are subject to the Mozilla Public License Version
* 1.1 (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
*
* The Initial Developer of the Original Code is
* Raster Images
* Portions created by the Initial Developer are Copyright (C) 2009-2010
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
* Babu Hussain A
* Meer Asgar Hussain B
* Prakash J
* Suresh V
*
* Alternatively, the contents of this file may be used under the terms of
* either the GNU General Public License Version 2 or later (the "GPL"), or
* the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
* in which case the provisions of the GPL or the LGPL are applicable instead
* of those above. If you wish to allow use of your version of this file only
* under the terms of either the GPL or the LGPL, and not to allow others to
* use your version of this file under the terms of the MPL, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the GPL or the LGPL. If you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the MPL, the GPL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.model.Series;
import in.raster.mayam.model.Study;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;

/**
 *
 * @author  BabuHussain
 * @version 0.5
 *
 */
public class Tile extends javax.swing.JPanel implements FocusListener {

    /** Creates new form Tile */
    public boolean focusGained = false;    

    public Tile() {
        initComponents();        
        this.addFocusListener(this);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (this.focusGained) {
            g.setColor(Color.YELLOW);
        } else {
            g.setColor(Color.BLACK);
            g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
            g.drawRect(1, 1, getWidth() - 3, getHeight() - 3);
            g.setColor(Color.DARK_GRAY);
        }
        g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
        g.drawRect(1, 1, getWidth() - 3, getHeight() - 3);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        this.requestFocus();
        designContext();       
    }//GEN-LAST:event_formMouseClicked

    public boolean isFocusGained() {
        return focusGained;
    }

    public void setFocusGained(boolean focusGained) {
        this.focusGained = focusGained;
        repaint();
    }

    public void focusGained(FocusEvent arg0) {
        setFocusGained(true);
    }

    public void focusLost(FocusEvent arg0) {
        setFocusGained(false);
    }
    /**
     *
     */
    private void designContext() {
        ArrayList<Study> studyList = null;
        if (((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getName() != null) {
            String patientName = ((JPanel) ApplicationContext.imgView.jTabbedPane1.getSelectedComponent()).getName();
            studyList = ApplicationContext.databaseRef.getStudyUIDBasedOnPatientName(patientName);
        }
        JPopupMenu jPopupMenu2=new JPopupMenu();
        for (Study study : studyList) {
            ArrayList<Series> seriesList = ApplicationContext.databaseRef.getSeriesList(study.getStudyInstanceUID());
            JMenu menu = new JMenu(study.getStudyDesc());
            for (final Series series : seriesList) {
                JMenuItem menuitem = new JMenuItem(series.getSeriesDesc());
                menu.add(menuitem);
                menuitem.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(ActionEvent arg0) {
                        // container.add(canvas, i);
                        //changeSeries(arg0, series.getStudyInstanceUID(), series.getSeriesInstanceUID());
                    }
                });
            }
            jPopupMenu2.add(menu);
        }
        this.setComponentPopupMenu(jPopupMenu2);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
