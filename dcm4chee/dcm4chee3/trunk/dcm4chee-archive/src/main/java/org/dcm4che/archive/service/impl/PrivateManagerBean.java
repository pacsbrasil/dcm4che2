/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1/GPL 2.0/LGPL 2.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is part of dcm4che, an implementation of DICOM(TM) in * Java(TM), available at http://sourceforge.net/projects/dcm4che. * * The Initial Developer of the Original Code is * TIANI Medgraph AG. * Portions created by the Initial Developer are Copyright (C) 2003-2005 * the Initial Developer. All Rights Reserved. * * Contributor(s): * Damien Evans <damien.daddy@gmail.com> * Gunter Zeilinger <gunter.zeilinger@tiani.com> * Franz Willer <franz.willer@gwi-ag.com> * * Alternatively, the contents of this file may be used under the terms of * either the GNU General Public License Version 2 or later (the "GPL"), or * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"), * in which case the provisions of the GPL or the LGPL are applicable instead * of those above. If you wish to allow use of your version of this file only * under the terms of either the GPL or the LGPL, and not to allow others to * use your version of this file under the terms of the MPL, indicate your * decision by deleting the provisions above and replace them with the notice * and other provisions required by the GPL or the LGPL. If you do not delete * the provisions above, a recipient may use your version of this file under * the terms of any one of the MPL, the GPL or the LGPL. * * ***** END LICENSE BLOCK ***** */package org.dcm4che.archive.service.impl;import java.rmi.RemoteException;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.persistence.PersistenceException;import org.apache.log4j.Logger;import org.dcm4che.archive.common.PrivateTags;import org.dcm4che.archive.dao.ContentCreateException;import org.dcm4che.archive.dao.ContentDeleteException;import org.dcm4che.archive.dao.FileDAO;import org.dcm4che.archive.dao.InstanceDAO;import org.dcm4che.archive.dao.PatientDAO;import org.dcm4che.archive.dao.PrivateFileDAO;import org.dcm4che.archive.dao.PrivateInstanceDAO;import org.dcm4che.archive.dao.PrivatePatientDAO;import org.dcm4che.archive.dao.PrivateSeriesDAO;import org.dcm4che.archive.dao.PrivateStudyDAO;import org.dcm4che.archive.dao.SeriesDAO;import org.dcm4che.archive.dao.StudyDAO;import org.dcm4che.archive.entity.File;import org.dcm4che.archive.entity.FileDTO;import org.dcm4che.archive.entity.Instance;import org.dcm4che.archive.entity.Patient;import org.dcm4che.archive.entity.PrivateInstance;import org.dcm4che.archive.entity.PrivatePatient;import org.dcm4che.archive.entity.PrivateSeries;import org.dcm4che.archive.entity.PrivateStudy;import org.dcm4che.archive.entity.Series;import org.dcm4che.archive.entity.Study;import org.dcm4che.archive.service.PrivateManager;import org.dcm4che.archive.util.Convert;import org.dcm4che.data.Dataset;import org.dcm4che.data.DcmElement;import org.dcm4che.data.DcmObjectFactory;import org.dcm4che.dict.Tags;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;/** * Service implementation responsible for managing the deletion of content. *  * @author franz.willer@gwi-ag.com * @version $Revision: 1.1 $ $Date: 2007/06/23 18:59:01 $ * @since 27.12.2005 */@Transactional(propagation = Propagation.REQUIRED)public class PrivateManagerBean implements PrivateManager {    private static final int DELETED = 1;    private PatientDAO patDAO;    private StudyDAO studyDAO;    private SeriesDAO seriesDAO;    private InstanceDAO instDAO;    private FileDAO fileDAO;    private PrivatePatientDAO privPatDAO;    private PrivateStudyDAO privStudyDAO;    private PrivateSeriesDAO privSeriesDAO;    private PrivateInstanceDAO privInstDAO;    private PrivateFileDAO privFileDAO;    private static final DcmObjectFactory dof = DcmObjectFactory.getInstance();    private static Logger log = Logger.getLogger(PrivateManagerBean.class            .getName());    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivateSeries(long)     */    public void deletePrivateSeries(long series_pk)            throws ContentDeleteException {        try {            PrivateSeries series = privSeriesDAO.findByPrimaryKey(new Long(                    series_pk));            PrivateStudy study = series.getStudy();            privSeriesDAO.remove(series);            if (study.getSeries().isEmpty()) {                PrivatePatient pat = study.getPatient();                privStudyDAO.remove(study);                if (pat.getStudies().isEmpty()) {                    privPatDAO.remove(pat);                }            }        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivateStudy(long)     */    public Collection deletePrivateStudy(long study_pk)            throws ContentDeleteException {        try {            PrivateStudy study = privStudyDAO.findByPrimaryKey(new Long(                    study_pk));            ArrayList files = null;            PrivatePatient pat = study.getPatient();            privStudyDAO.remove(study);            if (pat.getStudies().isEmpty()) {                privPatDAO.remove(pat);            }            return files;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivatePatient(long)     */    public void deletePrivatePatient(long patient_pk)            throws ContentDeleteException {        try {            privPatDAO.remove(new Long(patient_pk));        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivateInstance(long)     */    public void deletePrivateInstance(long instance_pk)            throws ContentDeleteException {        try {            PrivateInstance instance = privInstDAO.findByPrimaryKey(new Long(                    instance_pk));            PrivateSeries series = instance.getSeries();            privInstDAO.remove(instance);            if (series.getInstances().isEmpty()) {                PrivateStudy study = series.getStudy();                privSeriesDAO.remove(series);                if (study.getSeries().isEmpty()) {                    PrivatePatient pat = study.getPatient();                    privStudyDAO.remove(study);                    if (pat.getStudies().isEmpty()) {                        privPatDAO.remove(pat);                    }                }            }        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivateFile(long)     */    public void deletePrivateFile(long file_pk) throws RemoteException {        try {            privFileDAO.remove(new Long(file_pk));        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deletePrivateFiles(java.util.Collection)     */    public void deletePrivateFiles(Collection fileDTOs)            throws ContentDeleteException {        try {            for (Iterator iter = fileDTOs.iterator(); iter.hasNext();) {                privFileDAO.remove(new Long(((FileDTO) iter.next()).getPk()));            }        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#deleteAll(int)     */    public void deleteAll(int privateType) throws ContentDeleteException {        try {            Collection<PrivatePatient> c = privPatDAO                    .findByPrivateType(privateType);            for (Iterator iter = c.iterator(); iter.hasNext();) {                privPatDAO.remove(((PrivatePatient) iter.next()).getPk());            }        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveInstancesToTrash(java.lang.String[], boolean)     */    public Collection moveInstancesToTrash(String[] iuids, boolean cascading)            throws ContentDeleteException {        try {            // These instances may belong to multiple studies,            // although mostly they should be the same study            Map mapStudies = new HashMap();            for (int i = 0; i < iuids.length; i++) {                Instance instance = instDAO.findBySopIuid(iuids[i]);                Series series = instance.getSeries();                Study study = series.getStudy();                if (!mapStudies.containsKey(study))                    mapStudies.put(study, new HashMap());                Map mapSeries = (Map) mapStudies.get(study);                if (!mapSeries.containsKey(series))                    mapSeries.put(series, new ArrayList());                Collection colInstances = (Collection) mapSeries.get(series);                colInstances.add(instance);            }            List dss = new ArrayList();            Iterator iter = mapStudies.keySet().iterator();            while (iter.hasNext()) {                Study study = (Study) iter.next();                dss.add(getStudyMgtDataset(study, (Map) mapStudies.get(study)));                Iterator iter2 = ((Map) mapStudies.get(study)).keySet()                        .iterator();                while (iter2.hasNext()) {                    Series series = (Series) iter2.next();                    List instances = (List) ((Map) mapStudies.get(study))                            .get(series);                    for (int i = 0; i < instances.size(); i++) {                        // Delete the instance now, i.e., move to trash bin,                        // becoming private instance                        getPrivateInstance((Instance) instances.get(i),                                DELETED, null);                        instDAO.remove((Instance) instances.get(i));                    }                    if (series.getInstances().size() == 0 && cascading) {                        // Delete the series too since there's no instance left                        getPrivateSeries(series, DELETED, null, false);                        seriesDAO.remove(series);                    }                    else                        seriesDAO.updateDerivedFields(series, true, true, true,                                true, true);                }                if (study.getSeries().size() == 0 && cascading) {                    // Delete the study too since there's no series left                    getPrivateStudy(study, DELETED, null, false);                    studyDAO.remove(study);                }                else                    studyDAO.updateDerivedFields(study, true, true, true, true,                            true, true);            }            return dss;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveInstanceToTrash(long)     */    public Dataset moveInstanceToTrash(long instance_pk)            throws ContentDeleteException {        try {            Instance instance = instDAO.findByPrimaryKey(new Long(instance_pk));            Collection colInstance = new ArrayList();            colInstance.add(instance);            Series series = instance.getSeries();            Map mapSeries = new HashMap();            mapSeries.put(series, colInstance);            Dataset ds = getStudyMgtDataset(series.getStudy(), mapSeries);            getPrivateInstance(instance, DELETED, null);            instDAO.remove(instance);            seriesDAO.updateDerivedFields(series, true, true, true, true, true);            studyDAO.updateDerivedFields(series.getStudy(), true, true, true,                    true, true, true);            return ds;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveSeriesToTrash(long)     */    public Dataset moveSeriesToTrash(long series_pk)            throws ContentDeleteException {        try {            Series series = seriesDAO.findByPrimaryKey(new Long(series_pk));            Study study = series.getStudy();            Map mapSeries = new HashMap();            mapSeries.put(series, series.getInstances());            Dataset ds = getStudyMgtDataset(series.getStudy(), mapSeries);            getPrivateSeries(series, DELETED, null, true);            seriesDAO.remove(series);            studyDAO.updateDerivedFields(study, true, true, true, true, true,                    true);            return ds;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveSeriesOfPPSToTrash(java.lang.String, boolean)     */    public Collection moveSeriesOfPPSToTrash(String ppsIUID,            boolean removeEmptyParents) {        Collection result = new ArrayList(); // FIXME: NOT IN USE        try {            Object[] ppsSeries = seriesDAO.findByPpsIuid(ppsIUID).toArray();            if (ppsSeries.length > 0) {                Series series = null;                Study study = ((Series) ppsSeries[0]).getStudy();                for (int i = 0; i < ppsSeries.length; i++) {                    series = (Series) ppsSeries[i];                    getPrivateSeries(series, DELETED, null, true);                    seriesDAO.remove(series);                }                if (removeEmptyParents && study.getSeries().isEmpty()) {                    studyDAO.remove(study);                }                else {                    studyDAO.updateDerivedFields(study, true, true, true, true,                            true, true);                }            }        }        catch (PersistenceException pe) {            log.error("Moving series of PPS to trash failed.", pe);        }        return result;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveStudyToTrash(java.lang.String)     */    public Dataset moveStudyToTrash(String iuid) throws ContentDeleteException {        try {            Study study = studyDAO.findByStudyIuid(iuid);            if (study != null)                return moveStudyToTrash(study.getPk().longValue());            else                return null;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#moveStudyToTrash(long)     */    public Dataset moveStudyToTrash(long study_pk)            throws ContentDeleteException {        try {            Study study = studyDAO.findByPrimaryKey(new Long(study_pk));            Dataset ds = getStudyMgtDataset(study, null);            getPrivateStudy(study, DELETED, null, true);            studyDAO.remove(study);            return ds;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    /**      * @see org.dcm4che.archive.service.PrivateManager#movePatientToTrash(long)     */    public Collection movePatientToTrash(long pat_pk) throws RemoteException {        try {            Patient patient = patDAO.findByPrimaryKey(new Long(pat_pk));            Collection col = patient.getStudies();            Collection result = new ArrayList();            for (Iterator iter = col.iterator(); iter.hasNext();) {                result.add(getStudyMgtDataset((Study) iter.next(), null));            }            Dataset ds = patient.getAttributes(true);            getPrivatePatient(patient, DELETED, true);            patDAO.remove(patient);            return result;        }        catch (ContentDeleteException cde) {            throw cde;        }        catch (Throwable e) {            throw new ContentDeleteException(e);        }    }    private PrivateInstance getPrivateInstance(Instance instance, int type,            PrivateSeries privSeries) throws PersistenceException,            ContentCreateException {        Collection<PrivateInstance> col = privInstDAO.findBySopIuid(type,                instance.getSopIuid());        PrivateInstance privInstance;        if (col.isEmpty()) {            if (privSeries == null) {                privSeries = getPrivateSeries(instance.getSeries(), type, null,                        false);            }            privInstance = privInstDAO.create(type, instance                    .getAttributes(true), privSeries);        }        else {            privInstance = col.iterator().next();        }        Object[] files = instance.getFiles().toArray();        File file;        for (int i = 0; i < files.length; i++) {            file = (File) files[i];            privFileDAO.create(file.getFilePath(), file.getFileTsuid(), file                    .getFileSize(), file.getFileMd5(), file.getFileStatus(),                    privInstance, file.getFileSystem());            try {                fileDAO.remove(file);            }            catch (Throwable x) {                log.warn("Can not remove File record:" + file, x);            }        }        return privInstance;    }    private PrivateSeries getPrivateSeries(Series series, int type,            PrivateStudy privStudy, boolean includeInstances)            throws ContentCreateException, PersistenceException {        Collection<PrivateSeries> seriesCol = privSeriesDAO.findBySeriesIuid(                type, series.getSeriesIuid());        PrivateSeries privSeries;        if (seriesCol == null || seriesCol.isEmpty()) {            if (privStudy == null) {                privStudy = getPrivateStudy(series.getStudy(), type, null,                        false);            }            privSeries = privSeriesDAO.create(type, series.getAttributes(true),                    privStudy);        }        else {            privSeries = seriesCol.iterator().next();        }        if (includeInstances) {            for (Iterator iter = series.getInstances().iterator(); iter                    .hasNext();) {                getPrivateInstance((Instance) iter.next(), type, privSeries);// move                // also                // all                // instances            }        }        return privSeries;    }    private PrivateStudy getPrivateStudy(Study study, int type,            PrivatePatient privPat, boolean includeSeries)            throws ContentCreateException, PersistenceException {        Collection<PrivateStudy> col = privStudyDAO.findByStudyIuid(type, study                .getStudyIuid());        PrivateStudy privStudy;        if (col.isEmpty()) {            if (privPat == null) {                privPat = getPrivatePatient(study.getPatient(), type, false);            }            privStudy = privStudyDAO.create(type, study.getAttributes(true),                    privPat);        }        else {            privStudy = col.iterator().next();        }        if (includeSeries) {            for (Iterator iter = study.getSeries().iterator(); iter.hasNext();) {                getPrivateSeries((Series) iter.next(), type, privStudy, true);// move                // also                // all                // instances            }        }        return privStudy;    }    private PrivatePatient getPrivatePatient(Patient patient, int type,            boolean includeStudies) throws PersistenceException,            ContentCreateException {        Collection<PrivatePatient> col = privPatDAO.findByPatientIdWithIssuer(                type, patient.getPatientId(), patient.getIssuerOfPatientId());        PrivatePatient privPat;        if (col.isEmpty()) {            privPat = privPatDAO.create(type, patient.getAttributes(true));        }        else {            privPat = col.iterator().next();        }        if (includeStudies) {            for (Iterator iter = patient.getStudies().iterator(); iter                    .hasNext();) {                getPrivateStudy((Study) iter.next(), type, privPat, true);// move                // also                // all                // instances            }        }        return privPat;    }    private Dataset getStudyMgtDataset(Study study, Map mapSeries) {        Dataset ds = dof.newDataset();        ds.putUI(Tags.StudyInstanceUID, study.getStudyIuid());        ds.putOB(PrivateTags.StudyPk, Convert                .toBytes(study.getPk().longValue()));        ds.putSH(Tags.AccessionNumber, study.getAccessionNumber());        ds.putLO(Tags.PatientID, study.getPatient().getPatientId());        ds.putLO(Tags.IssuerOfPatientID, study.getPatient()                .getIssuerOfPatientId());        ds.putPN(Tags.PatientName, study.getPatient().getPatientName());        if (log.isDebugEnabled()) {            log.debug("getStudyMgtDataset: studyIUID:" + study.getStudyIuid());        }        DcmElement refSeriesSeq = ds.putSQ(Tags.RefSeriesSeq);        Iterator iter = (mapSeries == null) ? study.getSeries().iterator()                : mapSeries.keySet().iterator();        while (iter.hasNext()) {            Series sl = (Series) iter.next();            Dataset dsSer = refSeriesSeq.addNewItem();            dsSer.putUI(Tags.SeriesInstanceUID, sl.getSeriesIuid());            Collection instances = (mapSeries == null) ? sl.getInstances()                    : (Collection) mapSeries.get(sl);            Iterator iter2 = instances.iterator();            DcmElement refSopSeq = null;            if (iter2.hasNext())                refSopSeq = dsSer.putSQ(Tags.RefSOPSeq);            while (iter2.hasNext()) {                Instance il = (Instance) iter2.next();                Dataset dsInst = refSopSeq.addNewItem();                dsInst.putUI(Tags.RefSOPClassUID, il.getSopCuid());                dsInst.putUI(Tags.RefSOPInstanceUID, il.getSopIuid());                dsInst.putAE(Tags.RetrieveAET, il.getRetrieveAETs());            }        }        if (log.isDebugEnabled()) {            log.debug("return StgMgtDataset:");            log.debug(ds);        }        return ds;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getFileDAO()     */    public FileDAO getFileDAO() {        return fileDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setFileDAO(org.dcm4che.archive.dao.FileDAO)     */    public void setFileDAO(FileDAO fileDAO) {        this.fileDAO = fileDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getInstDAO()     */    public InstanceDAO getInstDAO() {        return instDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setInstDAO(org.dcm4che.archive.dao.InstanceDAO)     */    public void setInstDAO(InstanceDAO instDAO) {        this.instDAO = instDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPatDAO()     */    public PatientDAO getPatDAO() {        return patDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPatDAO(org.dcm4che.archive.dao.PatientDAO)     */    public void setPatDAO(PatientDAO patDAO) {        this.patDAO = patDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPrivFileDAO()     */    public PrivateFileDAO getPrivFileDAO() {        return privFileDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPrivFileDAO(org.dcm4che.archive.dao.PrivateFileDAO)     */    public void setPrivFileDAO(PrivateFileDAO privFileDAO) {        this.privFileDAO = privFileDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPrivInstDAO()     */    public PrivateInstanceDAO getPrivInstDAO() {        return privInstDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPrivInstDAO(org.dcm4che.archive.dao.PrivateInstanceDAO)     */    public void setPrivInstDAO(PrivateInstanceDAO privInstDAO) {        this.privInstDAO = privInstDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPrivPatDAO()     */    public PrivatePatientDAO getPrivPatDAO() {        return privPatDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPrivPatDAO(org.dcm4che.archive.dao.PrivatePatientDAO)     */    public void setPrivPatDAO(PrivatePatientDAO privPatDAO) {        this.privPatDAO = privPatDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPrivSeriesDAO()     */    public PrivateSeriesDAO getPrivSeriesDAO() {        return privSeriesDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPrivSeriesDAO(org.dcm4che.archive.dao.PrivateSeriesDAO)     */    public void setPrivSeriesDAO(PrivateSeriesDAO privSeriesDAO) {        this.privSeriesDAO = privSeriesDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getPrivStudyDAO()     */    public PrivateStudyDAO getPrivStudyDAO() {        return privStudyDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setPrivStudyDAO(org.dcm4che.archive.dao.PrivateStudyDAO)     */    public void setPrivStudyDAO(PrivateStudyDAO privStudyDAO) {        this.privStudyDAO = privStudyDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getSeriesDAO()     */    public SeriesDAO getSeriesDAO() {        return seriesDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setSeriesDAO(org.dcm4che.archive.dao.SeriesDAO)     */    public void setSeriesDAO(SeriesDAO seriesDAO) {        this.seriesDAO = seriesDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#getStudyDAO()     */    public StudyDAO getStudyDAO() {        return studyDAO;    }    /**      * @see org.dcm4che.archive.service.PrivateManager#setStudyDAO(org.dcm4che.archive.dao.StudyDAO)     */    public void setStudyDAO(StudyDAO studyDAO) {        this.studyDAO = studyDAO;    }}