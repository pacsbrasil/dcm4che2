/**
 * Contains the layout object definitions for the display page.
 * Two types of over-rides can be added to the display layout area - things that are defined in the
 * metadata can be directly added to for the specific version being rendered.  For things not in the
 * metadata, some or all methods can be over-ridden in another javascript file included at higher priority
 * than this one.
 */

function PatientLayout() {
	this.baseConstructor("PatientLayout");
};

PatientLayout.prototype = new Layout("patientLayout");
PatientLayout.prototype.gridX = 2;
PatientLayout.prototype.gridY = 1;
// Add some initial size to handle the border.
PatientLayout.prototype.heightEdge = 0;
PatientLayout.prototype.widthEdge = 12;

/** Initialize the patient layout object - lazy, and only succeed if the navigate object is available.
 */
PatientLayout.prototype.init = function PatientLayout_init() {
	if( this.navigate==null ) return false;
	if( this.layouts && this.layouts.length>0 ) return true;
	var patientMenu = new PatientMenu();
	this.add(patientMenu, TabsLayout.TabMenu);
	
	for(j=0; j<this.gridY; j++) {
		for(i=0; i<this.gridX; i++) {
			var nth = j*this.gridX+i;
			var studyArea = new StudyAreaLayout(nth);
			this.add(studyArea);
		}
	}
	
	this.navigate.hook(this);

	return true;
};

/** Handles the compare study layout/event notifications */
function CompareStudyLay() {
	this.baseConstructor(this.i18n);
};

CompareStudyLay.prototype = new Layout("CompareStudyPrototype", "html/toolItem");
CompareStudyLay.prototype.i18n="SingleStudy";
CompareStudyLay.prototype.icon="SingleStudyIcon";
CompareStudyLay.prototype.action="controller.compareStudyMode";
CompareStudyLay.prototype.events=["/patient:0", "/patient:0/conversation:compareStudy"];

CompareStudyLay.prototype.namedListener = function(nav,vname,val) {
	if( val=="SingleStudy" ) this.i18n = "CompareStudy";
	else this.i18n = "SingleStudy";
	this.icon = this.i18n+"Icon";	
};

/** Listen at the patient level to determine updates to the layout */
CompareStudyLay.prototype.navigateListener = function(nav) {
	if(!(nav && nav.conversation && nav.conversation.nav)) return;
	this.used = nav.conversation.nav.length>1;
};

/** The menu for patient tab control */
function PatientMenu() {
	// The suffix is empty as there should only be 1 instance of this menu.
	var suffix = "";
	this.baseConstructor("PatientMenu");
	
$layout/addChildren(children=patientMenu.children)$
};

PatientMenu.prototype = new Layout("PatientMenuPrototype","image/patientMenu");
/** The listener for the patient information */
PatientMenu.prototype.navigateListener = function (navigate) {
	this.navigate = navigate;
	if( ! navigate ) return;
	this.patient = navigate.external;
};
PatientMenu.prototype.events=".";
PatientMenu.prototype.navigate="/patient:0";

/** Create the study layouts containing the study tray and the image area.  Not lazy. */
function StudyAreaLayout(nth) {
	var suffix = "S"+nth;
	this.baseConstructor("StudyArea"+suffix);
	this.nth = nth;
	this.navigate = "/patient:0/study:"+nth;
	var studyTray = new StudyTrayLayout(suffix,nth);
	var even = ((nth %2)==0);
	if( studyTray.absWidth ) {
		this.add(studyTray,(even?Layout.WEST:Layout.EAST));
	} else {
		this.add(studyTray,Layout.NORTH);
	}
	
	this.add(new ReportArea(suffix));
	this.add(new SeriesAreas(suffix));
};

StudyAreaLayout.prototype = new Layout();
StudyAreaLayout.prototype.gridX = 1;
StudyAreaLayout.prototype.gridY = 2;
StudyAreaLayout.prototype.displayClass="studyArea";
StudyAreaLayout.prototype.events= ["/patient:0/conversation:compareStudy","."];
StudyAreaLayout.prototype.compareUsed = true;
StudyAreaLayout.prototype.widthEdge=3;

/**
 * This defines the listeners for navigate changes to the layout.  Computes
 * quite a few fields relevant to display menus etc.
 * These computations really belong in the individual menu items, but right now
 * it isn't yet clear how to add those individually. 
 */
StudyAreaLayout.prototype.navigateListener = function (navigate) {
	this.navigate = navigate;  
	this.used = false;
	if( ! navigate ) return;
	this.study = navigate.external;
	if( !this.study ) return;
	this.used = true;
	this.patient = navigate.parent.external;
	if( this.nth>0 && navigate.parent.conversation.compareStudy=="SingleStudy" ) {
		console.info("StudyArea: Setting used to false because compare study is single study.");
		this.used = false;
	};
};


/** Listen for changes in the compare study type */
StudyAreaLayout.prototype.namedListener = function StudyNavigateListener(nav,vname,val) {
	console.info("compare study changed",val,"study area listener.");
	if( this.nth==0 ) return;
	this.compareUsed = (val!=="SingleStudy");
	var nUsed = (this.compareUsed && this.navigate.external!=null);
	console.info("StudyLayout set compare used to",this.compareUsed,"nUsed",nUsed);
	if( nUsed!=this.used ) {
		this.used = nUsed;
		this.relayout = true;
	} 
};

/** Resize the study area - change the position of the report to left/top based on
  * available size.
  */
StudyAreaLayout.prototype.resizeListener = function() {
	if( this.width < 800 ) {
		this.gridX = 1;
		this.gridY = 2;
	} else {
		this.gridX = 2;
		this.gridY = 1;
	}
};

/** The report area displays a report study */
function ReportArea(suffix) {
	this.baseConstructor("ReportArea"+suffix);
};

ReportArea.prototype = new Layout("ReportArea","report/report");
ReportArea.prototype.events=["conversation:displayReport","conversation:studyLayout"];

ReportArea.prototype.namedListener=function(nav,vname,val) {
	this.used = false;
	if( !(nav && nav.external) ) return;

	var studyLayout = nav.conversation.studyLayout;
	var displayReport = nav.conversation.displayReport;
	console.info("Report area layout",studyLayout,"report",displayReport);
	
	if( !(studyLayout && displayReport && studyLayout!=="ShowImages") ) return;
	console.info("Displaying report",val);
	this.used = true;
	this.src = "studyUID="+nav.external.studyUID+"&amp;objectUID="+displayReport;
	var ae = nav.external.get("ae");
	if( ae ) this.src =this.src+"&amp;ae="+ae;
}; 

/** Handle the study tray layout */
function StudyTrayLayout(suffix,nth) {
	this.baseConstructor("StudyTray"+suffix);
	this.add(new StudyMenu(suffix,nth),"StudyMenu");
	$layout/addChildren(children=studyTrayLayout.children)$
};

StudyTrayLayout.prototype = new Layout("StudyTray", "image/studyTray");
StudyTrayLayout.prototype.absWidth = 135;
StudyTrayLayout.prototype.events=".";
StudyTrayLayout.prototype.navigateListener = StudyAreaLayout.prototype.navigateListener;

/** Creates the study menu top level item */
function StudyMenu(suffix,nth) {
	this.baseConstructor("StudyMenu"+suffix);
	this.nth = nth;
	this.StudyMenuItems = new StudyMenuItems(suffix);
	this.add(this.StudyMenuItems);
	this.baseLayouts = this.layouts;
};
StudyMenu.prototype = new Layout("StudyMenu","html/toolItem");
StudyMenu.prototype.events="merged:external";

/** Setup the child menu */
StudyMenu.prototype.namedListener = function(nav) {
	if( !(nav && nav.external) ) return;
	this.label = nav.external.StudyDescription;
	var pat = nav.parent.external;
	this.navigate = nav.parent;
	var navStudy = this.navigate.conversation.nav;
	this.StudyMenuItems.used = (navStudy.length>1);
	if(!this.StudyMenuItems.used) this.layouts = null;
		else this.layouts = this.baseLayouts;
	this.StudyMenuItems.items = new Array();
	var study, i,n=navStudy.length;
	console.info("StudyMenu navigate listener level",nav.level,this.label,"on",n,"Child studies.");
	// TODO - move this code into navigate proper.
	for(i=0; i<n; i++) {
		if( i==this.nth ) continue;
		study = this.navigate.external.children[navStudy[i]];
		this.StudyMenuItems.items.push(study);
	}
};

/** Contains the list of items in the study menu */
function StudyMenuItems(suffix) {
	this.baseConstructor(this.id+suffix);
};
StudyMenuItems.prototype = new Layout("StudyMenuItems","html/childList");
StudyMenuItems.prototype.itemId = "studyUID";
StudyMenuItems.prototype.listTemplate="image/studyMenuItem";
StudyMenuItems.prototype.action="controller.navStudy";


/** Defines the X of N series layout information */
function XofNSeries() {
	this.baseConstructor("XofN");
};

XofNSeries.prototype = new Layout("XofN","image/seriesNumber");

XofNSeries.prototype.events="series:0";

XofNSeries.prototype.navigateListener = function(nav) {
	this.used = false;
	if( !(nav && nav.external) ) return;
	this.series = nav.parent.getExtChildren();
	if( ! this.series ) return;
	this.used = true;
	console.info("Series UID navigated to", nav.external.seriesUID);
	this.relayout=true;
	this.n = this.series.length;
	for(this.x = 1;this.x<=this.series.length; this.x++) {
		if( nav.external.seriesUID == this.series[this.x-1].seriesUID ) break;
	}
};

/**
 * Generic display mode 
 */
function DisplayModeLay(suffix,i18n) {
	if( !i18n ) {
		i18n = suffix;
		suffix = "";
	}
	var id = i18n+suffix;
	this.baseConstructor(id);
	this.i18n = i18n;
	this.icon = i18n+"Icon";
};
DisplayModeLay.prototype = new Layout("DisplayModeLay","html/toolItem");
DisplayModeLay.prototype.events="/conversation:mode";
DisplayModeLay.prototype.action="controller.displayMode";
DisplayModeLay.prototype.showLabel=true;

/** A general mode listener - activates/de-actives given modes, plus promoting child to parent mode */
DisplayModeLay.prototype.namedListener = function (navigate, varName, newVal) {
	if( this.children && this.i18n!=newVal ) {
		// This is a top-level menu item that contains child modes, so make it reflect the
		// child mode correctly.
		var rot = this.findRotate(newVal);
		this.isActive = (rot!=null);
		if( rot ) this.copyFrom(rot);
	}
	else {
		var newActive = (this.i18n == newVal);
		if( newActive==this.isActive ) return;
		console.info("Setting mode change on",this.i18n,"to",newActive,"mode event",newVal);
		this.isActive = newActive;
	}
	this.relayout = true;
};




/** Handle the window level menu layout */
function WLMenu() {
	this.baseConstructor(this.i18n);
	var suffix="";
$layout/addChildren(children=wlMenu.children)$	
};

WLMenu.prototype = new DisplayModeLay("WindowLevel");
WLMenu.prototype.isActive = true;
WLMenu.prototype.showLabel = false;

/** Handle the zoom menu layout */
function ZoomMenu() {
	this.baseConstructor(this.i18n);
	var suffix="";
$layout/addChildren(children=zoomMenu.children)$	
};
ZoomMenu.prototype = new DisplayModeLay("Zoom");
ZoomMenu.prototype.showLabel = false;

/** Create the Spatial transforms menu layout */
function SpatMenu(suffix,studyNav) {
	this.baseConstructor(this.i18n);
	var suffix="";
$layout/addChildren(children=spatMenu.children)$	
};
SpatMenu.prototype = new DisplayModeLay("RotateRight");
SpatMenu.prototype.showLabel = false;

/**
 * The series areas contains the individual series are display objects
 */
function SeriesAreas(suffix, nth) {
	this.baseConstructor("SeriesAreas"+suffix);
	this.nth = nth;
	var i,j, seriesSuffix, imageAreas;
	for(j=0; j<this.gridY; j++) {
		for(i=0; i<this.gridX; i++) {
			nth = j*this.gridX+i;
			seriesSuffix = suffix+"Se"+nth;
			imageAreas = new ImageAreasLayout(seriesSuffix, nth);
			this.add(imageAreas);
		};
	};
};

SeriesAreas.prototype = new Layout("SeriesAreas");
SeriesAreas.prototype.gridX = 2;
SeriesAreas.prototype.gridY = 2;
SeriesAreas.prototype.events=["series:0","conversation:seriesLayout","conversation:studyLayout"];
SeriesAreas.prototype.displayClass="seriesAreas";

/** Just disable the series area if there are no available series */
SeriesAreas.prototype.navigateListener = function(nav) {
	this.used = (nav!=null && nav.external!=null);
	this.hasSeries = this.used;
	if( this.used && nav.parent.conversation && nav.parent.conversation.studyLayout=="ShowReport" ) this.used = false;
	console.info("SeriesAreas navList used,hasSeries=",this.used,this.hasSeries);
};

/** Handle the series layout settings grid X/Y wise. */
SeriesAreas.prototype.namedListener = function(nav,vname,val) {
	console.info("SeriesAreas",vname,val);
	var studyLayout = nav.conversation.studyLayout;;
	if( studyLayout==="ShowReport" ) {
		console.info("ShowReport only - not displaying series areas.");
		this.used = false;
		return;
	};
	this.used = this.hasSeries;
	console.info("SeriesArea listener",vname,"used",this.used);
	if( vname==="studyLayout" ) return;
	
	if( val==null ) val = "Layout2x2";

	this.gridX = 2;
	this.gridY = 2;
	if( val=="Layout2x2" ) return;
	if( val=="Layout2x1" || val=="Layout1x1") this.gridY = 1;
	if( val=="Layout1x2" || val=="Layout1x1" ) this.gridX = 1;
};

/** Create an images areas object */
function ImageAreasLayout(suffix, nth) {
	this.baseConstructor("ImageAreas"+suffix);
	this.navigate = "series:"+nth;
	this.nth = nth;

	var toolbar = new ImageAreasMenu(suffix);
	toolbar.imageAreas = this;
	this.add(toolbar,Layout.NORTH);

	this.used = false;
	this.origGridX = this.gridX;
	this.origGridY = this.gridY;
	var useThis = this;

	this.mousewheel = function(evt) {
		useThis.debug("Mouse wheel image area called.");
		return controller.wheelMouse(useThis,evt);
	};
	
	var i,j,layout, imageSuffix;
	for(j=0; j<this.gridY; j++) {
		for(i=0; i<this.gridX; i++) {
			var nth = j*this.gridX+i;
			imageSuffix = suffix+"I"+nth;
			layout = new ImageLayout("ImageLay"+imageSuffix,nth);
			layout.x = i;
			layout.y = j;
			this.add(layout);
		};
	};
};

ImageAreasLayout.prototype = new Layout();
ImageAreasLayout.prototype.gridX = 2;
ImageAreasLayout.prototype.gridY = 2;
ImageAreasLayout.prototype.onmousewheel="controller.wheelMouse";
ImageAreasLayout.prototype.events=[".","../conversation:seriesLayout"];
ImageAreasLayout.prototype.area="Series";

/** Defines the image area navigate listener to reset the grid size and
 * enable/disable child elements as appropriate.
 */
ImageAreasLayout.prototype.navigateListener = function(navigate) {
	this.navigate = navigate;
	if(!navigate) {
		this.external=undefined;
		return;
	}
	if( navigate.external===this.series ) {
		return;
	}
	this.series = navigate.external;
	this.relayout = true;
	var wasUsed = this.used;
	this.namedListener(navigate,"seriesLayout",(navigate.parent.conversation? navigate.parent.conversation.seriesLayout : null));
	if( wasUsed!==this.used ) this.parent.relayout =true;
	if( !this.used ) return;
	var n,imageCount = navigate.external.Viewable;
	if( imageCount<=1 ) {
		this.gridX = 1;
		this.gridY = 1;
	} else {
		this.gridX = this.origGridX;
		this.gridY = this.origGridY;
		n = this.gridX * this.gridY;
		while(n>imageCount) {
			if( this.gridX>1 && this.gridY>1 ) {
				n = (this.gridX-1)*(this.gridY-1);
				if( n < imageCount ) {
					// Try removing the bottom row as well
					n = this.gridX * (this.gridY-1);
					if( n>=imageCount ) this.gridY--;
					break;
				}
				this.gridX = this.gridX-1;
				this.gridY = this.gridY-1;
			} else if( this.gridX>1 ) {
				this.gridX = imageCount;
				break;
			} else if( this.gridY>1 ) {
				this.gridY = imageCount;
				break;
			} else break;
		}
	}
	n=this.layouts.length;
	var i;
	for(i=0; i<n; i++) {
		this.layouts[i].used = (i < this.gridX * this.gridY);
	}
};

ImageAreasLayout.prototype.namedListener = function(nav,vname,val) {
	if( !this.series ) {
		this.used = false;
		return;
	}
	var maxSeries = 100;
	if( val==="Layout1x1" ) maxSeries = 1;
	else if( val=="Layout2x1" || val=="Layout1x2") maxSeries = 2;
	else if( val=="Layout2x2" ) maxSeries = 4;
	this.used = (this.nth < maxSeries);
	console.info("ImageAreas used",this.used,"nth",this.nth,"max series",maxSeries,val);
}; 

/** The menu for image level control */
function ImageAreasMenu(suffix) {
	this.baseConstructor("ImageAreasMenu"+suffix);
	
$layout/addChildren(children=imageAreasMenu.children)$
};

ImageAreasMenu.prototype = new Layout("ImageAreasMenuPrototype","html/menu");
ImageAreasMenu.prototype.absHeight = 22;

/** This defines the listeners for navigate changes to the layout */
ImageAreasMenu.prototype.navigateListener = function SeriesMergedListener(navigate) {
	this.debug("series merged listener called.");
	this.navigate = navigate;
	var changed = this.used;
	this.used = (navigate!=null && navigate.external!=null);
	changed = (changed!=this.used);
	if( navigate ) this.debug("Changing series on",this.id,"to", navigate.id);
	if( changed && this.parent ) {
		this.parent.relayout = true;
	}
	if( navigate && navigate.external!==this.series ) {
		this.series = navigate.external;
	}
	this.relayout = true;
};

ImageAreasMenu.prototype.events=".";

