<!-- 
	 This xsl file defines how to display annotations, including text annotations, circles, shutters etc.
	 It may contain simple SVG to VML conversions, assuming certain semantics about the input source to allow
	 display under IE.
-->
<x:xsl
  pageConfig="#{PageConfig.display.Annotation}"
  xmlns:x="http://www.dcm4che.org/xero/jsf"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:m="http://www.dcm4che.org/xero/metadata/display/Annotation"
  xmlns:md="http://www.dcm4che.org/xero/metadata/display"
  xmlns:c="http://java.sun.com/jstl/core"
  xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:svg="http://www.w3.org/2000/svg"
  m:includeXsl="/image/annotationXsl.xhtml"
  md:editMarkup.script="/xero/image/MarkupEdit.js"
  md:createMarkup.script="/xero/image/MarkupCreate.js"
  md:createMarkup.script.priority="-5"
>

<x:template name="svgCopy" mode="svg" match="*">
  <xsl:copy>
    <xsl:copy-of select="@*" />
    <xsl:apply-templates mode="svg"/>
  </xsl:copy>
</x:template>

<c:if test="#{browser=='MSIE'}">

<x:template name="vmlSvgType" mode="svg" match="svg:svg|svg:g">
  <xsl:apply-templates mode="svg" />
</x:template>

<x:template name="vmlImage" mode="vml" match="svg:image[count(@class)=0 or @class!='ImageOverlay']">
  <v:image>
    <xsl:copy-of select="@*" />
    <xsl:attribute name="src"><xsl:value-of select="@xlink:href" /></xsl:attribute>
    <xsl:attribute name="style"><xsl:value-of select="concat('width: ',@width,'px; height: ',@height,'px; ',@style)" /></xsl:attribute>
 </v:image>
</x:template>

<x:template name="vmlPath" mode="vml" match="svg:path|svg:text">
  <xsl:param name="node" />
  <xsl:param name="cols" select="$node/@Columns" />
  <xsl:param name="rows" select="$node/@Rows" />
  <xsl:param name="colour"><xsl:if test="../@stroke | @stroke"><xsl:value-of select="(@stroke|../@stroke)[last()]" /></xsl:if><xsl:if test="count(../@stroke|@stroke)=0">#FFFFFF" </xsl:if></xsl:param>
  
  <xsl:element name="v:shape">
    <xsl:attribute name="type">#<xsl:value-of select="@id" /></xsl:attribute>
    <xsl:attribute name="style"><xsl:value-of select="concat('width: ',$cols,'; height: ',$rows,';')" /> left: -1; top: -1;</xsl:attribute>
    <xsl:attribute name="coordsize"><xsl:value-of select="concat($cols,' ',$rows)" /></xsl:attribute>
    <xsl:if test="$mode='editMarkup'">
      <xsl:attribute name="onmousedown">return markupEdit.mouseDown(window.event);</xsl:attribute>
    </xsl:if>
    <xsl:attribute name="strokecolor"><xsl:value-of select="$colour" /></xsl:attribute>
    <xsl:attribute name="fillcolor"><xsl:value-of select="$colour" /></xsl:attribute>
  </xsl:element>
</x:template>

<!-- Iterate over all the shapes references from the svg:g element. -->
<x:template name="ieUseShape" mode="svg"  xmlns:xlink="http://www.w3.org/1999/xlink" match="svg:use">
  <xsl:param name="loc" />
  <xsl:param name="imageNode" select=".." />
  <xsl:param name="cols" select="$imageNode/@Columns" />
  <xsl:param name="rows" select="$imageNode/@Rows" />
  <xsl:param name="id"><xsl:value-of select="substring(@xlink:href,2)"/></xsl:param>
  <xsl:apply-templates select="ancestor::se:results/descendant::svg:g[@id=$id]/*" mode="vml">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$imageNode" />
  </xsl:apply-templates>
</x:template>

<!-- Match text elements, and convert them into VML shape types. -->
<x:template name="iesvgCopyText" mode="svg" match="svg:text">
  <xsl:param name="rot"><xsl:choose><xsl:when test="contains(@transform,'rotate(')"><xsl:value-of select="substring-before(substring-after(@transform,'rotate('),',')" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
  <!-- TODO Fix the flipping of text - undo it somehow -->
  <xsl:param name="flip"><xsl:choose><xsl:when test="contains(@transform,'scale')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
  <xsl:param name="nflip" select="1 - $flip" />
  <xsl:param name="x1" select="floor(@x)" />
  <xsl:param name="y1" select="floor(@y)" />
  <xsl:param name="x2"><xsl:choose><xsl:when test="$rot=90 or $rot=270"><xsl:value-of select="floor(@x)" /></xsl:when><xsl:when test="$rot=180"><xsl:value-of select="floor(@x - @textLength)" /></xsl:when><xsl:otherwise><xsl:value-of select="floor(@x + @textLength)" /></xsl:otherwise></xsl:choose></xsl:param>
  <xsl:param name="y2"><xsl:choose><xsl:when test="$rot=0 or $rot=180"><xsl:value-of select="floor(@y)" /></xsl:when><xsl:when test="$rot=270"><xsl:value-of select="floor(@y - @textLength)" /></xsl:when><xsl:otherwise><xsl:value-of select="floor(@y + @textLength)" /></xsl:otherwise></xsl:choose></xsl:param>
  <xsl:param name="path" select="concat('m',$x1 * $nflip + $x2 * $flip,',',$y1 * $nflip + $y2 * $flip,' l',$x2 * $nflip + $x1 * $flip,',',$y2 * $nflip + $y1 * $flip)" />
  <xsl:param name="colour"><xsl:if test="../@stroke | @stroke"><xsl:value-of select="(@stroke|../@stroke)[last()]" /></xsl:if><xsl:if test="count(../@stroke|@stroke)=0">#FFFFFF" </xsl:if></xsl:param>
  <v:shapeType filled='t' stroked='f'>
    <xsl:copy-of select="@id" />
    <xsl:attribute name="fillcolor"><xsl:value-of select="$colour" /></xsl:attribute>
    <xsl:attribute name="path"><xsl:value-of select="$path" /></xsl:attribute>
    <xsl:attribute name="style"><xsl:if test="$flip = 1">flip: x;</xsl:if></xsl:attribute>
    <v:path textpathok="True" />
    <v:textpath on="True">
      <xsl:attribute name="style">font-size: <xsl:value-of select="@font-size div 2.3" />;</xsl:attribute>
      <xsl:attribute name="string"><xsl:value-of select="text()" /></xsl:attribute>
    </v:textpath>
  </v:shapeType>
</x:template>

</c:if>

<x:template name="svgCopyPathMouseDown" mode="svg" match="svg:path">
  <xsl:param name="colour"><xsl:if test="../@stroke | @stroke"><xsl:value-of select="(@stroke|../@stroke)[last()]" /></xsl:if><xsl:if test="count(../@stroke|@stroke)=0">#FFFFFF" </xsl:if></xsl:param>
  <xsl:element name="#{browser=='MSIE'?'v:shapeType':'svg:path'}">
    <xsl:copy-of select="@*" />
    <c:if test="#{browser=='MSIE'}">
      <xsl:attribute name="coordsize">1,1</xsl:attribute>
      <xsl:attribute name="strokeweight"><xsl:choose><xsl:when test="@stroke-width"><xsl:value-of select="@stroke-width" /></xsl:when><xsl:otherwise>2</xsl:otherwise></xsl:choose></xsl:attribute>
      <xsl:if test="count(@path)=0">
        <xsl:attribute name="path"><xsl:value-of select="@d" /></xsl:attribute>
      </xsl:if>
      <xsl:attribute name="fillcolor"><xsl:value-of select="$colour" /></xsl:attribute>
      <xsl:if test="@fill='none'">
        <xsl:attribute name="filled">f</xsl:attribute>
      </xsl:if>
      <xsl:attribute name="strokecolor"><xsl:value-of select="$colour" /></xsl:attribute>
    </c:if>
    <xsl:if test="$mode='editMarkup'">
      <xsl:attribute name="onmousedown">return markupEdit.mouseDown(evt);</xsl:attribute>
    </xsl:if>
  </xsl:element>
</x:template>

<!-- Avoids copying image overlays that are of class ImageOverlay as those are image specific -->
<x:template name="svgImage" match="svg:image" mode="svg">
 <xsl:if test="count(@class)=0 or @class!='ImageOverlay'">
  <c:if test="#{browser!='MSIE'}">
   <xsl:copy-of select="." />
  </c:if>
 </xsl:if>
</x:template>

<!-- Adds the SVG use section to the image. -->
<x:template name="addUse">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <c:choose>
   <c:when test="#{browser=='MSIE'}">
	 <xsl:for-each select="$node/svg:use[@class!='DISPLAY' or count(@class)=0]">
	   <xsl:apply-templates mode="svg" select=".">
	     <xsl:with-param name="loc" select="$loc" />
	   </xsl:apply-templates>
	 </xsl:for-each>
   </c:when>
   <c:otherwise>
     <xsl:copy-of select="$node/svg:use[@class!='DISPLAY' or count(@class)=0]" />
   </c:otherwise>
 </c:choose>
 <xsl:apply-templates mode="svgOverlay" select="$node/svg:use[@class='Overlay']">
  <xsl:with-param name="loc" select="$loc" />
  <xsl:with-param name="node" select="$node" />
 </xsl:apply-templates>
</x:template>

<!-- Copies in the individual overlays and modifies them to add the object UID -->
<x:template name="imageOverlaySvg" mode="svgOverlay"  xmlns:xlink="http://www.w3.org/1999/xlink" match="svg:use[@class='Overlay']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="id"><xsl:value-of select="substring(@xlink:href,2)"/></xsl:param>
  <xsl:for-each select="ancestor::se:results/descendant::svg:g[@id=$id]/svg:image[@class='ImageOverlay']">
    <xsl:element name="#{browser=='MSIE'?'v:image' : 'svg:image'}">
      <xsl:copy-of select="@*" />
      <xsl:attribute name="xlink:href"><xsl:value-of select="concat(@xlink:href,'&amp;objectUID=',$node/@SOPInstanceUID)" /></xsl:attribute>
      <xsl:attribute name="src"><xsl:value-of select="concat(@xlink:href,'&amp;objectUID=',$node/@SOPInstanceUID)" /></xsl:attribute>
      <xsl:attribute name="style"><xsl:value-of select="concat('width: ',@width,'px; height: ',@height,'px; ',@style)" /></xsl:attribute>
   </xsl:element>
  </xsl:for-each>
</x:template>

<!-- Adds the SVG use section to the image. -->
<x:template name="addUseDisplay">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <c:choose>
   <c:when test="#{browser=='MSIE'}">
	 <xsl:for-each select="$node/svg:use[@class='DISPLAY']">
	   <xsl:apply-templates mode="svg" select=".">
	     <xsl:with-param name="loc">1000,1000,</xsl:with-param>
	   </xsl:apply-templates>
	 </xsl:for-each>
   </c:when>
   <c:otherwise>
     <xsl:copy-of select="$node/svg:use[@class='DISPLAY']" />
   </c:otherwise>
 </c:choose>
</x:template>

</x:xsl>