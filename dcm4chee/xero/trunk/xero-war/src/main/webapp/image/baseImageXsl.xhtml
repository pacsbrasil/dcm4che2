<!-- 
	 The base image contains the code to generate the current image to display.
-->
<x:xsl
  pageConfig="#{(pageConfig!=null ? pageConfig : metadata.image.imageXsl).baseImageXsl}"
  xmlns:x="http://www.dcm4che.org/xero/jsf"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:m="http://www.dcm4che.org/xero/metadata/image/imageXsl/baseImageXsl"
  xmlns:c="http://java.sun.com/jstl/core"
  xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://www.w3.org/1999/xhtml"
  m:includeXsl="/image/baseImageXsl.xhtml"
>


<x:template name="miscLayout" mode="newlayout" match="*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <div>
  <xsl:copy-of select="@*" />
  <xsl:attribute name="style">float: left;
   <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:apply-templates mode="newlayout" select="*">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
   <xsl:with-param name="custNode" select="$custNode" />
  </xsl:apply-templates>
 </div>
</x:template>

<x:template name="hboxLayout" match="xul:hbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <xsl:param name="sum" select="sum(*/@width)" />
 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
    <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="round($width * @width div $sum)" />
    <xsl:with-param name="height" select="$height" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select="$custNode" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<x:template name="newLayout">
  <xsl:param name="width" />
  <xsl:param name="height" />
  <xsl:param name="node" />
  <xsl:param name="custNode" select="/.." />
  <xsl:apply-templates select='.' mode='newlayout'>
    <xsl:with-param name="loc" select="concat($width,',',$height,',')" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select="$custNode" />
  </xsl:apply-templates>
</x:template>

<!-- Copy HTML elements as required. -->
<x:template name="copyHtml" mode="newlayout" match="h:*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.."/>
 <xsl:if test="count(@mode)=0 or @mode=$mode">
  <xsl:copy>
   <xsl:copy-of select="@*" />
   <xsl:if test="@active=$mode"><xsl:attribute name="class">active <xsl:value-of select="@class" /></xsl:attribute></xsl:if>
   <xsl:call-template name="oncommandHandle">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select="$custNode" />
   </xsl:call-template>
   <xsl:apply-templates mode="newlayout">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select="$custNode" />
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:if>
</x:template>

<!-- Copy HTML elements as required for disabled -->
<x:template name="copyHtmlDisabled" mode="disabled" match="h:*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <xsl:if test="count(@mode)=0 or @mode=$mode or @mode=concat('-',$mode)">
  <xsl:copy>
   <xsl:copy-of select="@*" />
   <xsl:attribute name="class">disabled <xsl:value-of select="@class" /></xsl:attribute>
   <xsl:call-template name="oncommandHandle">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select="$custNode" />
   </xsl:call-template>
   <xsl:apply-templates mode="disabled">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select="$custNode" />
   </xsl:apply-templates>
  </xsl:copy>
 </xsl:if>
</x:template>

<x:template name="imageNavEnable" mode="newlayout" match="h:a[@class='imageNav']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:param name="custSeriesNode" select="$custNode/self::se:series" />
  <xsl:param name="viewStart"><xsl:choose><xsl:when test="$custSeriesNode/@viewStart"><xsl:value-of select="$custSeriesNode/@viewStart" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
  <xsl:variable name="seriesLay" select="$custNode/self::se:series/@pageSize" />  
  <xsl:variable name="offset" select="$viewStart + @dir + $seriesLay * @page" />
  <xsl:choose>
    <xsl:when test="$offset >= 0 and $node/self::se:series/@Viewable > $offset ">
	  <xsl:call-template name="copyHtml">
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$node" />
       <xsl:with-param name="custNode" select="$custNode" />
	  </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
	  <xsl:call-template name="copyHtmlDisabled">
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$node" />
       <xsl:with-param name="custNode" select="$custNode" />
	  </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</x:template>

<x:template name="imageNumber" mode="newlayout" match="h:span[@class='imageNumber']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:param name="custSeriesNode" select="$custNode/self::se:series" />
  <xsl:param name="viewStart"><xsl:choose><xsl:when test="$custSeriesNode/@viewStart"><xsl:value-of select="$custSeriesNode/@viewStart" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
  <xsl:if test="$node/self::se:series/@Viewable > 1">
    <span><xsl:value-of select="1+$viewStart" /> of <xsl:value-of select="$node/self::se:series/@Viewable" /></span>
  </xsl:if>
</x:template>


<x:template name="vboxLayout" match="xul:vbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <xsl:param name="sum" select="sum(*/@height)" />
 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="$width" />
    <xsl:with-param name="height" select="round($height * @height div $sum)" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select="$custNode" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<!-- Figures out the arguments to a standard WADO call, getting the region and so on setup
     correctly
  -->
<x:template name="imageWado" mode="wadoArgsNode" match="se:image">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wr" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wr,','))" />
 <xsl:param name="hr" select="substring-after($wr,',')" />
 <xsl:param name="cx" select="number(substring-before($hr,','))" />
 <xsl:param name="cxr" select="substring-after($hr,',')" />
 <xsl:param name="cy" select="number(substring-before($cxr,','))" />
 <xsl:param name="cyr" select="substring-after($cxr,',')" />
 <xsl:param name="s" select="number(substring-before($cyr,','))" /> 

 <xsl:param name="objectUID" select="@SOPInstanceUID" />
 <xsl:param name="frame" select="@frame" />
 <xsl:param name="wWidth"><xsl:choose><xsl:when test="$custNode[@windowWidth]"><xsl:value-of select="$custNode[@windowWidth][last()]/@windowWidth" /></xsl:when><xsl:otherwise><xsl:value-of select="@windowWidth" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="wCenter"><xsl:choose><xsl:when test="$custNode[@windowCenter]"><xsl:value-of select="$custNode[@windowCenter][last()]/@windowCenter" /></xsl:when><xsl:otherwise><xsl:value-of select="@windowCenter" /></xsl:otherwise></xsl:choose></xsl:param>
 
 <xsl:param name="orx"><xsl:choose><xsl:when test="$cx - $w div (2 * $s) &lt; 0">0</xsl:when><xsl:otherwise><xsl:value-of select="$cx - $w div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="ory"><xsl:choose><xsl:when test="$cy - $h div (2 * $s) &lt; 0">0</xsl:when><xsl:otherwise><xsl:value-of select="$cy - $h div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="brx"><xsl:choose><xsl:when test="$cx + $w div (2 * $s) >= @Columns"><xsl:value-of select="@Columns" /></xsl:when><xsl:otherwise><xsl:value-of select="$cx + $w div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="bry"><xsl:choose><xsl:when test="$cy + $h div (2 * $s) >= @Rows"><xsl:value-of select="@Rows" /></xsl:when><xsl:otherwise><xsl:value-of select="$cy + $h div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 
 <xsl:attribute name="#{browser=='MSIE'?'src':'xlink:href'}">/xero/wado?requestType=WADO<xsl:value-of select="concat('&amp;studyUID=1&amp;seriesUID=1&amp;objectUID=',@SOPInstanceUID)" /><xsl:if test="$wCenter!=''">&amp;windowCenter=<xsl:value-of select="$wCenter" />&amp;windowWidth=<xsl:value-of select="$wWidth" /></xsl:if><xsl:value-of select="concat('&amp;region=',$orx div @Columns,',',$ory div @Rows,',',$brx div @Columns,',',$bry div @Rows)" />&amp;rows=<xsl:value-of select="round(($bry - $ory) * $s)" /><xsl:if test="$frame">&amp;frameNumber=<xsl:value-of select="$frame" /></xsl:if><xsl:if test="@gspsUID">&amp;presentationUID=<xsl:value-of select="@gspsUID" /></xsl:if></xsl:attribute>
 <c:if test="#{browser=='MSIE'}">
  <xsl:attribute name="style"><xsl:value-of select="concat('left:',$orx,';top:',$ory,';width:',$brx - $orx,';height:',$bry - $ory,';')" /></xsl:attribute>
 </c:if>
 <c:if test="#{browser!='MSIE'}">
  <xsl:attribute name="width"><xsl:value-of select="$brx - $orx" /></xsl:attribute>
  <xsl:attribute name="height"><xsl:value-of select="$bry - $ory" /></xsl:attribute>
  <xsl:attribute name="transform">translate(<xsl:value-of select="concat($orx,',',$ory)" />)</xsl:attribute>
 </c:if>
 <xsl:attribute name="Rows"><xsl:value-of select="@Rows" /></xsl:attribute>
 <xsl:attribute name="Columns"><xsl:value-of select="@Columns" /></xsl:attribute>
 <xsl:attribute name="minPixel"><xsl:value-of select="@minPixel" /></xsl:attribute>
 <xsl:attribute name="maxPixel"><xsl:value-of select="@maxPixel" /></xsl:attribute>
 <xsl:attribute name="windowWidth"><xsl:value-of select="$wWidth" /></xsl:attribute>
 <xsl:attribute name="windowCenter"><xsl:value-of select="$wCenter" /></xsl:attribute>
</x:template>

<!-- Generate arguments for the current location of this object based on the data node
     associated with this object, not based on the type of the argument.
  -->

<!-- Do nothing by default for all nodes in hrefArgsNode matching. -->  
<x:template name="emptyArgs" mode="hrefArgsNode" match="*" />

<x:template name="imageArgs" mode="hrefArgsNode" match="se:image"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;objectUID=<xsl:value-of select="@SOPInstanceUID" /><xsl:if test="@frame">&amp;frame=<xsl:value-of select="@frame" /></xsl:if>&amp;position=<xsl:value-of select="@Position" /></x:template>

<x:template name="seriesArgs" mode="hrefArgsNode" match="se:series"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;seriesUID=<xsl:value-of select="@SeriesInstanceUID" /></x:template>

<x:template name="studyArgs" mode="hrefArgsNode" match="se:study"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;studyUID=<xsl:value-of select="@StudyInstanceUID" /></x:template>

<x:template name="patientArgs" mode="hrefArgsNode" match="se:patient"><xsl:if test="@PatientIdentifier">&amp;pid=<xsl:value-of select="./@PatientIdentifier" /></xsl:if></x:template>

<x:template name="defaultHrefArgs">&amp;cid=<xsl:value-of select="$cid" /></x:template>

<x:template name="regionHref" mode="hrefArgsNode" match="h:a[@class='zpSlider']"><xsl:param name="loc" /><xsl:param name="node" /><xsl:param name="custNode" /><xsl:variable name="topLeft"><xsl:choose><xsl:when test="$custNode/@topLeft"><xsl:value-of select="$custNode/@topLeft[last()]" /></xsl:when><xsl:when test="$node/@topLeft"><xsl:value-of select="$node/@topLeft" /></xsl:when><xsl:otherwise>1,1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="bottomRight"><xsl:choose><xsl:when test="$custNode/@bottomRight"><xsl:value-of select="$custNode/@bottomRight[last()]" /></xsl:when><xsl:when test="$node/@bottomRight"><xsl:value-of select="$node/@bottomRight" /></xsl:when><xsl:otherwise><xsl:value-of select="concat($node/@Columns,',',$node/@Rows)" /></xsl:otherwise></xsl:choose></xsl:variable>&amp;topLeft=<xsl:value-of select="concat($topLeft,'&amp;bottomRight=',$bottomRight,'&amp;rows=',$node/@Rows,'&amp;columns=',$node/@Columns,'&amp;relZoom=',@zoom)" /></x:template>

<x:template name="panHref" mode="hrefArgsNode" match="h:div[@mode='zoomPan']"><xsl:param name="loc" /><xsl:param name="node" /><xsl:param name="custNode" /><xsl:variable name="topLeft"><xsl:choose><xsl:when test="$custNode/@topLeft"><xsl:value-of select="$custNode/@topLeft[last()]" /></xsl:when><xsl:when test="$node/@topLeft"><xsl:value-of select="$node/@topLeft" /></xsl:when><xsl:otherwise>1,1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="bottomRight"><xsl:choose><xsl:when test="$custNode/@bottomRight"><xsl:value-of select="$custNode/@bottomRight[last()]" /></xsl:when><xsl:when test="$node/@bottomRight"><xsl:value-of select="$node/@bottomRight" /></xsl:when><xsl:otherwise><xsl:value-of select="concat($node/@Columns,',',$node/@Rows)" /></xsl:otherwise></xsl:choose></xsl:variable>&amp;topLeft=<xsl:value-of select="concat($topLeft,'&amp;bottomRight=',$bottomRight,'&amp;rows=',$node/@Rows,'&amp;columns=',$node/@Columns)" /></x:template>

<!-- Adds the relative position for image navigation. -->
<x:template name="imageNav" mode="hrefArgsNode" match="h:a[@class='imageNav']">
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:param name="custSeriesNode" select="$custNode/self::se:series" />
  <xsl:param name="viewStart"><xsl:choose><xsl:when test="$custSeriesNode/@viewStart"><xsl:value-of select="$custSeriesNode/@viewStart" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
  <xsl:variable name="seriesLay" select="$custNode/self::se:series/@pageSize" />  
  <xsl:variable name="offset" select="$viewStart + @dir + $seriesLay * @page" />
  <xsl:value-of select="concat('&amp;position=',$offset)" />
</x:template>


<!-- Enable/highlight the active zoom element -->
<x:template name="highlightZoom" mode="newlayout" match="se:highlightZoom">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:variable name="topLeft"><xsl:choose><xsl:when test="$custNode/@topLeft"><xsl:value-of select="$custNode/@topLeft[last()]" /></xsl:when><xsl:when test="$node/@topLeft"><xsl:value-of select="$node/@topLeft" /></xsl:when><xsl:otherwise>1,1</xsl:otherwise></xsl:choose></xsl:variable>
  <xsl:variable name="bottomRight"><xsl:choose><xsl:when test="$custNode/@bottomRight"><xsl:value-of select="$custNode/@bottomRight[last()]" /></xsl:when><xsl:when test="$node/@bottomRight"><xsl:value-of select="$node/@bottomRight" /></xsl:when><xsl:otherwise><xsl:value-of select="concat($node/@Columns,',',$node/@Rows)" /></xsl:otherwise></xsl:choose></xsl:variable>
  <xsl:variable name="compZoom" select="$node/@Columns div (substring-before($bottomRight,',') - substring-before($topLeft,','))" />
  <xsl:variable name="zoom" select="../@zoom" />
  <xsl:choose>
    <xsl:when test=" 0.5 > ($zoom - $compZoom)  and 0.5 > ($compZoom - $zoom)">
      <img src="/xero/img/zoomScaleActive.png" alt="|" width="32" height="17"/>
    </xsl:when>
    <xsl:otherwise>
      <img src="/xero/img/zoomScale.png" alt="|" width="32" height="17" />
    </xsl:otherwise>
  </xsl:choose>
</x:template>
  
<!-- Adds command handling to this object -->
<x:template name="oncommandHandle">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
 <xsl:if test="@oncommand">
   <xsl:attribute name="href">
     <xsl:value-of select="@oncommand" />
     <xsl:apply-templates mode="hrefArgsNode" select="current()" >
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
      <xsl:with-param name="custNode" select="$custNode" />
     </xsl:apply-templates><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="." />
      <xsl:with-param name="custNode" select="$custNode" />
     </xsl:apply-templates></xsl:attribute>
   <xsl:if test="$jsEnabled">
     <xsl:attribute name="onmousedown">return displayXslt.action(this);</xsl:attribute>
   </xsl:if>
 </xsl:if>
</x:template>

<!-- Over-write some handling for IE 6 -->
<c:if test="#{browser=='MSIE'}">
 <c:if test="#{browserVersion &lt; 7.0}">
 <x:template name="fixHoverIE" mode="newlayout" match="h:li[h:ul]">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:copy>
   <xsl:copy-of select="@*" />

   <xsl:choose>
    <xsl:when test="h:a">
     <a>
      <xsl:attribute name="href">#</xsl:attribute>
      <xsl:copy-of select="h:a/@*" />
      <xsl:apply-templates mode="newlayout" select="h:a/*|h:a/text()" >
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$node" />
      </xsl:apply-templates>
      <table border="0" cellpadding="0" cellspacing="0"><tr><td>
        <xsl:apply-templates mode="newlayout" select="h:ul" >
         <xsl:with-param name="loc" select="$loc" />
         <xsl:with-param name="node" select="$node" />
        </xsl:apply-templates>
      </td></tr></table>
     </a>
    </xsl:when>
    <xsl:otherwise>
     <a href="#">
      <xsl:apply-templates mode="newlayout" select="h:*[name()!='ul']|text()" >
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$node" />
      </xsl:apply-templates>
      <table border="0" cellpadding="0" cellspacing="0"><tr><td>
        <xsl:apply-templates mode="newlayout" select="h:ul" >
         <xsl:with-param name="loc" select="$loc" />
         <xsl:with-param name="node" select="$node" />
        </xsl:apply-templates>
      </td></tr></table>
     </a>
    </xsl:otherwise>
   </xsl:choose>
   </xsl:copy>
  </x:template>
 </c:if>
</c:if>

<!-- Displays a toolbar for the page, study, series or sometimes image -->
<x:template name="toolbarDiv" mode="newlayout" match="h:div[@toolbarRef]">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.." />
   
 <xsl:param name="toolbarId" select='./@toolbarRef' />
 <xsl:param name="thisToolbar" select="$toolbarNode/h:div[@id=$toolbarId]" />
 
 <xsl:choose>
   <xsl:when test="count($thisToolbar/@*)=1">
     <!-- Generate the toolbar from the toolbar layout information -->
     <xsl:apply-templates select="$thisToolbar/*" mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
      <xsl:with-param name="custNode" select="$custNode" />
     </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
    <xsl:copy>
     <xsl:copy-of select="$thisToolbar/@*" />

     <!-- Generate the toolbar from the toolbar layout information -->
     <xsl:apply-templates select="$thisToolbar/*" mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
      <xsl:with-param name="custNode" select="$custNode" />
     </xsl:apply-templates>    
    </xsl:copy>
   </xsl:otherwise>
 </xsl:choose>  
</x:template>

<x:template name="styleSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 width:<xsl:value-of select="$w" />px; height:<xsl:value-of select="$h" />px;
</x:template>

<x:template name="attributeSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 <xsl:attribute name="width"><xsl:value-of select="$w" /></xsl:attribute>
 <xsl:attribute name="height"><xsl:value-of select="$h" /></xsl:attribute>
</x:template>

<!-- Adds an attributes or child nodes of the image node.  A separate overlay call may need
  to be made for overlay information following the image node (if any). -->
<x:template name="imageOverlay">         
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:param name="overlayId" select='./@overlay' />
 <xsl:param name="overlayNode" select="$toolbarNode/*[@id=$overlayId]" />
 <xsl:if test="count($overlayNode)>0">
  <xsl:apply-templates select="$overlayNode/*" mode="newlayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
   <xsl:with-param name="custNode" select="$custNode" />
  </xsl:apply-templates>
 </xsl:if>
</x:template>

<!-- Figures out the top-left hand coordinates in image coordinates, comma separated -->
<x:template name="addCoordAttributes">
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wr" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wr,','))" />
 <xsl:param name="hr" select="substring-after($wr,',')" />
 <xsl:param name="cx" select="number(substring-before($hr,','))" />
 <xsl:param name="cxr" select="substring-after($hr,',')" />
 <xsl:param name="cy" select="number(substring-before($cxr,','))" />
 <xsl:param name="cyr" select="substring-after($cxr,',')" />
 <xsl:param name="s" select="number(substring-before($cyr,','))" />
 
 <xsl:param name="orx" select="$cx - $w div (2 * $s)" />
 <xsl:param name="ory" select="$cy - $h div (2 * $s)" />
 
 <!-- Include the VML attributes all the time as they are easier to parse than viewbox -->
 <xsl:attribute name="coordorigin"><xsl:value-of select="concat($orx,',',$ory)" /></xsl:attribute>
 <xsl:attribute name="coordsize"><xsl:value-of select="concat($w div $s,',',$h div $s)" /></xsl:attribute>
 <xsl:attribute name="scl"><xsl:value-of select="$s" /></xsl:attribute>
 <!-- Don't bother including the viewBox if it isn't SVG rendering. -->
 <c:if test="${browser!='MSIE'}">
  <xsl:attribute name="viewBox"><xsl:value-of select="concat($orx,',',$ory,',',$w div $s,',',$h div $s)" /></xsl:attribute>
  <xsl:attribute name="x">-<xsl:value-of select="$w div 2" /></xsl:attribute>
  <xsl:attribute name="y">-<xsl:value-of select="$h div 2" /></xsl:attribute>
 </c:if>
 <!-- Also include width/height for JavaScript to use. -->
</x:template>

<x:template name="addImage">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:element name="#{browser=='MSIE'?'v:image':'svg:image'}">
  <xsl:attribute name="preserveAspectRatio">none</xsl:attribute>
  <xsl:attribute name="id">img<xsl:value-of select="$custNode/@id[last()]" /></xsl:attribute>
  <xsl:apply-templates select="$node" mode="wadoArgsNode" ><xsl:with-param name="loc" select="$loc" /><xsl:with-param name="node" select="." /><xsl:with-param name="custNode" select="$custNode" /></xsl:apply-templates>
  <xsl:apply-templates mode="newlayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
   <xsl:with-param name="custNode" select="$custNode" />
  </xsl:apply-templates>
 </xsl:element>
</x:template>

<!-- The low resolution image is added for pan/zoom currently. -->
<x:template name="addLowResImage">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:param name="xs" select="256 * $node/@Columns div $node/@Rows" />

 <xsl:if test="$mode = 'zoomPan'">
  <xsl:element name="#{browser=='MSIE'?'v:image':'svg:image'}">
   <xsl:attribute name="id">lowres<xsl:value-of select="@id" /></xsl:attribute>
   <xsl:apply-templates select="$node" mode="wadoArgsNode" >
     <xsl:with-param name="loc" select="concat(256,',',256,',',$node/@Columns div 2,',',$node/@Rows div 2,',',256 div $node/@Rows,',')" />
     <xsl:with-param name="node" select="." />
	 <xsl:with-param name="custNode" select="$custNode" />
   </xsl:apply-templates>
  </xsl:element>
 </xsl:if>
</x:template>

<!-- Renders the image group, centered at 0,0 to provide a centered display, and include overlays etc - calls the image, shutter etc groups. 
  The returned object is the object that has the pan translation applied to it, and it is applied in image coordinates, not display coordinates.
  -->
<x:template name="imageViewport" mode="imageViewport" match="*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" select="/.."/>
 <xsl:element name="#{browser=='MSIE'?'v:group':'svg:svg'}">
  <xsl:attribute name="class">imageGroup</xsl:attribute>
  <xsl:attribute name="style"><xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template></xsl:attribute>
  <!-- TODO this should come from meta-data as a defined list, at least for the non-attribute portions. -->
  <xsl:call-template name="addCoordAttributes"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
  <xsl:call-template name="attributeSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
  <xsl:call-template name="addLowResImage"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /><xsl:with-param name="custNode" select="$custNode" /></xsl:call-template>
  <xsl:call-template name="addImage"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /><xsl:with-param name="custNode" select="$custNode" /></xsl:call-template>
  <xsl:call-template name="addUse"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /></xsl:call-template>
 </xsl:element>
</x:template>

<!-- 
DISA=Displayed area, ie choose magnify, scale to fit or true size.
Change image display to depend on 5 values:
w, h are the pixel value width and height of the view port
cx, cy are the center x and center y positions of the image in image coordinates
zoom is the zoom amount to use as a factor to convert image coordinates to screen coordinates.
Then:
x = (x_im -cx) * z + w/2
x_im = (x - w/2 )/z + cx

For specified region - use region center coordinates & zoom level directly.
For magnify, use use zoom level from GSPS and center coordinates again
For true size, use zoom level calculated from display size & spacing, and center coordinates again.

Calculate requested region based on available space.
Calculate rows/columns based on the calculated region converted into displayed pixels
Calculate top-left hand as -w/2z + cx,-h/2z+cy and coordinate range as w/z,h/z
Width and height of displayed area as are specified.

If no mode is specified, then calculate magnify as the smallest area that will cause the image to fit, 
and cx,cy = width /2, height/2

 -->
<x:template name="imageDISA">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />

 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="sizeNode" select="$custNode[@size][last()]" />
 <xsl:param name="gspsSizeNode" select="$node[@size]" />
 <xsl:choose>
  <xsl:when test="count($sizeNode)>0">
   <xsl:apply-templates mode="imageSize" select="$sizeNode">
    <xsl:with-param name="cur" select="current()" />
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select='$custNode' />
   </xsl:apply-templates>
  </xsl:when>
  <xsl:when test="count($gspsSizeNode)>0">
   <xsl:apply-templates mode="imageSize" select="$gspsSizeNode">
    <xsl:with-param name="cur" select="current()" />
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select='$custNode' />
   </xsl:apply-templates>
  </xsl:when>
  <xsl:otherwise>
   <xsl:call-template name="defaultImageSize">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select='$custNode' />
   </xsl:call-template>
  </xsl:otherwise>
 </xsl:choose>
</x:template> 

<!-- For when there isn't any specified element for the image size -->
<x:template name="defaultImageSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:param name="s"><xsl:choose>
   <xsl:when test="$h div $node/@Rows &lt; $w div $node/@Columns"><xsl:value-of select="$h div $node/@Rows" /></xsl:when>
   <xsl:otherwise><xsl:value-of select="$w div $node/@Columns" /></xsl:otherwise>
  </xsl:choose></xsl:param>
  <xsl:message>Default scale <xsl:value-of select="concat('w=',$w,' h=',$h,' cols=',$node/@Columns,' rows=',$node/@Rows,' s=',$s)" /></xsl:message>
 <xsl:call-template name="imageViewport">
  <xsl:with-param name="loc" select="concat($loc,$node/@Columns div 2,',',$node/@Rows div 2,',',$s,',')" />
  <xsl:with-param name="node" select="$node" />
  <xsl:with-param name="custNode" select='$custNode' />
 </xsl:call-template>
</x:template>

<!-- For scale to fit, the center in image pixels is just the center of the pixel values,
     while the zoom is figured out so that the given region fits correctly.  Values can be outside
     the image area.
 --> 
<x:template name="scaleToFit" mode="imageSize" match="*[@size='SCALE_TO_FIT']">
 <xsl:param name="cur" />
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />

 <xsl:param name="left" select="number(substring-before(@topLeft,','))" />
 <xsl:param name="top" select="number(substring-after(@topLeft,','))" />
 <xsl:param name="right" select="number(substring-before(@bottomRight,','))" />
 <xsl:param name="bottom" select="number(substring-after(@bottomRight,','))" />
 <xsl:param name="cx" select="($left+$right) div 2" />
 <xsl:param name="cy" select="($bottom+$top) div 2" />
 <xsl:param name="sx" select="$w div ( $right - $left)" />
 <xsl:param name="sy" select="$h div ($bottom - $top)" />
 <xsl:choose>
  <xsl:when test="$sx > $sy">
   <xsl:apply-templates mode="imageViewport" select="$cur">
    <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$sy,',')" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select='$custNode' />
   </xsl:apply-templates>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates mode="imageViewport" select="$cur">
    <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$sx,',')" />
    <xsl:with-param name="node" select="$node" />
    <xsl:with-param name="custNode" select='$custNode' />
   </xsl:apply-templates>
  </xsl:otherwise>
 </xsl:choose>
</x:template>
 
<x:template name="magnify" mode="imageSize" match="*[@size='MAGNIFY']">
 <xsl:param name="cur" />
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />

 <xsl:param name="left" select="number(substring-before(@topLeft,','))" />
 <xsl:param name="top" select="number(substring-after(@topLeft,','))" />
 <xsl:param name="right" select="number(substring-before(@bottomRight,','))" />
 <xsl:param name="bottom" select="number(substring-after(@bottomRight,','))" />
 <xsl:param name="cx" select="($left+$right) div 2" />
 <xsl:param name="cy" select="($bottom+$top) div 2" />
 <xsl:param name="s" select="@magnify" />
 <xsl:apply-templates mode="imageViewport" select="$cur">
  <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$s,',')" />
  <xsl:with-param name="node" select="$node" />
  <xsl:with-param name="custNode" select='$custNode' />
 </xsl:apply-templates>
</x:template>

<x:template name="trueSize" mode="imageSize" match="*[@size='TRUE_SIZE']">
 <xsl:param name="cur" />
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />

 <xsl:param name="left" select="number(substring-before(@topLeft,','))" />
 <xsl:param name="top" select="number(substring-after(@topLeft,','))" />
 <xsl:param name="right" select="number(substring-before(@bottomRight,','))" />
 <xsl:param name="bottom" select="number(substring-after(@bottomRight,','))" />
 <xsl:param name="cx" select="($left+$right) div 2" />
 <xsl:param name="cy" select="($bottom+$top) div 2" />
 <xsl:param name="s" select="@spacingX div $documentsNode/screenPitch" />
 <xsl:apply-templates mode="imageViewport" select="$cur">
  <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$s,',')" />
  <xsl:with-param name="node" select="$node" />
  <xsl:with-param name="custNode" select='$custNode' />
 </xsl:apply-templates>
</x:template>
 
<x:template name="imageHandlerLayout" mode="newlayout" match="h:div[@class='imageHandler']">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:if test="@mode=$mode">
   <xsl:if test="@oncommand">
    <xsl:attribute name="action"><xsl:value-of select="@oncommand" /><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="." />
    </xsl:apply-templates><xsl:apply-templates mode="hrefArgsNode" select="current()">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select="$custNode" />
    </xsl:apply-templates></xsl:attribute>
   </xsl:if>  
   <xsl:if test="@handler">
      <xsl:attribute name="onmousedown">return <xsl:value-of select="@handler"/>.mouseDown(#{(browser=='MSIE')?"":"evt"});</xsl:attribute>
   </xsl:if>
 </xsl:if>
</x:template>

<!-- Adds the key image information to the action arguments. -->
<x:template name="keyImageArg" mode="hrefArgsNode" match="h:div[@addKeyImageArgs]">
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:variable name="custImage" select="$custNode/self::se:image" />
  <xsl:choose>
    <xsl:when test="$custImage/@koUID='true' or (count($custImage[@koUID])=0 and $node/@koUID!='')">&amp;select=false</xsl:when>
    <xsl:otherwise>&amp;select=true</xsl:otherwise>
  </xsl:choose>
</x:template>

<!-- Display the key image not indicator, if applicable -->
<x:template name="displayRelKO">
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:variable name="custImage" select="$custNode/self::se:image" />
  
  <xsl:if test="$custImage/@koUID='true' or (count($custImage[@koUID])=0 and $node/@koUID!='')">
   <c:if test="#{browser=='MSIE'}">
    <v:image style="width:100px; height: 100px; top: 25px; left: 900px;" src="/xero/img/key.png" />
   </c:if>
   <c:if test="#{browser!='MSIE'}">
    <svg:image xlink:href="/xero/img/key.png" x="900" y="25" width="100" height="100" preserveAspectRatio="none"/>
   </c:if>
  </xsl:if>
</x:template>

<!-- Render the display relative objects -->
<x:template name="imageDisplayRel" mode="newlayout" match="h:div[@class='imageDisplayRel']">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />
 <xsl:element name="#{browser=='MSIE'?'v:group':'svg:svg'}">
  <xsl:attribute name="class">imageDisplayRel</xsl:attribute>
  <xsl:attribute name="style">width: 100%; height: 100%;</xsl:attribute>
  <xsl:attribute name="preserveAspectRatio">none</xsl:attribute>
  <xsl:attribute name="viewBox">0,0,1000,1000</xsl:attribute>
  <xsl:attribute name="coordsize">1000,1000</xsl:attribute>
  <xsl:attribute name="coordorigin">0,0</xsl:attribute>
  <xsl:call-template name="addUseDisplay"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /><xsl:with-param name="custNode" select="$custNode" /></xsl:call-template>
  <xsl:call-template name="displayRelKO"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /><xsl:with-param name="custNode" select="$custNode" /></xsl:call-template>
 </xsl:element>
</x:template>

<!-- Handles the spatial transformation.  This causes the "display area" to change size/shape/rotation to fit the next nested area. -->
<x:template name="imageSPAT" mode="newlayout" match="h:div[@class='imageSPAT']">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode" />

 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />

 <xsl:param name="rotation"><xsl:choose><xsl:when test="$custNode/ancestor-or-self::*/@rotation"><xsl:value-of select="$custNode/ancestor-or-self::*/@rotation[last()]" /></xsl:when><xsl:when test="$node/ancestor-or-self::*/@rotation"><xsl:value-of select="$node/ancestor-or-self::*/@rotation[last()]" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="cos"><xsl:choose><xsl:when test="$custNode/ancestor-or-self::*/@cos"><xsl:value-of select="$custNode/ancestor-or-self::*/@cos[last()]" /></xsl:when><xsl:when test="$node/ancestor-or-self::*/@cos"><xsl:value-of select="$node/ancestor-or-self::*/@cos[last()]" /></xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="sin"><xsl:choose><xsl:when test="$custNode/ancestor-or-self::*/@sin"><xsl:value-of select="$custNode/ancestor-or-self::*/@sin[last()]" /></xsl:when><xsl:when test="$node/ancestor-or-self::*/@sin"><xsl:value-of select="$node/ancestor-or-self::*/@sin[last()]" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="flip"><xsl:choose><xsl:when test="$custNode/ancestor-or-self::*/@horizontalFlip"><xsl:value-of select="$custNode/ancestor-or-self::*/@horizontalFlip[last()]" /></xsl:when><xsl:when test="$node/ancestor-or-self::*/@horizontalFlip"><xsl:value-of select="$node/ancestor-or-self::*/@horizontalFlip[last()]" /></xsl:when><xsl:otherwise>FALSE</xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="aspect"><xsl:choose><xsl:when test="$custNode/ancestor-or-self::*/@aspect"><xsl:value-of select="$custNode/ancestor-or-self::*/@aspect[last()]" /></xsl:when><xsl:when test="$node/ancestor-or-self::*/@aspect"><xsl:value-of select="$node/ancestor-or-self::*/@aspect[last()]" /></xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:param>
 
 <xsl:param name="wSPAT" select="$w" />
 <xsl:param name="hSPAT" select="$h div $aspect" />
 <xsl:param name="locSPAT" select="concat($wSPAT,',',$hSPAT,',')" />
  
 <xsl:element name="#{browser=='MSIE'?'v:group':'svg:g'}">
  <xsl:attribute name="id">SPAT</xsl:attribute>
  <xsl:attribute name="class">SPAT</xsl:attribute>
  <xsl:attribute name="style"><xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template><xsl:if test="$flip='TRUE'">flip: x;</xsl:if><xsl:if test="$rotation!=0">rotation: <xsl:value-of select="$rotation" />;</xsl:if></xsl:attribute>
  <xsl:call-template name="attributeSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
  <xsl:attribute name="coordsize"><xsl:value-of select="$locSPAT" /></xsl:attribute>
  <xsl:attribute name="transform">translate(<xsl:value-of select="concat($w div 2,',', $h div 2)" />)<xsl:if test="$flip='TRUE'"> scale(-1,1)</xsl:if><xsl:if test="$rotation!=0"> rotate(<xsl:value-of select="$rotation" />)</xsl:if><xsl:if test="$aspect!=1"> scale(1,<xsl:value-of select="$aspect" />)</xsl:if></xsl:attribute>
  <xsl:call-template name="imageDISA">
   <xsl:with-param name="loc" select="$locSPAT" />
   <xsl:with-param name="node" select="$node" />
   <xsl:with-param name="custNode" select='$custNode' />
  </xsl:call-template> 
 </xsl:element>
</x:template>

<x:template name="imageSvg" mode="newlayout" match="h:div[@class='imageSvg']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />  
  <xsl:element name="#{browser=='MSIE'?'v:group':'svg:svg'}">
   <xsl:attribute name="style"><xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template></xsl:attribute>
   <xsl:call-template name="attributeSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:attribute name="coordsize"><xsl:value-of select="$loc" /></xsl:attribute>
   <xsl:apply-templates mode="newlayout">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
     <xsl:with-param name="custNode" select='$custNode' />
   </xsl:apply-templates>
  </xsl:element>      
</x:template>

<x:template name="imageRel" mode="newlayout" match="h:div[@class='imageRel']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  
  <div>
    <xsl:attribute name="style">position: relative;<xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template></xsl:attribute>  
    <xsl:apply-templates mode="newlayout">
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$node" />
       <xsl:with-param name="custNode" select='$custNode' />
     </xsl:apply-templates>
  </div>
</x:template>

<x:template name="imageArea" mode="newlayout" match="h:div[@class='imageArea']">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <div>
    <xsl:attribute name="id">dimg<xsl:value-of select="$custNode/self::se:image/@id" /></xsl:attribute>
    <!-- TODO remove all these bits - they should be included as CSS style directly -->
    <xsl:attribute name="style">float: left;
     <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template><c:if test="#{browser=='MSIE'}">overflow: hidden;</c:if>
     <xsl:value-of select="@style" />
    </xsl:attribute>
    
    <xsl:apply-templates mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
      <xsl:with-param name="custNode" select='$custNode' />
    </xsl:apply-templates>
  </div>
</x:template>

<!-- This lays out a JPEG image with the correct GSPS applied etc -->
<x:template name="imageJpeg" mode="newlayout" match="h:div[@class='imageJpeg']">
  <xsl:param name="node" />
  <xsl:param name="custNode" />
  <xsl:variable name="wWidth"><xsl:choose><xsl:when test="$custNode[@windowWidth]"><xsl:value-of select="$custNode[@windowWidth][last()]/@windowWidth" /></xsl:when><xsl:otherwise><xsl:value-of select="@windowWidth" /></xsl:otherwise></xsl:choose></xsl:variable>
  <xsl:variable name="wCenter"><xsl:choose><xsl:when test="$custNode[@windowCenter]"><xsl:value-of select="$custNode[@windowCenter][last()]/@windowCenter" /></xsl:when><xsl:otherwise><xsl:value-of select="@windowCenter" /></xsl:otherwise></xsl:choose></xsl:variable>
  <xsl:element name="img">
    <xsl:attribute name="src">/wado2/wado?requestType=WADO&amp;studyUID=1&amp;seriesUID=1&amp;objectUID=<xsl:value-of select="$node/@SOPInstanceUID" /><xsl:if test="$wCenter!=''">&amp;windowCenter=<xsl:value-of select="$wCenter" />&amp;windowWidth=<xsl:value-of select="$wWidth" /></xsl:if><xsl:if test="$node/@frame!=''">&amp;frameNumber=<xsl:value-of select="$node/@frame" /></xsl:if><xsl:if test="$node/@gspsUID!=''">&amp;presentationUID=<xsl:value-of select="$node/@gspsUID" /></xsl:if>&amp;rows=512</xsl:attribute>
  </xsl:element>
</x:template>

<x:template name="imageLayout" mode="newlayout" match="se:image">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="custNode" />
   <xsl:param name="custSeriesNode" select="$custNode/self::se:series" />
   <xsl:param name="viewStart"><xsl:choose><xsl:when test="$custSeriesNode/@viewStart"><xsl:value-of select="$custSeriesNode/@viewStart" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
   <xsl:param name="offset" select="$viewStart+@offset" />
   <xsl:param name="imageNode" select="$node/se:image[@Position=$offset]" />
   <xsl:param name="objectUID" select="$imageNode/@SOPInstanceUID" />
   <xsl:param name="custImageNode" select="current() | $custNode | ($custNode/se:image[@SOPInstanceUID=$objectUID][count(@frame)=0 or @frame=$node/@frame])" />
   
   <xsl:choose>
     <xsl:when test="count($imageNode)=0">
	  <xsl:apply-templates mode="disabled">
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$imageNode" />
       <xsl:with-param name="custNode" select='$custImageNode' />
	  </xsl:apply-templates>
     </xsl:when>
     <xsl:otherwise>
	  <xsl:apply-templates mode="newlayout">
       <xsl:with-param name="loc" select="$loc" />
       <xsl:with-param name="node" select="$imageNode" />
       <xsl:with-param name="custNode" select='$custImageNode' />
	  </xsl:apply-templates>
     </xsl:otherwise>
   </xsl:choose>
   
</x:template>

<!-- Changes from the series document to the image document -->
<x:template name="switchSeriesToImageDoc">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="custNode"/>
 <!-- Compute the image document to get information from.  This will become the new node -->
 <xsl:param name="countMod" select="4" />
 <xsl:param name="count" select="$countMod+@pageSize" />
 <xsl:param name="custSeriesNode" select="$custNode/se:series[@SeriesInstanceUID=$node/@SeriesInstanceUID]" />
 <!-- This is the over-ride offset, not the image level offset -->
 <xsl:param name="viewStart"><xsl:choose><xsl:when test="$custSeriesNode/@viewStart"><xsl:value-of select="$custSeriesNode/@viewStart" /></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="position" select="$viewStart - ( $viewStart mod $countMod )" />
 <xsl:param name="studyUID" select="$node/../@StudyInstanceUID" />
 <xsl:param name="gsps"><xsl:choose><xsl:when test="$documentsNode//se:study[@StudyInstanceUID=$studyUID]/@gspsLabel">&amp;gsps=<xsl:value-of select="$documentsNode//se:study[@StudyInstanceUID=$studyUID]/@gspsLabel" /></xsl:when><xsl:when test="$node/parent::*[@gspsLabel]">&amp;gsps=<xsl:value-of select="$node/parent::se:study/@gspsLabel" /></xsl:when></xsl:choose></xsl:param>
 <xsl:param name="koUid"><xsl:choose><xsl:when test="$custNode/@koUID">&amp;koUID=<xsl:value-of select="$custNode/@koUID" /></xsl:when><xsl:when test="$node/parent::se:study/@koUID!=''">&amp;koUID=<xsl:value-of select="$node/parent::se:study/@koUID" /></xsl:when></xsl:choose></xsl:param>
 <xsl:param name="imageUrl" select="concat('/xero/image/image.xml?pixelInfo=true&amp;SeriesInstanceUID=',$node/@SeriesInstanceUID,'&amp;Count=',$count,'&amp;Position=',$position,$gsps,$koUid)" />
 <xsl:param name="newSeriesNode" select="document($imageUrl)/se:results/se:patient/se:study[@StudyInstanceUID=$studyUID]/se:series" />
 <xsl:message>http://wtl-bwallace/<xsl:value-of select="$imageUrl" /></xsl:message>

 <xsl:apply-templates mode="svg" select="$newSeriesNode/../se:series/se:gsps/svg:svg">
  <xsl:with-param name="loc" select="$loc" />
  <xsl:with-param name="node" select="." />
  <xsl:with-param name="custNode" select="$custNode | $custSeriesNode" />
 </xsl:apply-templates>
 
 <xsl:apply-templates mode="newlayout" select="*">
  <xsl:with-param name="loc" select="$loc" />
  <xsl:with-param name="node" select="$newSeriesNode" />
  <xsl:with-param name="custNode" select="$custNode | $custSeriesNode" />
 </xsl:apply-templates>
</x:template>

<!-- Lays out the series nodes. -->
<x:template name="seriesLayout" mode="newlayout" match="se:series">
  <xsl:param name="loc" />
  <xsl:param name="node" />
  <xsl:param name="custNode"/>
  <xsl:param name="studyUID" select="$node/@StudyInstanceUID" />
  <xsl:param name="seriesUID"><xsl:choose>
    <xsl:when test="$custNode/@viewStart != '' and $node/se:series[se:image][@SeriesInstanceUID=$custNode/@viewStart]"><xsl:value-of select="$custNode/@viewStart" /></xsl:when>
    <xsl:otherwise><xsl:value-of select="$node/se:series[se:image]/@SeriesInstanceUID" /></xsl:otherwise>
  </xsl:choose></xsl:param>
  <xsl:param name="seriesNodeForUID" select="$node/se:series[@SeriesInstanceUID=$seriesUID]" />
  <xsl:param name="seriesNode" select="$node/se:series[se:image][1+current()/@offset + count($seriesNodeForUID/preceding-sibling::se:series[se:image])]" />
  <xsl:message>Series layout series UID specified/start=<xsl:value-of select="$seriesUID" /> count of series node with that uid=<xsl:value-of select="count($seriesNode)" /> final node selected is <xsl:value-of select="$seriesNode/@SeriesInstanceUID" /> at offset <xsl:value-of select="@offset" /></xsl:message>
  <xsl:choose>
    <xsl:when test="count($seriesNode)=0">
      <xsl:apply-templates mode="disabled">
   	    <xsl:with-param name="loc" select="$loc" />
     	<xsl:with-param name="node" select="$node" />
   	    <xsl:with-param name="custNode" select="$custNode | current()" />
      </xsl:apply-templates>
    </xsl:when>
    <xsl:when test="@pageSize!=0">
	  <xsl:call-template name="switchSeriesToImageDoc">
        <xsl:with-param name="loc" select="$loc" />
	    <xsl:with-param name="node" select="$seriesNode" />
	    <xsl:with-param name="custNode" select="$custNode | current()" />
	  </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates mode="newlayout">
        <xsl:with-param name="loc" select="$loc" />
        <xsl:with-param name="node" select="$seriesNode" />
        <xsl:with-param name="custNode" select="$custNode | current()" />
      </xsl:apply-templates>
    </xsl:otherwise>
  </xsl:choose>
</x:template>

<!-- Renders a study node.  This is specified by the @offset parameter.  The node underneath this one might be a multiple study node,
     in the case that a study merge has occurred or for multi study key image notes.
 -->
<x:template name="studyLayout" mode="newlayout" match="se:study">
   <xsl:param name="loc" />
   <xsl:param name="node"/>
   <xsl:param name="custNode"/>
   <xsl:param name="offset" select="1+@offset" />
   <xsl:param name="studyNode" select="$node/se:study[$offset]" />
   <xsl:param name="studyUID" select="$studyNode/@StudyInstanceUID" />
   <xsl:param name="custStudyNode" select="$custNode/se:study[@StudyInstanceUID=$studyUID]" />
   <xsl:param name="koUid"><xsl:choose><xsl:when test="$custStudyNode/@koUID">&amp;koUID=<xsl:value-of select="$custStudyNode/@koUID" /></xsl:when><xsl:otherwise>&amp;koUID=*</xsl:otherwise></xsl:choose></xsl:param>
   <xsl:param name="seriesDocName" select="concat('/xero/series/series.xml?gsps=*&amp;StudyInstanceUID=',$studyNode/@StudyInstanceUID,$koUid)" />
   <xsl:param name="seriesDoc" select="document($seriesDocName)/se:results" />
   <xsl:param name="newStudyNode" select="$seriesDoc/se:patient/se:study[@StudyInstanceUID=$studyUID]" />
   <xsl:message>For study <xsl:value-of select="$studyUID" /> from query <xsl:value-of select="$seriesDocName" /> there are <xsl:value-of select="count($newStudyNode/se:series[@Viewable > 0])"/> viewable nodes.</xsl:message>
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$newStudyNode" />
    <xsl:with-param name="custNode" select="$custNode | $custStudyNode" />
   </xsl:apply-templates>
</x:template>

<x:template name="patientLayout" mode="newlayout" match="se:patient">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="custNode" />
   <xsl:param name="offset" select="1+@offset" />
   <xsl:param name="patNode" select="$node/se:patient[$offset]" />
   <xsl:param name="patIdent" select="$patNode/@PatientIdentifier" />
   <xsl:param name="patCustNode" select="($documentsNode/se:patient) | ($layoutNode/se:patient)" />
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node/se:patient[$offset]" />
    <xsl:with-param name="custNode" select="$custNode | $patCustNode" />
   </xsl:apply-templates>
</x:template>

<x:template name="baseImage" m:body="baseImage" m:body.priority="5">
 <xsl:apply-templates select="$frameNode/*" mode="newlayout" >
  <xsl:with-param name="loc">1070,710,</xsl:with-param>
  <xsl:with-param name="node" select="document(/documents/layout/@doc)/se:results" />
 </xsl:apply-templates>
</x:template>

</x:xsl>