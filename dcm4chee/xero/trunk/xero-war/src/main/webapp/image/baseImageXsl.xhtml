<!-- 
	 The base image contains the code to generate the current image to display.
-->
<x:xsl
  pageConfig="#{PageConfig.display.BaseImage}"
  xmlns:x="http://www.dcm4che.org/xero/jsf"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:m="http://www.dcm4che.org/xero/metadata/display/BaseImage"
  xmlns:c="http://java.sun.com/jstl/core"
  xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:svg="http://www.w3.org/2000/svg"
  m:includeXsl="/image/baseImageXsl.xhtml"
>

<x:template name="miscLayout" mode="newlayout" match="*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <div>
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:apply-templates mode="newlayout" select="*">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
 </div>
</x:template>

<x:template name="hboxLayout" match="xul:hbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="sum" select="sum(*/@width)" />

 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
    <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="round($width * @width div $sum)" />
    <xsl:with-param name="height" select="$height" />
    <xsl:with-param name="node" select="$node" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<x:template name="newLayout">
  <xsl:param name="width" />
  <xsl:param name="height" />
  <xsl:param name="node" />
  <xsl:apply-templates select='.' mode='newlayout'>
    <xsl:with-param name="loc" select="concat($width,',',$height,',')" />
    <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
</x:template>

<x:template name="vboxLayout" match="xul:vbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="sum" select="sum(*/@height)" />

 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="$width" />
    <xsl:with-param name="height" select="round($height * @height div $sum)" />
    <xsl:with-param name="node" select="$node" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<!-- Figures out the arguments to a standard WADO call, getting the region and so on setup
     correctly
  -->
<x:template name="imageWado" mode="wadoArgsNode" match="se:image"><xsl:param name="loc" /><xsl:param name="node" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wr" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wr,','))" />
 <xsl:param name="hr" select="substring-after($wr,',')" />
 <xsl:param name="cx" select="number(substring-before($hr,','))" />
 <xsl:param name="cxr" select="substring-after($hr,',')" />
 <xsl:param name="cy" select="number(substring-before($cxr,','))" />
 <xsl:param name="cyr" select="substring-after($cxr,',')" />
 <xsl:param name="s" select="number(substring-before($cyr,','))" /> 
  <!-- The next line will be MUCH easier to write with min/max functions available. -->
 <xsl:param name="orx"><xsl:choose><xsl:when test="$cx - $w div (2 * $s) &lt; 0">0</xsl:when><xsl:otherwise><xsl:value-of select="$cx - $w div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="ory"><xsl:choose><xsl:when test="$cy - $h div (2 * $s) &lt; 0">0</xsl:when><xsl:otherwise><xsl:value-of select="$cy - $h div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="brx"><xsl:choose><xsl:when test="$cx + $w div (2 * $s) >= @Columns"><xsl:value-of select="@Columns" /></xsl:when><xsl:otherwise><xsl:value-of select="$cx + $w div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>
 <xsl:param name="bry"><xsl:choose><xsl:when test="$cy + $h div (2 * $s) >= @Rows"><xsl:value-of select="@Rows" /></xsl:when><xsl:otherwise><xsl:value-of select="$cy + $h div (2 * $s)" /></xsl:otherwise></xsl:choose></xsl:param>

 <xsl:param name="seriesUID" select="parent::*/@SeriesInstanceUID" />
 <xsl:param name="objectUID" select="@SOPInstanceUID" />
 <xsl:param name="custNode" select="($documentsNode//se:series[@SeriesInstanceUID=$seriesUID])|($documentsNode//se:image[@SOPInstanceUID=$objectUID])" />
 <xsl:param name="wWidth" select="$custNode[@windowWidth][last()]/@windowWidth" />
 <xsl:param name="wCenter" select="$custNode[@windowCenter][last()]/@windowCenter" />
 
 <xsl:attribute name="#{browser=='MSIE'?'src':'xlink:href'}">/xero/wlwado?requestType=WADO<xsl:value-of select="concat('&amp;studyUID=1&amp;seriesUID=1&amp;objectUID=',@SOPInstanceUID)" /><xsl:if test="$wCenter">&amp;windowCenter=<xsl:value-of select="$wCenter" />&amp;windowWidth=<xsl:value-of select="$wWidth" /></xsl:if><xsl:value-of select="concat('&amp;region=',$orx div @Columns,',',$ory div @Rows,',',$brx div @Columns,',',$bry div @Rows)" />&amp;rows=<xsl:value-of select="round(($bry - $ory) * $s)" /></xsl:attribute>
 <c:if test="#{browser=='MSIE'}">
  <xsl:attribute name="style"><xsl:value-of select="concat('left:',$orx,';top:',$ory,';width:',$brx - $orx,';height:',$bry - $ory,';')" /></xsl:attribute>
 </c:if>
 <c:if test="#{browser!='MSIE'}">
  <xsl:attribute name="width"><xsl:value-of select="$brx - $orx" /></xsl:attribute>
  <xsl:attribute name="height"><xsl:value-of select="$bry - $ory" /></xsl:attribute>
  <xsl:attribute name="transform">translate(<xsl:value-of select="concat($orx,',',$ory)" />)</xsl:attribute>
 </c:if>
 <xsl:attribute name="Rows"><xsl:value-of select="@Rows" /></xsl:attribute>
 <xsl:attribute name="Columns"><xsl:value-of select="@Columns" /></xsl:attribute>
 <xsl:attribute name="minPixel"><xsl:value-of select="@minPixel" /></xsl:attribute>
 <xsl:attribute name="maxPixel"><xsl:value-of select="@maxPixel" /></xsl:attribute>
</x:template>

<!-- Generate arguments for the current location of this object based on the data node
     associated with this object, not based on the type of the argument.
  -->
<x:template name="imageArgs" mode="hrefArgsNode" match="se:image"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;objectUID=<xsl:value-of select="@SOPInstanceUID" /></x:template>

<!-- Add the full region code to the submit - may also want to know mode type eventually -->
<x:template name="region" mode="hrefArgsNode" match="xul:region">
<xsl:param name="loc" />&amp;region=<xsl:value-of select="$loc" />
</x:template>

<x:template name="windowLevel" mode="hrefArgsNode" match="xul:windowLevel">&amp;minPixel=0&amp;maxPixel=65535</x:template>

<x:template name="seriesArgs" mode="hrefArgsNode" match="se:series"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;seriesUID=<xsl:value-of select="@SeriesInstanceUID" /></x:template>

<x:template name="studyArgs" mode="hrefArgsNode" match="se:study"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;studyUID=<xsl:value-of select="@StudyInstanceUID" /></x:template>

<x:template name="patientArgs" mode="hrefArgsNode" match="se:patient"><xsl:if test="@PatientIdentifier">&amp;patientIdentifier=<xsl:value-of select="./@PatientIdentifier" /></xsl:if></x:template>

<x:template name="defaultHrefArgs">&amp;cid=<xsl:value-of select="$cid" /></x:template>

<x:template name="toolbar" mode="newlayout" match="xul:toolbar[@ref]">
 <xsl:param name="loc" />
 <xsl:param name="node" />
   
 <xsl:param name="toolbarId" select='./@ref' />
 <xsl:param name="thisToolbar" select="$toolbarNode/xul:toolbar[@id=$toolbarId]" />
   
 <div>
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>

  <!-- Generate the toolbar from the toolbar layout information -->
  <xsl:apply-templates select="$thisToolbar/*" mode="newlayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
    
 </div>
</x:template>

<x:template name="textLayout" mode="newlayout" match="xul:text">
 <xsl:value-of select="@label" />
</x:template>

<x:template name="applyLevel" mode="newlayout" match="xul:applyLevel">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:choose>
   <xsl:when test="@level = $applyLevel">
     <xsl:apply-templates mode="inactiveLayout">
      <xsl:with-param name="loc" select="$loc" />
	  <xsl:with-param name="node" select="$node" />
     </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
     <xsl:apply-templates mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
     </xsl:apply-templates>
   </xsl:otherwise>
 </xsl:choose>
</x:template>

<x:template name="inactiveButtonLayout" mode="inactiveLayout" match="xul:button">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <b><xsl:value-of select="@label" /></b>
</x:template>

<x:template name="buttonLayout" mode="newlayout" match="xul:button">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="buttonId" select="concat(@id,generate-id($node))" />
 <a>
  <xsl:attribute name="id"><xsl:value-of select="$buttonId" /></xsl:attribute>
  <xsl:if test="@oncommand">
   <xsl:attribute name="href"><xsl:value-of select="@oncommand" /><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="." />
   </xsl:apply-templates><xsl:apply-templates mode="hrefArgsNode">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
   </xsl:apply-templates></xsl:attribute>
   <xsl:attribute name="onclick">return displayXslt.action("<xsl:value-of select="$buttonId" />");</xsl:attribute>
  </xsl:if>  
  <xsl:value-of select="@label" />
 </a>
</x:template>

<x:template name="prevImgButton" mode="newlayout" match="xul:prevImgButton">
</x:template>

<x:template name="changeMode" mode="newlayout" match="xul:changeMode">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:choose>
  <xsl:when test="@mode = $mode">
   <b><xsl:value-of select="@label" /></b>
  </xsl:when>
  <xsl:otherwise>
    <xsl:call-template name="buttonLayout">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
    </xsl:call-template>
  </xsl:otherwise>
 </xsl:choose>
</x:template>

<x:template name="modeButton" mode="newlayout" match="xul:modeButton">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:if test="@mode = $mode">
  <xsl:call-template name="buttonLayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:call-template>
 </xsl:if>
</x:template>

<x:template name="nextImgButton" mode="newlayout" match="xul:nextImgButton">
</x:template>

<x:template name="styleSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 width:<xsl:value-of select="$w" />px; height:<xsl:value-of select="$h" />px;
</x:template>

<x:template name="attributeSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 <xsl:attribute name="width"><xsl:value-of select="$w" /></xsl:attribute>
 <xsl:attribute name="height"><xsl:value-of select="$h" /></xsl:attribute>
</x:template>

<x:template name="imageToolbarNode" m:imageToolbar.viewport="imageToolbarNode" >
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="refId" select='./@ref' />
 <xsl:apply-templates select="$toolbarNode/xul:toolbar[@id=$refId]/*" mode="newlayout">
  <xsl:with-param name="loc" select="$loc" />
  <xsl:with-param name="node" select="$node" />
 </xsl:apply-templates>
</x:template>

<!-- Adds an attributes or child nodes of the image node.  A separate overlay call may need
  to be made for overlay information following the image node (if any). -->
<x:template name="imageOverlay">         
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="overlayId" select='./@overlay' />
 <xsl:param name="overlayNode" select="$toolbarNode/xul:overlay[@id=$overlayId]" />
 <xsl:if test="count($overlayNode)>0">
  <xsl:apply-templates select="$overlayNode/*" mode="newlayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
 </xsl:if>
</x:template>

<!-- Renders the image viewport - has loc with full zoom/pan size information. -->
<x:template name="imageViewport" mode="imageViewport" match="se:image">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:call-template name="imageToolbarNode">
  <xsl:with-param name="loc" select="$loc" />
  <xsl:with-param name="node" select="$node" />
 </xsl:call-template> 
 <xsl:call-template name="imageGroup">
   <xsl:with-param name="loc" select='$loc' />
   <xsl:with-param name="node" select="$node" />
 </xsl:call-template>
</x:template>

<!-- Figures out the top-left hand coordinates in image coordinates, comma separated -->
<x:template name="addCoordAttributes">
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wr" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wr,','))" />
 <xsl:param name="hr" select="substring-after($wr,',')" />
 <xsl:param name="cx" select="number(substring-before($hr,','))" />
 <xsl:param name="cxr" select="substring-after($hr,',')" />
 <xsl:param name="cy" select="number(substring-before($cxr,','))" />
 <xsl:param name="cyr" select="substring-after($cxr,',')" />
 <xsl:param name="s" select="number(substring-before($cyr,','))" />
 
 <xsl:param name="orx" select="$cx - $w div (2 * $s)" />
 <xsl:param name="ory" select="$cy - $h div (2 * $s)" />
 <!-- Include the VML attributes all the time as they are easier to parse than viewbox -->
 <xsl:attribute name="coordorigin"><xsl:value-of select="concat($orx,',',$ory)" /></xsl:attribute>
 <xsl:attribute name="coordsize"><xsl:value-of select="concat($w div $s,',',$h div $s)" /></xsl:attribute>
 <xsl:attribute name="scl"><xsl:value-of select="$s" /></xsl:attribute>
 <!-- Don't bother including the viewBox if it isn't SVG rendering. -->
 <c:if test="${browser!='MSIE'}">
  <xsl:attribute name="viewBox"><xsl:value-of select="concat($orx,',',$ory,',',$w div $s,',',$h div $s)" /></xsl:attribute>
 </c:if>
 <!-- Also include width/height for JavaScript to use. -->
</x:template>

<x:template name="addImage">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:element name="#{browser=='MSIE'?'v:image':'svg:image'}">
  <xsl:attribute name="preserveAspectRatio">none</xsl:attribute>
  <xsl:attribute name="id">img<xsl:value-of select="@id" /></xsl:attribute>
  <xsl:apply-templates select="$node" mode="wadoArgsNode" ><xsl:with-param name="loc" select="$loc" /><xsl:with-param name="node" select="." /></xsl:apply-templates>
  <xsl:call-template name="imageOverlay">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:call-template>
 </xsl:element>
</x:template>

<!-- The low resolution image is added for pan/zoom currently. -->
<x:template name="addLowResImage">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="xs" select="256 * $node/@Columns div $node/@Rows" />

 <xsl:if test="$mode = 'zoomPan'">
  <xsl:element name="#{browser=='MSIE'?'v:image':'svg:image'}">
   <xsl:attribute name="id">lowres<xsl:value-of select="@id" /></xsl:attribute>
   <xsl:apply-templates select="$node" mode="wadoArgsNode" >
     <xsl:with-param name="loc" select="concat(256,',',256,',',$node/@Columns div 2,',',$node/@Rows div 2,',',256 div $node/@Rows,',')" />
     <xsl:with-param name="node" select="." />
   </xsl:apply-templates>
  </xsl:element>
 </xsl:if>
</x:template>

<!-- Renders the image group, including overlays etc - calls the image, shutter etc groups. -->
<x:template name="imageGroup" m:imageGroup.viewport="imageGroup">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:element name="#{browser=='MSIE'?'v:group':'svg:svg'}">
  <xsl:attribute name="style"><xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template></xsl:attribute>
  <xsl:call-template name="addCoordAttributes"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
  <xsl:call-template name="attributeSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
  <xsl:call-template name="addLowResImage"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /></xsl:call-template>
  <xsl:call-template name="addImage"><xsl:with-param name="loc" select="$loc"/><xsl:with-param name="node" select="$node" /></xsl:call-template>
 </xsl:element>
</x:template>

<!-- 
Change image display to depend on 5 values:
w, h are the pixel value width and height of the view port
cx, cy are the center x and center y positions of the image in image coordinates
zoom is the zoom amount to use as a factor to convert image coordinates to screen coordinates.
Then:
x = (x_im -cx) * z + w/2
x_im = (x - w/2 )/z + cx

For specified region - use region center coordinates & zoom level directly.
For magnify, use use zoom level from GSPS and center coordinates again
For true size, use zoom level calculated from display size & spacing, and center coordinates again.

Calculate requested region based on available space.
Calculate rows/columns based on the calculated region converted into displayed pixels
Calculate top-left hand as -w/2z + cx,-h/2z+cy and coordinate range as w/z,h/z
Width and height of displayed area as are specified.

If no mode is specified, then calculate magnify as the smallest area that will cause the image to fit, 
and cx,cy = width /2, height/2

 -->
<x:template name="imageRegion">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="seriesUID" select="$node/parent::*/@SeriesInstanceUID" />
 <xsl:param name="objectUID" select="$node/@SOPInstanceUID" />
 <xsl:param name="custNode" select="($documentsNode//se:series[@SeriesInstanceUID=$seriesUID])|($documentsNode//se:image[@SOPInstanceUID=$objectUID])" />
 <xsl:param name="sizeNode" select="$custNode[@size][last()]" />
 <xsl:choose>
  <xsl:when test="count($sizeNode)>0">
   <xsl:apply-templates mode="imageSize" select="$sizeNode">
    <xsl:with-param name="cur" select="current()" />
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
   </xsl:apply-templates>
  </xsl:when>
  <xsl:otherwise>
   <xsl:call-template name="defaultImageSize">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
   </xsl:call-template>
  </xsl:otherwise>
 </xsl:choose>
</x:template> 

<!-- For when there isn't any specified element for the image size -->
<x:template name="defaultImageSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />
 <xsl:param name="s"><xsl:choose>
   <xsl:when test="$w * $node/@Rows > @h * $node/@Columns"><xsl:value-of select="$w div $node/@Columns" /></xsl:when>
   <xsl:otherwise><xsl:value-of select="$h div $node/@Rows" /></xsl:otherwise>
  </xsl:choose></xsl:param>
 <xsl:call-template name="imageViewport">
  <xsl:with-param name="loc" select="concat($loc,$node/@Columns div 2,',',$node/@Rows div 2,',',$s,',')" />
  <xsl:with-param name="node" select="$node" />
 </xsl:call-template>
</x:template>

<!-- For scale to fit, the center in image pixels is just the center of the pixel values,
     while the zoom is figured out so that the given region fits correctly.  Values can be outside
     the image area.
 --> 
<x:template name="scaleToFit" mode="imageSize" match="*[@size='SCALE TO FIT']">
 <xsl:param name="cur" />
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />

 <xsl:param name="left" select="number(substring-before(@topLeft,','))" />
 <xsl:param name="top" select="number(substring-after(@topLeft,','))" />
 <xsl:param name="right" select="number(substring-before(@bottomRight,','))" />
 <xsl:param name="bottom" select="number(substring-after(@bottomRight,','))" />
 <xsl:param name="cx" select="($left+$right) div 2" />
 <xsl:param name="cy" select="($bottom+$top) div 2" />
 <xsl:param name="sx" select="$w div ( $right - $left)" />
 <xsl:param name="sy" select="$h div ( $bottom - $top)" />
 <xsl:choose>
  <xsl:when test="$sx > $sy">
   <xsl:apply-templates mode="imageViewport" select="$cur">
    <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$sy,',')" />
    <xsl:with-param name="node" select="$node" />
   </xsl:apply-templates>
  </xsl:when>
  <xsl:otherwise>
   <xsl:apply-templates mode="imageViewport" select="$cur">
    <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$sx,',')" />
    <xsl:with-param name="node" select="$node" />
   </xsl:apply-templates>
  </xsl:otherwise>
 </xsl:choose>
</x:template>
 
<!-- For scale to fit, the center in image pixels is just the center of the pixel values,
     while the zoom is figured out so that the given region fits correctly.  Values can be outside
     the image area.
 --> 
<x:template name="magnify" mode="imageSize" match="*[@size='MAGNIFY']">
 <xsl:param name="cur" />
 <xsl:param name="loc" />
 <xsl:param name="w" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="number(substring-before($wrest,','))" />
 <xsl:param name="node" />

 <xsl:param name="left" select="number(substring-before(@topLeft,','))" />
 <xsl:param name="top" select="number(substring-after(@topLeft,','))" />
 <xsl:param name="right" select="number(substring-before(@bottomRight,','))" />
 <xsl:param name="bottom" select="number(substring-after(@bottomRight,','))" />
 <xsl:param name="cx" select="($left+$right) div 2" />
 <xsl:param name="cy" select="($bottom+$top) div 2" />
 <xsl:param name="s" select="@magnify" />
 <xsl:apply-templates mode="imageViewport" select="$cur">
  <xsl:with-param name="loc" select="concat($loc,$cx,',',$cy,',',$s,',')" />
  <xsl:with-param name="node" select="$node" />
 </xsl:apply-templates>
</x:template>
 
<x:template name="imageHandlerLayout" mode="newlayout" match="xul:imageHandler">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:if test="@mode=$mode">
   <xsl:if test="@oncommand">
    <xsl:attribute name="action"><xsl:value-of select="@oncommand" /><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="." />
    </xsl:apply-templates><xsl:apply-templates mode="hrefArgsNode">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
    </xsl:apply-templates></xsl:attribute>
   </xsl:if>  
   <xsl:if test="@handler">
      <xsl:attribute name="onmousedown">return <xsl:value-of select="@handler"/>.mouseDown(#{(browser=='MSIE')?"":"evt"});</xsl:attribute>
   </xsl:if>
 </xsl:if>
</x:template>

<x:template name="imageLayout" mode="newlayout" match="se:image">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <!-- Compute the image document to get information from.  This will become the new node -->
   <xsl:param name="count" select="24" />
   <xsl:param name="offset" select="@offset" />
   <xsl:param name="position" select="@offset - @offset mod $count" />
   <xsl:param name="gsps" select="$node/parent::se:study/@gspsLabel" />
   <xsl:param name="imageUrl" select="concat('/xero/image/image.xml?SeriesInstanceUID=',$node/@SeriesInstanceUID,'&amp;Count=',$count,'&amp;Position=',$position,'&amp;gsps=',$gsps)" />
   <xsl:param name="newSeriesNode" select="document($imageUrl)/se:results/se:patient/se:study/se:series" />
   <xsl:param name="imageNode" select="$newSeriesNode/se:image[@Position=$offset]" />
 
   <div>
    <xsl:attribute name="id">dimg<xsl:value-of select="@id" /></xsl:attribute>
    <xsl:attribute name="style">float: left;
     <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
     overflow: hidden;
     <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
     <xsl:value-of select="@style" />
    </xsl:attribute>
    
	<xsl:if test="$imageNode">
	 <xsl:call-template name="imageRegion">
	  <xsl:with-param name="loc" select="$loc" />
	  <xsl:with-param name="node" select="$imageNode" />
	 </xsl:call-template>
    </xsl:if>
   </div>
</x:template>

<x:template name="seriesLayout" mode="newlayout" match="se:series">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="@offset" />
   <xsl:param name="studyNodeId" select="ancestor::se:study/@id" />
   <xsl:param name="custStudyNode" select="$documentsNode/layout/se:study[@id=$studyNodeId]" />
   <xsl:param name="seriesUID"><xsl:choose>
     <xsl:when test="$custStudyNode/@viewSeriesUID != ''"><xsl:value-of select="$custStudyNode/@viewSeriesUID" /></xsl:when>
     <xsl:otherwise><xsl:value-of select="$node/se:series[1]/@SeriesInstanceUID" /></xsl:otherwise>
   </xsl:choose></xsl:param>
   <xsl:param name="seriesNodeForUID" select="$node/se:series[@SeriesInstanceUID=$seriesUID]" />
   <xsl:param name="seriesNode" select="($seriesNodeForUID | $seriesNodeForUID/following-sibling::se:series)[1+$offset]" />

   <div>
      <xsl:attribute name="id"><xsl:value-of select="./@id" /></xsl:attribute>
      <xsl:apply-templates mode="newlayout" select="*">
        <xsl:with-param name="loc" select="$loc" />
        <xsl:with-param name="node" select="$seriesNode" />
      </xsl:apply-templates>
   </div>
   <br />
</x:template>

<x:template name="studyLayout" mode="newlayout" match="se:study">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="1+@offset" />
   <xsl:param name="studyNode" select="$node/se:study[$offset]" />
   <xsl:param name="seriesDoc" select="document(concat('/xero/series/series.xml?gsps=*&amp;StudyInstanceUID=',$studyNode/@StudyInstanceUID))/se:results" />
   <xsl:param name="newStudyNode" select="$seriesDoc/se:patient/se:study[@StudyInstanceUID=$studyNode/@StudyInstanceUID]" />
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$newStudyNode" />
   </xsl:apply-templates>
</x:template>

<x:template name="patientLayout" mode="newlayout" match="se:patient">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="1+@offset" />
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node/se:patient[$offset]" />
   </xsl:apply-templates>
</x:template>

<x:template name="baseImage" m:body="baseImage" m:body.priority="5">
 <br />
 <br />
 <xsl:apply-templates select="$frameNode/*" mode="newlayout" >
  <xsl:with-param name="loc">800,600,</xsl:with-param>
  <xsl:with-param name="node" select="document(/documents/layout/@doc)/se:results" />
 </xsl:apply-templates>
</x:template>

</x:xsl>