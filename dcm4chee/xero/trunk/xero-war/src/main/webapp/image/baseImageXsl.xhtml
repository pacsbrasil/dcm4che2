<!-- 
	 The base image contains the code to generate the current image to display.
-->
<x:xsl
  pageConfig="#{PageConfig.display.BaseImage}"
  xmlns:x="http://www.dcm4che.org/xero/jsf"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:m="http://www.dcm4che.org/xero/metadata/display/BaseImage"
  xmlns:c="http://java.sun.com/jstl/core"
  xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:svg="http://www.w3.org/2000/svg"
  m:includeXsl="/image/baseImageXsl.xhtml"
>

<x:template name="miscLayout" mode="newlayout" match="*">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <div>
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:apply-templates mode="newlayout" select="*">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
 </div>
</x:template>

<x:template name="hboxLayout" match="xul:hbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="sum" select="sum(*/@width)" />

 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
    <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="round($width * @width div $sum)" />
    <xsl:with-param name="height" select="$height" />
    <xsl:with-param name="node" select="$node" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<x:template name="newLayout">
  <xsl:param name="width" />
  <xsl:param name="height" />
  <xsl:param name="node" />
  <xsl:apply-templates select='.' mode='newlayout'>
    <xsl:with-param name="loc" select="concat($width,',',$height,',')" />
    <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
</x:template>

<x:template name="vboxLayout" match="xul:vbox" mode="newlayout">
 <xsl:param name="loc" />
 <xsl:param name="width" select="number(substring-before($loc,','))" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="height" select="number(substring-before($wrest,','))" />
 <xsl:param name="hrest" select="substring-after($wrest,',')" />
 <xsl:param name="node" />
 <xsl:param name="sum" select="sum(*/@height)" />

 <div>  
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   width: <xsl:value-of select="floor($width)" />px;
   height: <xsl:value-of select="floor($height)"/>px;
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>
  <xsl:for-each select="*">
   <xsl:call-template name="newLayout" >
    <xsl:with-param name="width" select="$width" />
    <xsl:with-param name="height" select="round($height * @height div $sum)" />
    <xsl:with-param name="node" select="$node" />
   </xsl:call-template>
  </xsl:for-each>
 </div>
</x:template>

<x:template name="imageWado" mode="wadoArgsNode" match="se:image">
<xsl:param name="loc" />
<xsl:param name="node" />
<xsl:param name="seriesUID" select="parent::*/@SeriesInstanceUID" />
<xsl:param name="objectUID" select="@SOPInstanceUID" />
<xsl:param name="custNode" select="($documentsNode//se:series[@SeriesInstanceUID=$seriesUID])|($documentsNode//se:image[@SOPInstanceUID=$objectUID])" />
<xsl:param name="wWidth" select="$custNode[@windowWidth][last()]/@windowWidth" />
<xsl:param name="wCenter" select="$custNode[@windowCenter][last()]/@windowCenter" />
<xsl:param name="region" select="$custNode[@region][last()]/@region" />
<xsl:value-of select="concat('&amp;studyUID=1&amp;seriesUID=1&amp;objectUID=',@SOPInstanceUID)" />
<xsl:if test="$wCenter">&amp;windowCenter=<xsl:value-of select="$wCenter" />&amp;windowWidth=<xsl:value-of select="$wWidth" /></xsl:if><xsl:if test="$region">&amp;region=<xsl:value-of select='$region' /></xsl:if></x:template>

<!-- Generate arguments for the current location of this object based on the data node
     associated with this object, not based on the type of the argument.
  -->
<x:template name="imageArgs" mode="hrefArgsNode" match="se:image"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;objectUID=<xsl:value-of select="@SOPInstanceUID" /></x:template>

<x:template name="region" mode="hrefArgsNode" match="xul:region">
<xsl:param name="loc" />
<xsl:param name="node" />
<xsl:param name="inode" select="$node/se:image[1] | $node | $node/parent::*" />
<xsl:param name="seriesUID" select="$inode/@SeriesInstanceUID" />
<xsl:param name="objectUID" select="$inode/@SOPInstanceUID" />
<xsl:param name="custNode" select="($documentsNode//se:series[@SeriesInstanceUID=$seriesUID])|($documentsNode//se:image[@SOPInstanceUID=$objectUID])" />
<xsl:param name="region" select="$custNode/@region[last()]" /><xsl:if test="$region">&amp;region=<xsl:value-of select="$region" /></xsl:if></x:template>

<x:template name="windowLevel" mode="hrefArgsNode" match="xul:windowLevel">&amp;minPixel=0&amp;maxPixel=65535</x:template>

<x:template name="seriesArgs" mode="hrefArgsNode" match="se:series"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;seriesUID=<xsl:value-of select="@SeriesInstanceUID" /></x:template>

<x:template name="studyArgs" mode="hrefArgsNode" match="se:study"><xsl:apply-templates select=".." mode="hrefArgsNode" />&amp;studyUID=<xsl:value-of select="@StudyInstanceUID" /></x:template>

<x:template name="patientArgs" mode="hrefArgsNode" match="se:patient"><xsl:if test="@PatientIdentifier">&amp;patientIdentifier=<xsl:value-of select="./@PatientIdentifier" /></xsl:if></x:template>

<x:template name="defaultHrefArgs">&amp;cid=<xsl:value-of select="$cid" /></x:template>

<x:template name="toolbar" mode="newlayout" match="xul:toolbar[@ref]">
 <xsl:param name="loc" />
 <xsl:param name="node" />
   
 <xsl:param name="toolbarId" select='./@ref' />
 <xsl:param name="thisToolbar" select="$toolbarNode/xul:toolbar[@id=$toolbarId]" />
   
 <div>
  <xsl:attribute name="id"><xsl:value-of select="@id" /></xsl:attribute>
  <xsl:attribute name="style">float: left;
   <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
   <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
   <xsl:value-of select="@style" />
  </xsl:attribute>

  <!-- Generate the toolbar from the toolbar layout information -->
  <xsl:apply-templates select="$thisToolbar/*" mode="newlayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:apply-templates>
    
 </div>
</x:template>

<x:template name="textLayout" mode="newlayout" match="xul:text">
 <xsl:value-of select="@label" />
</x:template>

<x:template name="applyLevel" mode="newlayout" match="xul:applyLevel">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:choose>
   <xsl:when test="@level = $applyLevel">
     <xsl:apply-templates mode="inactiveLayout">
      <xsl:with-param name="loc" select="$loc" />
	  <xsl:with-param name="node" select="$node" />
     </xsl:apply-templates>
   </xsl:when>
   <xsl:otherwise>
     <xsl:apply-templates mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$node" />
     </xsl:apply-templates>
   </xsl:otherwise>
 </xsl:choose>
</x:template>

<x:template name="inactiveButtonLayout" mode="inactiveLayout" match="xul:button">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <b><xsl:value-of select="@label" /></b>
</x:template>

<x:template name="buttonLayout" mode="newlayout" match="xul:button">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:param name="buttonId" select="concat(@id,generate-id($node))" />
 <a>
  <xsl:attribute name="id"><xsl:value-of select="$buttonId" /></xsl:attribute>
  <xsl:if test="@oncommand">
   <xsl:attribute name="href"><xsl:value-of select="@oncommand" /><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="." />
   </xsl:apply-templates><xsl:apply-templates mode="hrefArgsNode">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node" />
   </xsl:apply-templates></xsl:attribute>
   <xsl:attribute name="onclick">return displayXslt.action("<xsl:value-of select="$buttonId" />");</xsl:attribute>
  </xsl:if>  
  <xsl:value-of select="@label" />
 </a>
</x:template>

<x:template name="prevImgButton" mode="newlayout" match="xul:prevImgButton">
</x:template>

<x:template name="changeMode" mode="newlayout" match="xul:changeMode">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:choose>
  <xsl:when test="@mode = $mode">
   <b><xsl:value-of select="@label" /></b>
  </xsl:when>
  <xsl:otherwise>
    <xsl:call-template name="buttonLayout">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
    </xsl:call-template>
  </xsl:otherwise>
 </xsl:choose>
</x:template>

<x:template name="modeButton" mode="newlayout" match="xul:modeButton">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:if test="@mode = $mode">
  <xsl:call-template name="buttonLayout">
   <xsl:with-param name="loc" select="$loc" />
   <xsl:with-param name="node" select="$node" />
  </xsl:call-template>
 </xsl:if>
</x:template>

<x:template name="nextImgButton" mode="newlayout" match="xul:nextImgButton">
</x:template>

<x:template name="styleSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 width:<xsl:value-of select="$w" />px; height:<xsl:value-of select="$h" />px;
</x:template>

<x:template name="attributeSize">
 <xsl:param name="loc" />
 <xsl:param name="w" select="substring-before($loc,',')" />
 <xsl:param name="wrest" select="substring-after($loc,',')" />
 <xsl:param name="h" select="substring-before($wrest,',')" />
 <xsl:attribute name="width"><xsl:value-of select="$w" /></xsl:attribute>
 <xsl:attribute name="height"><xsl:value-of select="$h" /></xsl:attribute>
</x:template>
<!-- 
Change image display to depend on 5 values:
w, h are the pixel value width and height of the view port
cx, cy are the center x and center y positions of the image in image coordinates
zoom is the zoom amount to use as a factor to convert image coordinates to screen coordinates.
Then:
x = (x_im -cx) * z + w/2
x_im = (x - w/2 )/z + cx

For specified region - use region center coordinates & zoom level directly.
For magnify, use use zoom level from GSPS and center coordinates again
For true size, use zoom level calculated from display size & spacing, and center coordinates again.

Calculate requested region based on available space.
Calculate rows/columns based on the calculated region converted into displayed pixels
Calculate top-left hand as -w/2z + cx,-h/2z+cy and coordinate range as w/z,h/z
Width and height of displayed area as are specified.

If no mode is specified, then calculate magnify as the smallest area that will cause the image to fit, 
and cx,cy = width /2, height/2

 -->
<x:template name="imageLayout" mode="newlayout" match="se:image">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="rows" select="512" />
   <xsl:param name="count" select="24" />
   <xsl:param name="offset" select="@offset" />
   <xsl:param name="position" select="@offset - @offset mod $count" />
   <xsl:param name="imageUrl" select="concat('/xero/image/image.xml?SeriesInstanceUID=',$node/@SeriesInstanceUID,'&amp;Count=',$count,'&amp;Position=',$position)" />
   <xsl:param name="newSeriesNode" select="document($imageUrl)/se:results/se:patient/se:study/se:series" />
   <xsl:param name="imageNode" select="$newSeriesNode/se:image[@Position=$offset]" />
   <xsl:param name="overlayId" select='./@overlay' />
   <xsl:param name="overlayNode" select="$toolbarNode/xul:overlay[@id=$overlayId]" />
   <xsl:param name="refId" select='./@ref' />

   <div>
    <xsl:attribute name="style">float: left;
     <xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
     <xsl:if test="@background">background: <xsl:value-of select="@background" /></xsl:if>
     <xsl:value-of select="@style" />
    </xsl:attribute>
	<xsl:if test="$imageNode">
	 <xsl:apply-templates select="$toolbarNode/xul:toolbar[@id=$refId]/*" mode="newlayout">
      <xsl:with-param name="loc" select="$loc" />
      <xsl:with-param name="node" select="$imageNode" />
	 </xsl:apply-templates>
     <c:choose>
      <c:when test="#{browser=='MSIE'}">
       <v:group>
        <xsl:attribute name="style"><xsl:call-template name="styleSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template></xsl:attribute>
        <xsl:attribute name="coordorigin">0,0</xsl:attribute>
        <xsl:attribute name="coordsize"><xsl:value-of select="concat($imageNode/@Columns,',',$imageNode/@Rows)" /></xsl:attribute>
        <v:image>
         <xsl:attribute name="id">img<xsl:value-of select="@id" /></xsl:attribute>
         <xsl:attribute name="src">/xero/wlwado?requestType=WADO<xsl:apply-templates select="$imageNode" mode="wadoArgsNode" />&amp;rows=<xsl:value-of select="$rows" /></xsl:attribute>
         <xsl:attribute name="style"><xsl:value-of select="concat('width: ',$imageNode/@Columns,'; height: ',$imageNode/@Rows,';')" /></xsl:attribute>
  	      <xsl:if test="count($overlayNode)>0">
          <xsl:apply-templates select="$overlayNode/*" mode="newlayout">
           <xsl:with-param name="loc" select="$loc" />
           <xsl:with-param name="node" select="$imageNode" />
          </xsl:apply-templates>
  	      </xsl:if>
  	     </v:image>
       </v:group>
      </c:when>
      <c:otherwise>
       <svg:svg>
        <xsl:call-template name="attributeSize"><xsl:with-param name="loc" select="$loc" /></xsl:call-template>
        <xsl:attribute name="viewBox">0 0 <xsl:value-of select="concat($imageNode/@Columns,' ',$imageNode/@Rows)" /></xsl:attribute>
        <svg:image preserveAspectRatio="none">
         <xsl:attribute name="id">img<xsl:value-of select="@id" /></xsl:attribute>
         <xsl:attribute name="xlink:href">/xero/wlwado?requestType=WADO<xsl:apply-templates select="$imageNode" mode="wadoArgsNode" />&amp;rows=<xsl:value-of select="$rows" /></xsl:attribute>
         <xsl:attribute name="width"><xsl:value-of select="$imageNode/@Columns" /></xsl:attribute>
         <xsl:attribute name="height"><xsl:value-of select="$imageNode/@Rows" /></xsl:attribute>
   	     <xsl:if test="count($overlayNode)>0">
          <xsl:apply-templates select="$overlayNode/*" mode="newlayout">
           <xsl:with-param name="loc" select="$loc" />
           <xsl:with-param name="node" select="$imageNode" />
          </xsl:apply-templates>
   	     </xsl:if>
   	    </svg:image>
       </svg:svg>
      </c:otherwise>
     </c:choose>
    </xsl:if>
   </div>
</x:template>

<x:template name="imageHandlerLayout" mode="newlayout" match="xul:imageHandler">
 <xsl:param name="loc" />
 <xsl:param name="node" />
 <xsl:if test="@mode=$mode">
   <xsl:if test="@oncommand">
    <xsl:attribute name="href"><xsl:value-of select="@oncommand" /><xsl:call-template name="defaultHrefArgs" /><xsl:apply-templates select="$node" mode="hrefArgsNode">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="." />
    </xsl:apply-templates><xsl:apply-templates mode="hrefArgsNode">
     <xsl:with-param name="loc" select="$loc" />
     <xsl:with-param name="node" select="$node" />
    </xsl:apply-templates></xsl:attribute>
   </xsl:if>  
   <xsl:if test="@handler">
      <xsl:attribute name="onmousedown">return <xsl:value-of select="@handler"/>.mouseDown(#{(browser=='MSIE')?"":"evt"});</xsl:attribute>
   </xsl:if>
 </xsl:if>
</x:template>

<x:template name="seriesLayout" mode="newlayout" match="se:series">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="@offset" />
   <xsl:param name="seriesNodeForUID" select="$node/se:series[@SeriesInstanceUID=$seriesUID]" />
   <xsl:param name="seriesNode" select="($seriesNodeForUID | $seriesNodeForUID/following-sibling::se:series)[1+$offset]" />
   <div>
      <xsl:attribute name="id"><xsl:value-of select="./@id" /></xsl:attribute>
      <xsl:apply-templates mode="newlayout" select="*">
        <xsl:with-param name="loc" select="$loc" />
        <xsl:with-param name="node" select="$seriesNode" />
      </xsl:apply-templates>
   </div>
   <br />
</x:template>

<x:template name="studyLayout" mode="newlayout" match="se:study">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="1+@offset" />
   <xsl:param name="studyNode" select="$node/se:study[$offset]" />
   <xsl:param name="seriesDoc" select="document(concat('/xero/series/series.xml?StudyInstanceUID=',$studyNode/@StudyInstanceUID))/se:results" />
   <xsl:param name="newStudyNode" select="$seriesDoc/se:patient/se:study[@StudyInstanceUID=$studyNode/@StudyInstanceUID]" />
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$newStudyNode" />
   </xsl:apply-templates>
</x:template>

<x:template name="patientLayout" mode="newlayout" match="se:patient">
   <xsl:param name="loc" />
   <xsl:param name="node" />
   <xsl:param name="offset" select="1+@offset" />
   <xsl:apply-templates mode="newlayout" select="*">
    <xsl:with-param name="loc" select="$loc" />
    <xsl:with-param name="node" select="$node/se:patient[$offset]" />
   </xsl:apply-templates>
</x:template>

<x:template name="baseImage" m:body="baseImage" m:body.priority="5">
 <br />
 <br />
 <xsl:apply-templates select="$frameNode/*" mode="newlayout" >
  <xsl:with-param name="loc">800,600,</xsl:with-param>
  <xsl:with-param name="node" select="document(/documents/layout/@doc)/se:results" />
 </xsl:apply-templates>
</x:template>

</x:xsl>