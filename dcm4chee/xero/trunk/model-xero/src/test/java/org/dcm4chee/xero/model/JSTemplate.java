package org.dcm4chee.xero.model;

import java.util.Map;

import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.servlet.StringSafeRenderer;
import org.dcm4chee.xero.metadata.MetaDataBean;
import org.dcm4chee.xero.util.StringUtil;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.ScriptableObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class creates javascript automated tests from the template model, and any provided
 * data model to test from.  It is separated out as a separate class to allow modifications and
 * different sets of tests to be run.
 * @author bwallace
 *
 */
public class JSTemplate {
	static final Logger log = LoggerFactory.getLogger(JSTemplate.class);
	
	String[] groups;
	MetaDataBean mdbModel;
	Map<String,Object> model;

	// This copy of stgData is used as the base data to render.
	StringTemplateGroup[] stg;
	
	/** Create a JSTemplate on the given groups, no model. */
	public JSTemplate(String... groups) {
		ClassLoader cl = Thread.currentThread().getContextClassLoader();
		this.groups = groups;
		assert groups.length>0;
		this.stg = new StringTemplateGroup[groups.length];
		for(int i=0; i<this.stg.length; i++) {
			String dir = cl.getResource(this.groups[i]).getFile();
			log.debug("Setting JSTemplate group {} to {}",i,dir);
			this.stg[i] = new StringTemplateGroup(this.groups[i],dir);
			stg[i].setAttributeRenderers(StringSafeRenderer.JS_RENDERERS);
			if( i>0 ) this.stg[i-1].setSuperGroup(this.stg[i]);
		}
	}
	
	/** Create a JSTemplate on the given data model, and given groups */
	public JSTemplate(MetaDataBean mdbModel, String... groups) {
		this(groups);
		this.mdbModel = mdbModel;
	}

	public void runTest(String jsName) {
		runTest(jsName,false);
	}
	
	/** Gets the data model to use when templating to create the javascript */
	@SuppressWarnings("unchecked")
	public Map<String,Object> getModel() {
		if( mdbModel!=null ) {
			log.debug("Found a non-null mdb to create the model {}", mdbModel.getPath());
			Map<String,Object> ret = (Map<String,Object>) mdbModel.getValue();
			if( ret==null ) return mdbModel;
			return ret;
		}
		log.info("No mdb model found, returning {}", model);
		return model;
	}
	
	/**
	 * Runs the named JavaScript test, as generated by StringTemplate - loads
	 * the base js classes, the Xero model, and then the named test.
	 * 
	 * @param jsName
	 */
   public void runTest(String jsName, boolean verbose) {
	   ContextFactory cf = new ContextFactory();
	   Context cx = cf.enterContext();
	   ScriptableObject scope = cx.initStandardObjects();

		StringTemplate st;
		Map<String,Object> useModel = this.getModel();
		if( useModel!=null ) st = stg[0].getInstanceOf(jsName,useModel);
		else st = stg[0].getInstanceOf(jsName);
		String js = st.toString();
		
		if (verbose) {
			log.info("Generated script {}", js);
		}
	  try {
		 cx.evaluateString(scope, js, "<cmd>", 1, null);
	  } catch (EcmaError e) {
		 log.warn("Caught exception {} on line {}", e.getMessage(), e.lineNumber());
		 int line = e.lineNumber();
		 String[] splits = StringUtil.split(js, '\n', true);
		 for (int i = Math.max(0, line - 5), n = Math.min(splits.length - 1, line + 5); i < n; i++) {
			log.info("{}: {}", i + 1, splits[i]);
		 }
		 assert false;
	  }
   }


}
