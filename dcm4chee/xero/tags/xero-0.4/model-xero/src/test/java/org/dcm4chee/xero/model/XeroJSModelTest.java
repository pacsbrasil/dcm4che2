/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is part of dcm4che, an implementation of DICOM(TM) in
 * Java(TM), hosted at http://sourceforge.net/projects/dcm4che.
 *
 * The Initial Developer of the Original Code is
 * Bill Wallace, Agfa HealthCare Inc., 
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Bill Wallace <bill.wallace@agfa.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
package org.dcm4chee.xero.model;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.servlet.StringSafeRenderer;
import org.dcm4chee.xero.util.StringUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

/**
 * Tests the JavaScript model
 * 
 * @author bwallace
 * 
 */
public class XeroJSModelTest {
	static final Logger log = LoggerFactory.getLogger(XeroJSModelTest.class);

	static ClassLoader cl = Thread.currentThread().getContextClassLoader();

	static String modelDir = cl.getResource("xeroModel").getFile();

	static String testDir = cl.getResource("xeroModelTests").getFile();

	// This copy of stgData is used as the base data to render.
	static StringTemplateGroup stgModel = new StringTemplateGroup(
			"base", modelDir);

	static StringTemplateGroup stgTests = new StringTemplateGroup(
			"tests", testDir);

	static {
		stgModel.setAttributeRenderers(StringSafeRenderer.JS_RENDERERS);
		stgTests.setAttributeRenderers(StringSafeRenderer.JS_RENDERERS);
		stgTests.setSuperGroup(stgModel);
	};

	@Test
	public void imageLayoutTest() {
		runTest("imageLayoutTests", false);
	}

	@Test
	public void mergedTest() {
		runTest("mergedTest", false);
	}

	@Test
	public void navigationTest() {
		runTest("navigationTests", false);
	}

	@Test
	public void navConversationTest() {
		runTest("navConversationTests", false);
	}
	
	@Test
	public void studyDataTest() {
		runTest("studyDataTests",false);
	}

	/**
	 * Runs the named JavaScript test, as generated by StringTemplate - loads
	 * the base js classes, the Xero model, and then the named test.
	 * 
	 * @param jsName
	 */
	public void runTest(String jsName, boolean verbose) {
		ScriptEngineManager sem = new ScriptEngineManager();
		ScriptEngine se = sem.getEngineByExtension("js");
		assert se != null;

		StringTemplate st = stgTests.getInstanceOf(jsName);
		String js = st.toString();
		
		if (verbose) {
			log.info("Generated script {}", js);
		}
		try {
			se.eval(js);
		} catch (ScriptException e) {
			log.warn("Caught exception {} on line {}", e.getMessage(), e
					.getLineNumber());
			int line = e.getLineNumber();
			String[] splits = StringUtil.split(js, '\n', true);
			for (int i = Math.max(0, line - 5), n = Math.min(splits.length - 1,
					line + 5); i < n; i++) {
				log.info("{}: {}", i + 1, splits[i]);
			}
			assert false;
		}

	}
}
